/*
 * o2.js NodeJS Module Export
 *
 * THIS FILE IS AUTOMATICALLY GENERATED
 * IF YOU EDIT IT, YOU MAY LOSE YOUR CHANGES
 */
/**
 * Root namespace &ndash; magic goes here ;)
 * @namespace o2
 */
this.o2 = this.o2 || {isProduction : false};

/**
 * @module core.meta
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Meta information.</p>
 */
(function(framework) {
    'use strict';

    /*
     * Common Constants
     */

    var kAny    = '*';
    var kEmpty  = '';
    var kObject = 'object';
    var kString = 'string';

    /*
     *
     */
    function dbg() {

        // We need to stop execution and observe what went wrong if an invalid
        // assignment happens while construcing the framework. The only way we
        // can achieve this is using the "debugger;" statement. And if we do not
        // encapsulate the "debugger;" statement with "eval", YUICompressor
        // whines about it and does not compress the code.
        //
        // Also JSLint, rightfully, warns about the below eval usage, but
        // there's no other way around.
        //
        // All in all, "eval is 'evil'; and the below ("eval('debugger');")
        // decleration is a rare and legitimate usage of that evil ;)
        eval('debugger');
    }

    /*
     *
     */
    function init(root, key, value) {
        if (!root || typeof root !== kObject) {
            return null;
        }

        if (root[key]) {
            return root[key];
        }

        root[key] = value;

        return root[key];
    }

    /*
     * Creates a namespace if it does not exists and returns it;
     * returns the existing namespace otherwise.
     */
    function namespace(root, key) {
        if (!root || typeof root !== kObject) {
            return null;
        }

        return init(root, key, {});
    }

    var fp = init(framework, 'protecteds', {});

    /*
     *
     */
    var isProduction = framework.isProduction;

    /*
     * @property {protected Object} o2.protecteds.classes
     *
     * <p><storng>Caution:<strong> Highly explosive! Do not mess with it
     * unless you know what you are doing <strong>;)</strong></p>
     *
     * <p>This is a meta-level overview of the <strong>o2.js</strong>
     * framework Any public class and method that <strong>o2.js</storng> uses is
     * listed here.</p>
     *
     * <p>This list is used for constructing classes at script's
     * <strong>evaluation time</strong>, and it's not used afterwards.
     * Therefore, changing the list after the scripts are loaded will have
     * no effect at all.</p>
     *
     * <p>This structure is especially useful while running automated unit
     * tests and checking the consistency of the overall framework.</p>
     */

    var kDelegateNotdefined   = 'framework.protecteds: Delegate is undefined: ';
    var kMethodAlreadyDefined = 'framework.protecteds: Method name is already defined : ';
    var kMethodNameNotString  = 'framework.protecteds: "method" should be  a String.';
    var kNameNotProvided      = 'framework.protecteds: name not provided';
    var kNoMetaDefinition     = 'framework.protecteds: no meta definition.';
    var kObjectNotDefined     = 'framework.protecteds: Object not found in mixed collection';
    var kObjNameNotString     = 'framework.protecteds: "name" should be  a String.';
    var kRootNotFound         = 'framework.protecteds: root not found';

    /*
     *
     */
    function getClassNotDefinedWarning(name) {
        return ['framework.protecteds: Class "', name,
            '" is not defined yet.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getMethodNotDefinedInMetaWarning(name) {
        return ['framework.protecteds: Method"', name,
            '" is not found in framework meta definition'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getMethodNotDefinedInFrameworkWarning(name) {
        return ['framework.protecteds: method  "', name,
            '" does not exist in framework.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getClassNotDefinedInMetaWarning(name) {
        return ['framework.protecteds: Class "', name,
            '" is not defined in meta definition.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getMethodOfClassNotDefinedInMetaWarning(name, method) {
        return ['framework.protecteds: Class "', name,
            '" does not have a method "', method,
            '"" defined in meta definition.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getClassDoesNotExistWarning(name) {
        return ['framework.protecteds: Class "', name,
            '" does not currently exist.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getMethodOfClassDoesNotExistWarning(name, method) {
        return ['framework.protecteds: Class "', name,
            '" does not have a method "', method,
            '"" defined.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getRootDoesNotHaveAttributeWarning(name) {
        return ['framework.protecteds: ',
            'root does not have an attribute "', name, '".'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getConstructorAlreadyDefinedWarning(name) {
        return ['framework.protecteds: Constructor "',
            name, '" is already defined.'
        ].join(kEmpty);
    }

    /*
     *
     */
    function getNoMethodToOverrideWarning(name) {
        return ['framework.protecteds: No method "',
            name, '" to override.'
        ].join(kEmpty);
    }

    function getIncorrectMetaDefinitionWarning(name) {
        return ['framework.protecteds: Incorrect meta definition for "',
            name, '".'
        ].join(kEmpty);
    }

    /*
     * These constants save some space during minification:
     */
     var kAjaxControllerCore    = 'ajaxcontroller.core';
     var kAjaxCore              = 'ajax.core';
     var kAjaxExtend            = 'ajax.extend';
     var kAjaxStateCore         = 'ajaxstate.core';
     var kCollectionCore        = 'collection.core';
     var kCookieCore            = 'cookie.core';
     var kCore                  = 'core';
     var kDebuggerCore          = 'debugger.core';
     var kDateCore              = 'date.core';
     var kDomClass              = 'dom.class';
     var kDomConstants          = 'dom.constants';
     var kDomCore               = 'dom.core';
     var kDomDimension          = 'dom.dimension';
     var kDomForm               = 'dom.form';
     var kDomLoad               = 'dom.load';
     var kDomModify             = 'dom.modify';
     var kDomReady              = 'dom.ready';
     var kDomScroll             = 'dom.scroll';
     var kDomStyle              = 'dom.style';
     var kDomTraverse           = 'dom.traverse';
     var kEventConstants        = 'event.constants';
     var kEventCore             = 'event.core';
     var kEventExtend           = 'event.extend';
     var kExtend                = 'extend';
     var kJsonpCore             = 'jsonp.core';
     var kJsonpControllerCore   = 'jsonpcontroller.core';
     var kJsonpStateCore        = 'jsonpstate.core';
     var kMethodCore            = 'method.core';
     var kMethodEvent           = 'method.event';
     var kMethodInherit         = 'method.inherit';
     var kMethodRepeat          = 'method.repeat';
     var kMethodTimer           = 'method.timer';
     var kMethodTranspose       = 'method.transpose';
     var kObjectCore            = 'object.core';
     var kQueryStringCore       = 'querystring.core';
     var kSortDelegateCore      = 'sortdelegate.core';
     var kStringCore            = 'string.core';
     var kStringEncode          = 'string.encode';
     var kStringStrip           = 'string.strip';
     var kStringTransform       = 'string.transform';
     var kSupportsCore          = 'supports.core';
     var kTemplateCore          = 'template.core';
     var kTimerCore             = 'timer.core';
     var kTryCore               = 'try.core';
     var kUnitCore              = 'unit.core';
     var kValidationCore        = 'validation.core';
     var kValidationRegExp      = 'validation.regexp';

     init(fp, 'classes', {
        o2 : {
            items : {
                $          : {MODULE : kCore},
                build      : {MODULE : kCore},
                load       : {MODULE : kCore},
                longName   : {MODULE : kCore},
                name       : {MODULE : kCore},
                nill       : {MODULE : kCore},
                noConflict : {MODULE : kCore},
                now        : {MODULE : kCore},
                ready      : {MODULE : kCore},
                url        : {MODULE : kCore},
                version    : {MODULE : kCore},

                n  : {MODULE : kExtend},
                nn : {MODULE : kExtend},
                t  : {MODULE : kExtend},
                tt : {MODULE : kExtend}

            }
        },
        Ajax : {
            items : {
                 abort     : {MODULE : kAjaxCore},
                 createXhr : {MODULE : kAjaxCore},
                 get       : {MODULE : kAjaxCore},
                 post      : {MODULE : kAjaxCore},

                 getSingle  : {MODULE : kAjaxExtend},
                 postSingle : {MODULE : kAjaxExtend}
            }
        },
        AjaxController : {
            items : {
                unregister : {MODULE : kAjaxControllerCore},
                update     : {MODULE : kAjaxControllerCore}
            }
        },
        AjaxState : {
            items : {
                protecteds          : {MODULE : kAjaxStateCore},

                addObserver         : {MODULE : kAjaxStateCore},
                countObservers      : {MODULE : kAjaxStateCore},
                deleteObserver      : {MODULE : kAjaxStateCore},
                deleteObservers     : {MODULE : kAjaxStateCore},
                init                : {MODULE : kAjaxStateCore},
                timeoutObservers    : {MODULE : kAjaxStateCore},
                timeoutAllObservers : {MODULE : kAjaxStateCore}
            }
        },
        Collection : {
            items : {
                any                 : {MODULE : kCollectionCore},
                clear               : {MODULE : kCollectionCore},
                clone               : {MODULE : kCollectionCore},
                compact             : {MODULE : kCollectionCore},
                contains            : {MODULE : kCollectionCore},
                copy                : {MODULE : kCollectionCore},
                detect              : {MODULE : kCollectionCore},
                diff                : {MODULE : kCollectionCore},
                each                : {MODULE : kCollectionCore},
                every               : {MODULE : kCollectionCore},
                exclude             : {MODULE : kCollectionCore},
                extend              : {MODULE : kCollectionCore},
                filter              : {MODULE : kCollectionCore},
                find                : {MODULE : kCollectionCore},
                flatten             : {MODULE : kCollectionCore},
                fold                : {MODULE : kCollectionCore},
                foldR               : {MODULE : kCollectionCore},
                forEach             : {MODULE : kCollectionCore},
                getCount            : {MODULE : kCollectionCore},
                getDifference       : {MODULE : kCollectionCore},
                getFirst            : {MODULE : kCollectionCore},
                getFirstN           : {MODULE : kCollectionCore},
                getFunctions        : {MODULE : kCollectionCore},
                getKeys             : {MODULE : kCollectionCore},
                getLast             : {MODULE : kCollectionCore},
                getLastN            : {MODULE : kCollectionCore},
                getLength           : {MODULE : kCollectionCore},
                getMax              : {MODULE : kCollectionCore},
                getMethods          : {MODULE : kCollectionCore},
                getMin              : {MODULE : kCollectionCore},
                getRest             : {MODULE : kCollectionCore},
                getSize             : {MODULE : kCollectionCore},
                getSortedIndex      : {MODULE : kCollectionCore},
                getValues           : {MODULE : kCollectionCore},
                grep                : {MODULE : kCollectionCore},
                group               : {MODULE : kCollectionCore},
                inArray             : {MODULE : kCollectionCore},
                includes            : {MODULE : kCollectionCore},
                indexOf             : {MODULE : kCollectionCore},
                intersect           : {MODULE : kCollectionCore},
                invoke              : {MODULE : kCollectionCore},
                isEmpty             : {MODULE : kCollectionCore},
                lastIndexOf         : {MODULE : kCollectionCore},
                map                 : {MODULE : kCollectionCore},
                merge               : {MODULE : kCollectionCore},
                pluck               : {MODULE : kCollectionCore},
                reduce              : {MODULE : kCollectionCore},
                reduceRight         : {MODULE : kCollectionCore},
                reject              : {MODULE : kCollectionCore},
                removeElement       : {MODULE : kCollectionCore},
                removeElementByValue: {MODULE : kCollectionCore},
                select              : {MODULE : kCollectionCore},
                shuffle             : {MODULE : kCollectionCore},
                some                : {MODULE : kCollectionCore},
                sort                : {MODULE : kCollectionCore},
                touch               : {MODULE : kCollectionCore},
                toArray             : {MODULE : kCollectionCore},
                union               : {MODULE : kCollectionCore},
                unique              : {MODULE : kCollectionCore},
                zip                 : {MODULE : kCollectionCore}
            }
        },
        Cookie : {
            items : {
                read   : {MODULE : kCookieCore},
                remove : {MODULE : kCookieCore},
                save   : {MODULE : kCookieCore}
            }
        },
        Debugger : {
            items : {
                assert  : {MODULE : kDebuggerCore},
                error   : {MODULE : kDebuggerCore},
                info    : {MODULE : kDebuggerCore},
                init    : {MODULE : kDebuggerCore},
                log     : {MODULE : kDebuggerCore},
                println : {MODULE : kDebuggerCore},
                warn    : {MODULE : kDebuggerCore}
            }
        },
        Date : {
            items : {
                getPrettyDate : {MODULE : kDateCore},
                getTime       : {MODULE : kDateCore},
                now           : {MODULE : kDateCore}
            }
        },
        Dom : {
            items : {
                nodeType : {MODULE : kDomConstants},

                append                  : {MODULE : kDomCore},
                create                  : {MODULE : kDomCore},
                createDocumentFragment  : {MODULE : kDomCore},
                createElement           : {MODULE : kDomCore},
                empty                   : {MODULE : kDomCore},
                getAttribute            : {MODULE : kDomCore},
                getHtml                 : {MODULE : kDomCore},
                getText                 : {MODULE : kDomCore},
                insertAfter             : {MODULE : kDomCore},
                insertBefore            : {MODULE : kDomCore},
                isDocument              : {MODULE : kDomCore},
                isElement               : {MODULE : kDomCore},
                isNode                  : {MODILE : kDomCore},
                prepend                 : {MODULE : kDomCore},
                remove                  : {MODULE : kDomCore},
                removeChildren          : {MODULE : kDomCore},
                removeEmpty             : {MODULE : kDomCore},
                removeEmptyTextNodes    : {MODULE : kDomCore},
                removeNode              : {MODULE : kDomCore},
                setAttribute            : {MODULE : kDomCore},
                setHtml                 : {MODULE : kDomCore},

                addClass              : {MODULE : kDomClass},
                createClassNameRegExp : {MODULE : kDomClass},
                hasClass              : {MODULE : kDomClass},
                removeClass           : {MODULE : kDomClass},
                toggleClass           : {MODULE : kDomClass},

                getDimension            : {MODULE : kDomDimension},
                getDocumentDimension    : {MODULE : kDomDimension},
                getDocumentHeight       : {MODULE : kDomDimension},
                getDocumentWidth        : {MODULE : kDomDimension},
                getHeight               : {MODULE : kDomDimension},
                getViewportInfo         : {MODULE : kDomDimension},
                getWidth                : {MODULE : kDomDimension},
                getWindowInnerDimension : {MODULE : kDomDimension},
                getWindowInnerHeight    : {MODULE : kDomDimension},
                getWindowInnerWidth     : {MODULE : kDomDimension},
                setDimension            : {MODULE : kDomDimension},
                setHeight               : {MODULE : kDomDimension},
                setWidth                : {MODULE : kDomDimension},

                compactField          : {MODULE : kDomForm},
                disable               : {MODULE : kDomForm},
                preventMultipleSubmit : {MODULE : kDomForm},
                removePlaceholder     : {MODULE : kDomForm},
                resetField            : {MODULE : kDomForm},
                trimField             : {MODULE : kDomForm},

                loadCss    : {MODULE : kDomLoad},
                loadImage  : {MODULE : kDomLoad},
                loadScript : {MODULE : kDomLoad},

                replace : {MODULE : kDomModify},
                unwrap  : {MODULE : kDomModify},
                wrap    : {MODULE : kDomModify},

                ready : {MODULE : kDomReady},

                getObjectScrollOfset  : {MODULE : kDomScroll},
                getScrollOffset       : {MODULE : kDomScroll},
                getWindowScrollOffset : {MODULE : kDomScroll},
                scrollObjectToBottom  : {MODULE : kDomScroll},
                scrollObjectToTop     : {MODULE : kDomScroll},
                scrollTo              : {MODULE : kDomScroll},
                scrollToObject        : {MODULE : kDomScroll},
                scrollWindowToBottom  : {MODULE : kDomScroll},
                scrollWindowToObject  : {MODULE : kDomScroll},
                scrollWindowToTop     : {MODULE : kDomScroll},

                activateAlternateStylesheet : {MODULE : kDomStyle},
                addCssRules                 : {MODULE : kDomStyle},
                addStyle                    : {MODULE : kDomStyle},
                getCss                      : {MODULE : kDomStyle},
                getStyle                    : {MODULE : kDomStyle},
                hide                        : {MODULE : kDomStyle},
                isVisible                   : {MODULE : kDomStyle},
                setCss                      : {MODULE : kDomStyle},
                setStyle                    : {MODULE : kDomStyle},
                show                        : {MODULE : kDomStyle},
                toggleVisibility            : {MODULE : kDomStyle},

                getChildren                   : {MODULE : kDomTraverse},
                getChildrenByAttribute        : {MODULE : kDomTraverse},
                getChildrenByAttributeUntil   : {MODULE : kDomTraverse},
                getChildrenByClass            : {MODULE : kDomTraverse},
                getChildrenByClassUntil       : {MODULE : kDomTraverse},
                getChildrenUntil              : {MODULE : kDomTraverse},
                getChildrenWithAttribute      : {MODULE : kDomTraverse},
                getChildrenWithAttributeUntil : {MODULE : kDomTraverse},
                getChildrenWithClass          : {MODULE : kDomTraverse},
                getChildrenWithClassUntil     : {MODULE : kDomTraverse},
                getChildrenWithId             : {MODULE : kDomTraverse},
                getChildrenWithIdUntil        : {MODULE : kDomTraverse},

                getElements                   : {MODULE : kDomTraverse},
                getElementsByAttribute        : {MODULE : kDomTraverse},
                getElementsByClass            : {MODULE : kDomTraverse},
                getElementsWithAttribute      : {MODULE : kDomTraverse},
                getElementsWithClass          : {MODULE : kDomTraverse},
                getElementsWithId             : {MODULE : kDomTraverse},

                getFirst              : {MODULE : kDomTraverse},
                getFirstByAttribute   : {MODULE : kDomTraverse},
                getFirstByClass       : {MODULE : kDomTraverse},
                getFirstWithAttribute : {MODULE : kDomTraverse},
                getFirstWithClass     : {MODULE : kDomTraverse},
                getFirstWithId        : {MODULE : kDomTraverse},

                getFirstChild              : {MODULE : kDomTraverse},
                getFirstChildByAttribute   : {MODULE : kDomTraverse},
                getFirstChildByClass       : {MODULE : kDomTraverse},
                getFirstChildWithAttribute : {MODULE : kDomTraverse},
                getFirstChildWithClass     : {MODULE : kDomTraverse},
                getFirstChildWithId        : {MODULE : kDomTraverse},

                getLast              : {MODULE : kDomTraverse},
                getLastByAttribute   : {MODULE : kDomTraverse},
                getLastByClass       : {MODULE : kDomTraverse},
                getLastWithId        : {MODULE : kDomTraverse},
                getLastWithAttribute : {MODULE : kDomTraverse},
                getLastWithClass     : {MODULE : kDomTraverse},

                getLastChild              : {MODULE : kDomTraverse},
                getLastChildByAttribute   : {MODULE : kDomTraverse},
                getLastChildByClass       : {MODULE : kDomTraverse},
                getLastChildWithAttribute : {MODULE : kDomTraverse},
                getLastChildWithClass     : {MODULE : kDomTraverse},
                getLastChildWithId        : {MODULE : kDomTraverse},

                getNext              : {MODULE : kDomTraverse},
                getNextByAttribute   : {MODULE : kDomTraverse},
                getNextByClass       : {MODULE : kDomTraverse},
                getNextWithAttribute : {MODULE : kDomTraverse},
                getNextWithClass     : {MODULE : kDomTraverse},
                getNextWithId        : {MODULE : kDomTraverse},

                getNextAll                   : {MODULE : kDomTraverse},
                getNextAllByAttribute        : {MODULE : kDomTraverse},
                getNextAllByAttributeUntil   : {MODULE : kDomTraverse},
                getNextAllByClass            : {MODULE : kDomTraverse},
                getNextAllByClassUntil       : {MODULE : kDomTraverse},
                getNextAllUntil              : {MODULE : kDomTraverse},
                getNextAllWithAttribute      : {MODULE : kDomTraverse},
                getNextAllWithAttributeUntil : {MODULE : kDomTraverse},
                getNextAllWithClass          : {MODULE : kDomTraverse},
                getNextAllWithClassUntil     : {MODULE : kDomTraverse},
                getNextAllWithId             : {MODULE : kDomTraverse},
                getNextAllWithIdUntil        : {MODULE : kDomTraverse},

                getNth              : {MODULE : kDomTraverse},
                getNthByAttribute   : {MODULE : kDomTraverse},
                getNthByClass       : {MODULE : kDomTraverse},
                getNthWithAttribute : {MODULE : kDomTraverse},
                getNthWithClass     : {MODULE : kDomTraverse},
                getNthWithId        : {MODULE : kDomTraverse},

                getNthChild              : {MODULE : kDomTraverse},
                getNthChildByAttribute   : {MODULE : kDomTraverse},
                getNthChildByClass       : {MODULE : kDomTraverse},
                getNthChildWithAttribute : {MODULE : kDomTraverse},
                getNthChildWithClass     : {MODULE : kDomTraverse},
                getNthChildWithId        : {MODULE : kDomTraverse},

                getNthNext              : {MODULE : kDomTraverse},
                getNthNextByAttribute   : {MODULE : kDomTraverse},
                getNthNextByClass       : {MODULE : kDomTraverse},
                getNthNextWithAttribute : {MODULE : kDomTraverse},
                getNthNextWithClass     : {MODULE : kDomTraverse},
                getNthNextWithId        : {MODULE : kDomTraverse},

                getNthParent              : {MODULE : kDomTraverse},
                getNthParentByAttribute   : {MODULE : kDomTraverse},
                getNthParentByClass       : {MODULE : kDomTraverse},
                getNthParentWithAttribute : {MODULE : kDomTraverse},
                getNthParentWithClass     : {MODULE : kDomTraverse},
                getNthParentWithId        : {MODULE : kDomTraverse},

                getNthPrev              : {MODULE : kDomTraverse},
                getNthPrevByAttribute   : {MODULE : kDomTraverse},
                getNthPrevByClass       : {MODULE : kDomTraverse},
                getNthPrevWithAttribute : {MODULE : kDomTraverse},
                getNthPrevWithClass     : {MODULE : kDomTraverse},
                getNthPrevWithId        : {MODULE : kDomTraverse},

                getParent              : {MODULE : kDomTraverse},
                getParentByAttribute   : {MODULE : kDomTraverse},
                getParentByClass       : {MODULE : kDomTraverse},
                getParentWithAttribute : {MODULE : kDomTraverse},
                getParentWithClass     : {MODULE : kDomTraverse},
                getParentWithId        : {MODULE : kDomTraverse},

                getParents                   : {MODULE : kDomTraverse},
                getParentsByAttribute        : {MODULE : kDomTraverse},
                getParentsByAttributeUntil   : {MODULE : kDomTraverse},
                getParentsByClass            : {MODULE : kDomTraverse},
                getParentsByClassUntil       : {MODULE : kDomTraverse},
                getParentsUntil              : {MODULE : kDomTraverse},
                getParentsWithAttribute      : {MODULE : kDomTraverse},
                getParentsWithAttributeUntil : {MODULE : kDomTraverse},
                getParentsWithClass          : {MODULE : kDomTraverse},
                getParentsWithClassUntil     : {MODULE : kDomTraverse},
                getParentsWithId             : {MODULE : kDomTraverse},
                getParentsWithIdUntil        : {MODULE : kDomTraverse},

                getPrev              : {MODULE : kDomTraverse},
                getPrevByAttribute   : {MODULE : kDomTraverse},
                getPrevByClass       : {MODULE : kDomTraverse},
                getPrevWithAttribute : {MODULE : kDomTraverse},
                getPrevWithClass     : {MODULE : kDomTraverse},
                getPrevWithId        : {MODULE : kDomTraverse},

                getPrevAll                   : {MODULE : kDomTraverse},
                getPrevAllByAttribute        : {MODULE : kDomTraverse},
                getPrevAllByAttributeUntil   : {MODULE : kDomTraverse},
                getPrevAllByClass            : {MODULE : kDomTraverse},
                getPrevAllByClassUntil       : {MODULE : kDomTraverse},
                getPrevAllUntil              : {MODULE : kDomTraverse},
                getPrevAllWithAttribute      : {MODULE : kDomTraverse},
                getPrevAllWithAttributeUntil : {MODULE : kDomTraverse},
                getPrevAllWithClass          : {MODULE : kDomTraverse},
                getPrevAllWithClassUntil     : {MODULE : kDomTraverse},
                getPrevAllWithId             : {MODULE : kDomTraverse},
                getPrevAllWithIdUntil        : {MODULE : kDomTraverse},

                getSiblings                   : {MODULE : kDomTraverse},
                getSiblingsByAttribute        : {MODULE : kDomTraverse},
                getSiblingsByAttributeUntil   : {MODULE : kDomTraverse},
                getSiblingsByClass            : {MODULE : kDomTraverse},
                getSiblingsByClassUntil       : {MODULE : kDomTraverse},
                getSiblingsUntil              : {MODULE : kDomTraverse},
                getSiblingsWithAttribute      : {MODULE : kDomTraverse},
                getSiblingsWithAttributeUntil : {MODULE : kDomTraverse},
                getSiblingsWithClass          : {MODULE : kDomTraverse},
                getSiblingsWithClassUntil     : {MODULE : kDomTraverse},
                getSiblingsWithId             : {MODULE : kDomTraverse},
                getSiblingsWithIdUntil        : {MODULE : kDomTraverse},

                isChild        : {MODULE : kDomTraverse},
                isNext         : {MODULE : kDomTraverse},
                isParent       : {MODULE : kDomTraverse},
                isParentOrSelf : {MODULE : kDomTraverse},
                isPrev         : {MODULE : kDomTraverse},
                isSibling      : {MODULE : kDomTraverse}
            }
        },
        Event : {
            items : {
                keyCode : {MODULE : kEventConstants},

                addEventListener   : {MODULE : kEventCore},
                addEventListeners  : {MODULE : kEventCore},
                getEventObject     : {MODULE : kEventCore},
                getKeyCode         : {MODULE : kEventCore},
                getMouseCoordinates: {MODULE : kEventCore},
                getTarget          : {MODULE : kEventCore},
                off                : {MODULE : kEventCore},
                on                 : {MODULE : kEventCore},
                preventDefault     : {MODULE : kEventCore},
                removeEventListener: {MODULE : kEventCore},
                stopPropagation    : {MODULE : kEventCore},

                isArrowKey               : {MODULE : kEventExtend},
                isBackspaceKey           : {MODULE : kEventExtend},
                isCharacterKeypressEvent : {MODULE : kEventExtend},
                isEnterKey               : {MODULE : kEventExtend},
                isEscapeKey              : {MODULE : kEventExtend},
                isRightClick             : {MODULE : kEventExtend},
                isTabKey                 : {MODULE : kEventExtend}
            }
        },
        Jsonp : {
            items : {
                get : {MODULE : kJsonpCore}
            }
        },
        JsonpController : {
            base  : 'AjaxController',
            items : {
                update     : {MODULE : kJsonpControllerCore},
                unregister : {MODULE : kJsonpControllerCore}
            }
        },
        JsonpState : {
            base  : 'AjaxState',
            items : {
                protecteds : {MODULE : kJsonpStateCore},

                // Overrides:
                update     : {MODULE : kJsonpStateCore},
                unregister : {MODULE : kJsonpStateCore}
            }
        },
        Method : {
            items : {
                bind     : {MODULE : kMethodCore},
                curry    : {MODULE : kMethodCore},
                identity : {MODULE : kMethodCore},
                memoize  : {MODULE : kMethodCore},
                partial  : {MODULE : kMethodCore},

                bindAsEventListener : {MODULE : kMethodEvent},

                overload            : {MODULE : kMethodInherit},
                requireAllArguments : {MODULE : kMethodInherit},

                after : {MODULE : kMethodRepeat},
                once  : {MODULE : kMethodRepeat},
                times : {MODULE : kMethodRepeat},

                debounce : {MODULE : kMethodTimer},
                defer    : {MODULE : kMethodTimer},
                delay    : {MODULE : kMethodTimer},
                throttle : {MODULE : kMethodTimer},

                compose : {MODULE : kMethodTranspose},
                flip    : {MODULE : kMethodTranspose},
                wrap    : {MODULE : kMethodTranspose}
            }
        },
        Object : {
            items : {
                copy          : {MODULE : kObjectCore},
                copyMethods   : {MODULE : kObjectCore},
                copyPrototype : {MODULE : kObjectCore},
                extend        : {MODULE : kObjectCore},
                stringify     : {MODULE : kObjectCore},
                toArray       : {MODULE : kObjectCore},
                toJsonString  : {MODULE : kObjectCore},
                touch         : {MODULE : kObjectCore}
            }
        },
        QueryString : {
            items : {
                encode : {MODULE : kQueryStringCore},
                parse  : {MODULE : kQueryStringCore}
            }
        },
        SortDelegate : {
            items : {
                sort     : {MODULE : kSortDelegateCore},
                sortAsc  : {MODULE : kSortDelegateCore},
                sortDesc : {MODULE : kSortDelegateCore}
            }
        },
        String : {
            items : {
                compact        : {MODULE : kStringCore},
                concat         : {MODULE : kStringCore},
                format         : {MODULE : kStringCore},
                generateGuid   : {MODULE : kStringCore},
                generateRandom : {MODULE : kStringCore},
                printf         : {MODULE : kStringCore},
                remove         : {MODULE : kStringCore},
                trim           : {MODULE : kStringCore},

                decode         : {MODULE : kStringEncode},
                encode         : {MODULE : kStringEncode},
                encodeSafeHtml : {MODULE : kStringEncode},
                escape         : {MODULE : kStringEncode},
                htmlEncode     : {MODULE : kStringEncode},
                safeHtmlEncode : {MODULE : kStringEncode},
                unescape       : {MODULE : kStringEncode},
                xssEncode      : {MODULE : kStringEncode},

                stripNonAlpha        : {MODULE : kStringStrip},
                stripNonAlphanumeric : {MODULE : kStringStrip},
                stripTags            : {MODULE : kStringStrip},
                stripNonNumeric      : {MODULE : kStringStrip},
                stripNumeric         : {MODULE : kStringStrip},

                br2nl                     : {MODULE : kStringTransform},
                nl2br                     : {MODULE : kStringTransform},
                toCamelCase               : {MODULE : kStringTransform},
                toDashedFromCamelCase     : {MODULE : kStringTransform},
                toJson                    : {MODULE : kStringTransform},
                toUnderscoreFromCamelCase : {MODULE : kStringTransform},
                truncate                  : {MODULE : kStringTransform}
            }
        },
        Supports : {
            items : {
                ajax   : {MODULE : kSupportsCore},
                cookie : {MODULE : kSupportsCore},
                dom    : {MODULE : kSupportsCore}
            }
        },
        Template : {
            items : {
                parse : {MODULE : kTemplateCore}
            }
        },
        Timer : {
            items : {
                set   : {MODULE : kTimerCore},
                start : {MODULE : kTimerCore},
                stop  : {MODULE : kTimerCore}
            }
        },
        Try : {
            items : {
                all   : {MODULE : kTryCore},
                these : {MODULE : kTryCore}
            }
        },
        Unit : {
            items : {
                add                   : {MODULE : kUnitCore},
                assert                : {MODULE : kUnitCore},
                assertEqual           : {MODULE : kUnitCore},
                assertNotEqual        : {MODULE : kUnitCore},
                assertStrictEqual     : {MODULE : kUnitCore},
                assertStrictNotEqual  : {MODULE : kUnitCore},
                getGlobalFailureCount : {MODULE : kUnitCore},
                getGlobalSuccessCount : {MODULE : kUnitCore},
                isRunning             : {MODULE : kUnitCore},
                log                   : {MODULE : kUnitCore},
                run                   : {MODULE : kUnitCore}
            }
        },
        Validation : {
            items : {
                is          : {MODULE : kValidationCore},
                isArguments : {MODULE : kValidationCore},
                isArray     : {MODULE : kValidationCore},
                isBoolean   : {MODULE : kValidationCore},
                isDate      : {MODULE : kValidationCore},
                isFunction  : {MODULE : kValidationCore},
                isNaN       : {MODULE : kValidationCore},
                isNull      : {MODULE : kValidationCore},
                isNumber    : {MODULE : kValidationCore},
                isNumeric   : {MODULE : kValidationCore},
                isObject    : {MODULE : kValidationCore},
                isRegExp    : {MODULE : kValidationCore},
                isString    : {MODULE : kValidationCore},
                isUndefined : {MODULE : kValidationCore},
                isWindow    : {MODULE : kValidationCore},

                isEmail      : {MODULE : kValidationRegExp},
                isUrl        : {MODULE : kValidationRegExp},
                isWhitespace : {MODULE : kValidationRegExp}
            }
        }
    });

    //TODO: complete me.
    init(fp, 'modules', {
        'core.meta' : {
            depends : []
        },
        'core' : {
            depends : ['core.meta']
        },
        'template.core' : {
            depends : ['core']
        }
    });

    // The methods below are <em>internal</em> methods that are used
    // to ensure consistency within the framework.
    // They are not meant for external use.

//TODO: override this file from o2.meta.production.js in production
//since you do not have any MODULE check for production, that's the
//most viable option.

    if (isProduction) {

        /*
         *
         */
        init(fp, 'alias', function(mixed, aliasName, existingName) {
            mixed[1][aliasName] = mixed[1][existingName];
        });

        /*
         *
         */
        init(fp, 'create', function(name) {
            var cls = fp.classes[name];

            return [cls.items, namespace(framework, name)];
        });

        /*
         *
         */
        init(fp, 'construct', function(name, delegate) {
            var cls = fp.classes[name];

            framework[name] = delegate;

            return [cls.items, delegate];
        });

        /*
         *
         */
        init(fp, 'define', function(mixed, name, fn) {
            var me = mixed[1];

            me[name] = fn;
        });

        /*
         *
         */
        init(fp, 'getAttr', function(root, name) {
            var elem = root[name];

            return elem;
        });

        /*
         *
         */
        init(fp, 'getObject', function(mixed) {
            return mixed[1];
        });

        /*
         *
         */
        init(fp, 'getRoot', function() {
            return [fp.classes.o2.items, framework];
        });

        /*
         *
         */
        init(fp, 'override', function(mixed, methodName, fn) {
            var me = mixed[1];

            me.prototype[methodName] = fn;
        });

        /*
         *
         */
        init(fp, 'proto', function(mixed, methodName, fn) {
            var me = mixed[1];

            me.prototype[methodName] = fn;
        });

        /*
         *
         */
        init(fp, 'require', function(name, method) {
            var methodName = '';
            var objName = '';

            if (arguments.length === 1) {
                methodName = name;
                objName = kEmpty;
            } else {
                methodName = method;
                objName = name;
            }

            var meta = null;
            var classes = fp.classes;

            if (objName === kEmpty) {
                var result = null;

                if (classes.hasOwnProperty(methodName)) {
                    result = framework[methodName];

                    return result;
                }

                meta = classes.o2.items;

                result = framework[methodName];

                return result;
            }

            var obj = framework[objName];
            var theMethod = obj[methodName];

            return theMethod;
        });
    } else {

        /*
         *
         */
        init(fp, 'alias', function(mixed, aliasName, existingName) {
            if (!mixed) {
                dbg();

                throw kNoMetaDefinition;
            }

            if (!mixed[1]) {
                dbg();

                throw kObjectNotDefined;
            }

            if (!mixed[0][existingName]) {
                dbg();

                throw getMethodNotDefinedInMetaWarning(existingName);
            }

            if (!mixed[0][aliasName]) {
                dbg();

                throw getMethodNotDefinedInMetaWarning(aliasName);
            }

            if (mixed[1][aliasName]) {
                dbg();

                throw [kMethodAlreadyDefined, aliasName].join(kEmpty);
            }

            mixed[1][aliasName] = mixed[1][existingName];
        });

        /*
         *
         */
        init(fp, 'create', function(name) {
            var cls = fp.classes[name];

            if (!cls) {
                dbg();

                throw getClassNotDefinedInMetaWarning(name);
            }

            if (!cls.items) {
                throw getIncorrectMetaDefinitionWarning(name);
            }

            return [cls.items, namespace(framework, name)];
        });

        /*
         *
         */
        init(fp, 'construct', function(name, delegate) {
            var cls = fp.classes[name];

            if (!cls) {
                dbg();

                throw getClassNotDefinedInMetaWarning(name);
            }

            if (framework[name]) {
                dbg();

                throw getConstructorAlreadyDefinedWarning(name);
            }

            framework[name] = delegate;

            return [cls.items, delegate];
        });

        /*
         *
         */
        init(fp, 'define', function(mixed, name, fn) {
            var meta = mixed[0];
            var me = mixed[1];

            if (!me) {
                dbg();

                throw kObjectNotDefined;
            }

            if (!fn) {
                dbg();

                throw [kDelegateNotdefined, name].join(kEmpty);
            }

            if (!meta) {
                dbg();

                throw kNoMetaDefinition;
            }

            if (meta[name]) {
                if (me[name]) {
                    dbg();

                    throw [kMethodAlreadyDefined, name].join(kEmpty);
                }

                me[name] = fn;
            }
        });

        /*
         *
         */
        init(fp, 'getAttr', function(root, name) {
            if (!root) {
                dbg();

                throw kRootNotFound;
            }

            if (!name) {
                dbg();

                throw kNameNotProvided;
            }

            var elem = root[name];

            if (!elem) {
                dbg();

                throw getRootDoesNotHaveAttributeWarning(name);
            }

            return elem;
        });

        /*
         *
         */
        init(fp, 'getObject', function(mixed) {
            return mixed[1];
        });

        /*
         *
         */
        init(fp, 'getRoot', function() {
            return [fp.classes.o2.items, framework];
        });

        /*
         *
         */
        init(fp, 'override', function(mixed, methodName, fn) {
            var meta = mixed[0];
            var me = mixed[1];

            if (!me) {
                dbg();

                throw 'Object not found in mixed collection';
            }

            if (!fn) {
                dbg();

                throw [kDelegateNotdefined, methodName].join(kEmpty);
            }

            if (!meta[methodName]) {
                dbg();

                throw getClassNotDefinedInMetaWarning(methodName);
            }

            if (!me.prototype[methodName]) {
                dbg();

                throw getNoMethodToOverrideWarning(methodName);
            }

            me.prototype[methodName] = fn;
        });

        /*
         *
         */
        init(fp, 'proto', function(mixed, methodName, fn) {
            var meta = mixed[0];
            var me = mixed[1];

            if (!me) {
                dbg();

                throw kObjectNotDefined;
            }

            if (!fn) {
                dbg();

                throw [kDelegateNotdefined, methodName].join(kEmpty);
            }

            if (!meta[methodName]) {
                dbg();

                throw getMethodOfClassNotDefinedInMetaWarning(kAny, methodName);
            }

            if (me.prototype[methodName]) {
                dbg();

                throw [kMethodAlreadyDefined, methodName].join(kEmpty);
            }

            me.prototype[methodName] = fn;
        });

        /*
         *
         */
        init(fp, 'require', function(name, method) {
            var methodName = '';
            var objName = '';

            if (arguments.length === 1) {
                methodName = name;
                objName = kEmpty;
            } else {
                methodName = method;
                objName = name;
            }

            if (typeof objName !== kString) {
                dbg();

                throw kObjNameNotString;
            }

            if (typeof methodName !== kString) {
                dbg();

                throw kMethodNameNotString;
            }

            var meta = null;
            var classes = fp.classes;

            if (objName === kEmpty) {
                var result = null;

                if (classes.hasOwnProperty(methodName)) {
                    result = framework[methodName];

                    if (!result) {
                        dbg();

                        throw getClassNotDefinedWarning(methodName);
                    }

                    return result;
                }

                meta = classes.o2.items;

                if (!meta[methodName]) {
                    dbg();

                    throw getMethodNotDefinedInMetaWarning(methodName);
                }

                result = framework[methodName];

                if (!result) {
                    dbg();

                    throw getMethodNotDefinedInFrameworkWarning(methodName);
                }

                return result;
            }

            var cls = classes[objName];

            if (!cls) {
                dbg();

                throw getClassNotDefinedInMetaWarning(objName);
            }

            var mtd = cls.items[methodName];

            if (!mtd) {
                dbg();

                throw getMethodOfClassNotDefinedInMetaWarning(objName,
                    methodName);
            }

            var obj = framework[objName];

            if (!obj) {
                dbg();

                throw getClassDoesNotExistWarning(objName);
            }

            var theMethod = obj[methodName];

            if (!theMethod) {
                dbg();

                throw getMethodOfClassDoesNotExistWarning(objName, methodName);
            }

            return theMethod;
        });
    }
}(this.o2));
/**
 * <b>o2.js</b>
 *
 *  <p style="border:1px solid;background:#ccc;padding:10px;margin:10px">
 *  This program is distributed under the terms of the MIT license.<br />
 *  Please see the <strong><a
 *  href="https://github.com/v0lkan/o2.js/blob/master/LICENSE"
 *  >LICENSE</a></strong> file for details.<br /><br />
 *  <p>
 *
 * @project     o2.js
 * @version     0.25.a.0001340690414
 * @author      Volkan Özçelik
 * @description o2.js - a Coherent Solution to Your JavaScript Dilemma ;)
 */

/*
 *  lastModified: 2012-06-02 22:47:21.699341
 */

/**
 * @module   core
 * @requires core.meta
 *
 * <p>The core module.</p>
 */
(function(framework, window, document, UNDEFINED) {
    'use strict';

    var kFrameworkUndefined = 'Please include module "core.meta"!';

    if (framework === UNDEFINED) {
        throw kFrameworkUndefined;
    }

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var def       = attr(_, 'define');
    var obj       = attr(_, 'getObject');
    var require   = attr(_, 'require');
    var root      = attr(_, 'getRoot');

    var exports = {};

    /*
     * Guid (copied from String.core to remove dependency)
     */
    var kGuidRadix    = 36;
    var kGuidShift    = 30;
    var kDecimalPoint = '.';

    /*
     * o2 (Root Namespace)
     */
    var me     = root();
    var myself = obj(me);

    /*
     * Aliases
     */
    var getElementsByName = attr(document, 'getElementsByName');

    /*
     * Common Constants
     */
    var kEmpty            = '';
    var kLoad             = 'load';
    var kObjectNotDefined = ' : Object is not defined.';
    var kString           = 'string';

    /**
     * @function {static} o2.nill
     *
     * <p>An empty function.</p>
     */
    exports.nill = def(me, 'nill', function() {});

    /**
     * @property {readonly String} o2.name
     *
     * <p>Short name of the framework, to be used in
     * prefixes, class names etc.</p>
     */
    exports.name = def(me, 'name', 'o2js');

    /*
     *
     */
    var myName = require('name');

    /**
     * @property {readonly String} o2.url
     *
     * <p>URL of the project.</p>
     */
    exports.url = def(me, 'url', 'http://o2js.com');

    /**
     * @property {readonly String} o2.longName
     *
     * <p>Full name of the project.</p>
     */
    exports.longName = def(
        me,
        'longName',
        'o2.js - a Coherent Solution to Your JavaScript Dilemma ;)'
    );

    /**
     * @property {readonly String} o2.version
     *
     * <p>Project version.</p>
     */
    exports.version = def(me, 'version', '0.25.a');

    /**
     * @property {readonly String} o2.build
     *
     * <p>Project build number.</p>
     */
    exports.build = def(me, 'build', '.0001340690414');

    /**
     * @function {static} o2.$
     *
     * <p>An alias for <code>document.getElementById</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var domRef = o2.$('elementId');
     * </pre>
     *
     * @param {Object} obj - the id to check.
     *
     * @return document.getElementById(obj) if obj is a <code>String</code>;
     * obj itself otherwise.
     *
     * @throws Exception - if obj is <code>undefined</code>.
     */
    exports.$ = def(me, '$', function(obj) {
        if (obj === UNDEFINED) {
            throw [myName, kObjectNotDefined].join(kEmpty);
        }

        if (typeof obj === kString) {
            return document.getElementById(obj);
        }

        return obj || null;
    });

    /*
     *
     */
    var $ = require('$');

    /**
     * @function {static} o2.ready
     *
     * <p>An alias for <code>Dom.ready</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.ready(function() {
     *      initializeWidget();
     * });
     * </pre>
     *
     * @param {Function} callback - The callback to execute when DOM is
     * ready.
     */
    exports.ready = def(me, 'ready', function(callback) {
        require('Dom', 'ready')(callback);
    });

    /**
     * @function {static} o2.load
     *
     * <p>An alias for <code>Event.addEventListener(window, 'load',
     * callback)</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.load(function() {
     *      initializeWidget();
     * });
     * </pre>
     *
     * @param {Function} callback - The callback to execute when window is
     * loaded.
     */
    exports.load = def(me, 'load', function(callback) {
        require('Event', 'addEventListener')(window, kLoad, callback);
    });

    /**
     * @function {static} o2.now
     *
     * <p>Returns the unix time (i.e. the number of milliseconds since
     * midnight of January 1, 1970)</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var unixTimestamp = o2.now();
     * </pre>
     *
     * @return the current unix time.
     */
    exports.now = def(me, 'now', function() {
        return (new Date()).getTime();
    });

    /**
     * @function {static} o2.noConflict
     *
     * <p>Exports the <strong>o2</strong> namespace under a new name, so that
     * it can be used together with an older version of <strong>o2.js</strong>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * [script type="text/javascript" charset="UTF-8" src="o2.0.21.js"][/script]
     * [script type="text/javascript" charset="UTF-8"]
     *     // Now "o2 v.0.21" can be accessed through o3 variable
     *     // (or window.o3).
     *     o2.noConflict('o3');
     *
     *     // Alternative usage without giving explicit namespace.
     *     myApp.o2 = o2.noConflict();
     * [/script]
     * [script type="text/javascript" charset="UTF-8" src="o2.0.23.js"][/script]
     * </pre>
     *
     * @param {String} newName - (Optional; a random unique namespace will be
     * created if not given) the name of the new namespace.
     *
     * @return the new <code>Object</code>.
     */
    exports.noConflict = def(me, 'noConflict', function(newName) {
        var name = newName || [myName, ((new Date()).getTime() +
            Math.random() * (1 << kGuidShift)).toString(kGuidRadix
            ).replace(kDecimalPoint, kEmpty)].join(kEmpty);

        window[name] = myself;
        return window[name];
    });

    /**
     * @function {static} o2.n
     *
     * <p>A <code>getElementsByName</code> wrapper.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var allTags = o2.n('username', 'testForm');
     * </pre>
     *
     * @param {String} tagName - the name of the form item to search.
     * @param {DOMNode} parent - (optional defaults to <code>document</code>)
     * the parent container, or the id of the parent container, to search.
     *
     * @return a collection of matching elements.
     */
    exports.n = def(me, 'n', function(name, parent) {
        var collection = getElementsByName(name);
        var i          = 0;
        var isParent   = require('Dom', 'isParent');
        var item       = null;
        var len        = 0;
        var result     = [];

        if (!parent) {
            return collection;
        }

        var father = $(parent);

        for (i = 0, len = collection.length; i < len; i++) {
            item = collection[i];

            if (isParent(father, item)) {
                result.push(item);
            }
        }

        return result;
    });

    /*
     *
     */
    var n = require('n');

    /**
     * @function {static} o2.nn
     *
     * <p>Acts similar to {link o2.n} -- with one exception: The method
     * returns the first matched node, instead of returning a node
     * collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var firstDiv = o2.nn('userprefs', 'testForm');
     * </pre>
     *
     * @param {String} name - the name of the element to search.
     * @param {DOMNode} parent - (optional defaults to <code>document</code>)
     * the parent container, or the id of the parent container, to search.
     *
     * @return the first matched element if found; <code>null</code>
     * otherwise.
     */
    exports.nn = def(me, 'nn', function(name, parent) {
        var result = n(name, parent);

        return result ? result[0] : null;
    });

    /**
     * @function {static} o2.t
     *
     * <p>A <code>getElementsByTagName</code> wrapper.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var allNodes = o2.t('*')
     * </pre>
     *
     * @param {String} tagName - the name of the tag to search.
     * @param {DOMNode} parent - (optional defaults to <code>document</code>)
     * the parent container, or the id of the parent container, to search.
     *
     * @return a collection of matching elements.
     */
    exports.t = def(me, 't', function(tagName, parent) {
        var p = $(parent || document);

        if (!p) {
            return null;
        }

        return p.getElementsByTagName(tagName);
    });

    /*
     *
     */
    var t = require('t');

    /**
     * @function {static} o2.tt
     *
     * <p>Acts similar to {link o2.t} -- with one exception: The method
     * returns the first matched node, instead of returning a node
     * collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var firstDiv = o2.tt('div', 'MasterContainer');
     * </pre>
     *
     * @param {String} tagName - the name of the tag to search.
     * @param {DOMNode} parent - (optional defaults to <code>document</code>)
     * the parent container, or the id of the parent container, to search.
     *
     * @return the first matched element if found; <code>null</code>
     * otherwise.
     */
    exports.tt = def(me, 'tt', function(tagName, parent) {
        var p = $(parent);

        var result = t(tagName, p);

        return result ? result[0] : null;
    });
}(this.o2, this, this.document));
/**
 * @module   string.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <code>String</code> helper.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'String';

    /**
     * @class {static} o2.String
     *
     * <p>A <code>String</code> helper <strong>class</strong>.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var floor  = attr(Math, 'floor');
    var random = attr(Math, 'random');
    var slice  = attr(Array.prototype, 'slice');

    var trim   = String.prototype.trim;

    /*
     * Common Constants
     */
    var kBlank          = ' ';
    var kDecimalPoint   = '.';
    var kEmpty          = '';
    var kFormatEnd      = '}';
    var kFormatStart    = '{';
    var kGlobal         = 'g';
    var kNumeric        = '([0-9]+)';
    var kRandomCharFeed = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';

    /*
     * Default length for generating a random <code>String</code>s.
     */
    var kDefaultRandomLength = 8;

   /*
    * Common Regular Expressions
    */
    var kPrintfRegExp     = /(%(\w+):s)|(%s)/g;
    var kTrimRegExp       = /^\s+|\s+$/g;
    var kWhitespaceRegExp = /\s+/g;

    /*
     * Printf Replacement Indexes
     */
    var kAllIndex                   = 0;
    var kParametrizedMatchIndex     = 2;
    var kReplaceParameterStartIndex = 1;

    /*
     * Guid
     */
    var kGuidRadix = 36;
    var kGuidShift = 30;

    /**
     * @function {static} o2.String.concat
     *
     * <p>Concatanes all its arguments into a single <code>String</code>.
     * This is faster than adding those <code>String</code>s with
     * <code>+</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var joined = o2.String.concat('lorem', ipsum);
     * </pre>
     *
     * @return the concataneted <code>String</code>.
     */
    exports.concat = def(me, 'concat', function() {
        return slice.call(arguments).join(kEmpty);
    });

    /*
     *
     */
    var concat = require(kModuleName, 'concat');

    /**
     * @function {static} o2.String.format
     *
     * <p>Works similar to <strong>C#</strong>'s
     * <code>String.Format</code>.</p>
     *
     * <p>Usage example:<p>
     *
     * <pre>
     * o2.String.format("Hello {0}. What's going on in {1}?", 'Ninja',
     * 'California');
     * //will return "Hello Ninja. What's going on in California"
     * </pre>
     *
     * @return the formated <code>String</code>.
     */
    exports.format = def(me, 'format', function() {
        var args = arguments;

        if (args.length === 0) {
            return null;
        }

        if (args.length === 1) {
            return args[0];
        }

        var pattern = new RegExp([kFormatStart, kNumeric,
            kFormatEnd].join(kEmpty), kGlobal);

        return args[0].replace(pattern, function(match, index) {
            var dummy = null;
            dummy     = match;

            return args[(+index) + 1];
        });
    });

    /**
     * @function {static} o2.String.generateGuid
     *
     * <p>Creates a globally unique identifier (i.e. <strong>GUID</strong>),
     * for that browsing session.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var guid = o2.String.generateGuid();
     * </pre>
     *
     * @return a <strong>GUID</strong>.
     */
    exports.generateGuid = def(me, 'generateGuid', function() {
        return (
            (new Date()).getTime() + Math.random() * (1 << kGuidShift)
        ).toString(kGuidRadix).replace(kDecimalPoint, kEmpty);
    });

    /**
     * @function {static} o2.String.generateRandom
     *
     * <p>Generates a random <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var rnd = o2.String.generateRandom();
     * </pre>
     *
     * @param {Integer} length - (optional - default: {@link
     * String.config.constants.DEFAULT_RANDOM_LENGTH})
     * length of the <code>String</code> to be generated.
     *
     * @return the generated <code>String</code>.
     */
    exports.generateRandom = def(me, 'generateRandom', function(length) {
        var buffer       = [];
        var chars        = kRandomCharFeed;
        var charsLength  = chars.length;
        var i            = 0;
        var len          = length || kDefaultRandomLength;
        var randomNumber = 0;

        for (i = 0; i < len; i++) {
            randomNumber = floor(random() * charsLength);

            buffer.push(chars.substring(randomNumber, randomNumber + 1));
        }

        return buffer.join(kEmpty);
    });

    /**
     * @function {static} o2.String.printf
     *
     * <p>Works similar to <strong>C</strong>'s <strong>printf</strong>
     * function.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var test1 = 'lorem %s %s sit amet';
     * var test2 = 'lorem %1:s %2:s sit %2:s amet %1:s';
     * var test3 = 'lorem %id:s ipsum';
     *
     * //This will return 'lorem ipsum dolor sit amet''
     * o2.String.printf(test1, 'ipsum', 'dolor');
     *
     * //This will return 'lorem ipsum dolor sit dolor amet ipsum'
     * o2.String.printf(test1, 'ipsum', 'dolor');
     *
     * //This will return 'lorem test ipsum'.
     * o2.String.printf(test3, {id : 'test'});
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.printf = def(me, 'printf', function(str) {
        var buffer    = [];
        var index     = kReplaceParameterStartIndex;
        var lastMatch = 0;
        var result    = kPrintfRegExp.exec(str);
        var rep       = null;
        var par       = null;

        while (result) {
            buffer.push(str.substring(lastMatch, result.index));

            rep = arguments[kReplaceParameterStartIndex];
            par = result[kParametrizedMatchIndex];

            if (!par) {
                buffer.push(arguments[index++]);
            } else if (rep && rep.hasOwnProperty(par)) {
                buffer.push(rep[par]);
            } else if (arguments.hasOwnProperty(par)) {
                buffer.push(arguments[par]);
            } else {
                buffer.push(result[kAllIndex]);
            }

            lastMatch = result.index + result[kAllIndex].length;

            result = kPrintfRegExp.exec(str);
        }

        buffer.push(str.substr(lastMatch));

        return buffer.join(kEmpty);
    });

    /**
     * @function {static} o2.String.remove
     *
     * <p>Simply removes the phrases that match the <code>RegExp</code> from
     * the <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var removed = o2.String.remove('lorem', /e/ig);
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     * @param {RegExp} regExp - the <code>RegExp</code> to process against.
     *
     * @return the processed <code>String</code>.
     */
    exports.remove = def(me, 'remove', function(str, regExp) {
        return concat(kEmpty, str).replace(regExp, kEmpty);
    });

    if (trim) {

        /**
         * @function {static} o2.String.trim
         *
         * <p>Trims white space from beginning and end of the
         * <code>String</code>.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var trimmed = o2.String.trim('    lorem     ');
         * </pre>
         *
         * @param {String} str - the <code>String</code> to process.
         * @param {Boolean} shouldCompact - Optional (default:
         * <code>false</code>)
         *     if <code>true</code>, multiple whitespace is compacted into single
         * whitespace.
         *
         * @return the processed <code>String</code>.
         */
        exports.trim = def(me, 'trim', function(str, shouldCompact) {
            var s           = concat(kEmpty, str);
            var willCompact = shouldCompact || false;

            return willCompact ?
                s.replace(kWhitespaceRegExp, kBlank).trim() :
                s.trim();
        });
    } else {
        exports.trim = def(me, 'trim', function(str, shouldCompact) {
            var s           = concat(kEmpty, str);
            var willCompact = shouldCompact || false;

            return willCompact ?
                s.replace(kWhitespaceRegExp, kBlank).replace(
                    kTrimRegExp, kEmpty) :
                s.replace(kTrimRegExp, kEmpty);
        });
    }

    var strim = require(kModuleName, 'trim');

    /**
     * @function {static} o2.String.compact
     *
     * <p>Works identical to <code>String.trim(str,
     * true)</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var compacted = o2.String.compact('   lorem      ipsum     ');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     *
     * @see String.trim
     */
    exports.compact = def(me, 'compact', function(str) {
        return strim(concat(kEmpty, str), true);
    });
}(this.o2));
/**
 * @module   string.encode
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>Responsible for encoding and decoding <code>String</code>s.</p>
 */
(function(framework, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'String';

    /*
     * String (encode)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var createElement  = attr(document, 'createElement');
    var createTextNode = attr(document, 'createTextNode');

    /*
     *
     */
    var xssEncodeNoAmpMap = [
        {regExp : /"/g,  replace : '&#34;'},
        {regExp : /</g,  replace : '&#60;'},
        {regExp : />/g,  replace : '&#62;'},
        {regExp : /\'/g, replace : '&#39;'}
    ];

    /*
     *
     */
    var xssEncodeMap = [
        {regExp : /"/g,  replace : '&#34;'},
        {regExp : /&/g,  replace : '&amp;'},
        {regExp : /</g,  replace : '&#60;'},
        {regExp : />/g,  replace : '&#62;'},
        {regExp : /\'/g, replace : '&#39;'}
    ];

    /*
     *
     */
    var encodeMap = [
        {regExp : / /g,  replace : '&nbsp;'},
        {regExp : /"/g,  replace : '&#34;' },
        {regExp : /&/g,  replace : '&amp;' },
        {regExp : /</g,  replace : '&#60;' },
        {regExp : />/g,  replace : '&#62;' },
        {regExp : /\'/g, replace : '&#39;' }
    ];

    /*
     *
     */
    var decodeMap = [
        {regExp : /&#32;|&nbsp;/g,         replace : ' '},
        {regExp : /&#34;|&quot;|&quott;/g, replace : '"'},
        {regExp : /&#39;|&apos;|&aposs;/g, replace : "'"},
        {regExp : /&#60;|&lt;/g,           replace : '<'},
        {regExp : /&#62;|&gt;/g,           replace : '>'},
        {regExp : /&#38;|&amp;/g,          replace : '&'}
    ];

    /*
     *
     */
    var safeHtmlMap = [
        {regExp : /"/g, replace : '&quot;'},
        {regExp : /'/g, replace : '&#39;' }
    ];

    /*
     * Common Text
     */
    var kEmpty     = '';
    var kContainer = 'div';

    /*
     *
     */
    var tempDiv = null;

    /*
     *
     */
    function processMap(str, map) {
        var i = 0;
        var len = 0;
        var mapItem = null;
        var result = str;

        for (i = 0, len = map.length; i < len; i++) {
            mapItem = map[i];
            result = result.replace(mapItem.regExp, mapItem.replace);
        }

        return result;
    }

    /**
     * @function {static} o2.String.decode
     *
     * <p>Decodes <strong>HTML</strong> entities back to normal characters.</p>
     * <p>If possible try using standard decoding methods like
     * <code>decodeURIComponent</code>, instead of using this method.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var decoded = o2.String.decode(encodedString);
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     */
    exports.decode = def(me, 'decode', function(str) {
        return processMap([kEmpty, str].join(kEmpty), decodeMap);
    });

    /**
     * @function {static} o2.String.encode
     *
     * <p>Encodes special charaters to their corresponding <strong>HTML</strong>
     * entities.</p>
     * <p>If possible try using standard encoding methods like
     * <code>encodeURIComponent</code>,
     * instead of using this method.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var encoded = o2.String.decode(inputString);
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     */
    exports.encode = def(me, 'encode', function(str) {
        return processMap([kEmpty, str].join(kEmpty), encodeMap);
    });

    /**
     * @function {static} o2.String.htmlEncode
     *
     * <p>An <strong>alias</strong> to {@link o2.String.encode}.</p>
     *
     * @see o2.String.encode
     */
    exports.htmlEncode = alias(me, 'htmlEncode', 'encode');

    /**
     * @function {static} o2.String.encodeSafeHtml
     *
     * <p>Works similar to {@link o2.String.encode}.</p>
     * <p>Encodes the <code>String</code> by converting it into a text node
     * and returning the node's value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var encoded = o2.String.encodeSafeHtml(inputString);
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     *
     * @see o2.String.encode
     */
    exports.encodeSafeHtml = def(me, 'encodeSafeHtml', function(str) {
        if (!tempDiv) {
            tempDiv = createElement(kContainer);
        }

        tempDiv.innerHTML = kEmpty;
        tempDiv.appendChild(createTextNode([kEmpty, str].join(kEmpty)));

        return processMap(tempDiv.innerHTML, safeHtmlMap);
    });

    /**
     * @function {static} o2.String.safeHtmlEncode
     *
     * <p>An <strong>alias</strong> to
     * {@link o2.String.encodeSafeHtml}.</p>
     *
     * @see o2.String.encodeSafeHtml
     */
    exports.safeHtmlEncode = alias(me, 'safeHtmlEncode', 'encodeSafeHtml');

    /**
     * @function {static} o2.String.escape
     *
     * <p>An <strong>alias</strong> to <code>encodeURIComponent</code>.</p>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     */
    exports.escape = def(me, 'escape', function(str) {
        return encodeURIComponent([kEmpty, str].join(kEmpty));
    });

    /**
     * @function {static} o2.String.unescape
     *
     * <p>An <strong>alias</strong> to <code>decodeURIComponent</code>.</p>
     *
     * @param {String} str - the <code>String</code> to process.
     *
     * @return the processed <code>String</code>.
     */
    exports.unescape = def(me, 'unescape', function(str) {
        return decodeURIComponent([kEmpty, str].join(kEmpty));
    });

    /**
     * @function {static} o2.String.xssEncode
     *
     * <p>Encodes special charaters to their corresponding <strong>HTML</strong>
     * entities. Works similar to {link String.encode}, with an
     * exception that it does not encode whitespace characters.</p>
     * <p>This method is specially designed to prevent cross-site script
     * injection attacks.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var encoded = o2.String.xssEncode(inputString);
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process
     * @param {Boolean} isAmpersandsPreserved - (Optional. Defaults to
     * <code>false</code>). If <code>true</code> & characters will not be
     * encoded, otherwise they will be.
     *
     * @return the processed <code>String</code>.
     */
    exports.xssEncode = def(me, 'xssEncode', function(str,
                isAmpersandsPreserved) {
        return processMap([kEmpty, str].join(kEmpty),
            !!isAmpersandsPreserved ? xssEncodeNoAmpMap : xssEncodeMap
        );
    });
}(this.o2, this.document));
/**
 * @module   string.strip
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>This package is responsible for simple <code>String</code> stripping
 * operations.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'String';

    /*
     * String (strip)
     */
    var me = create(kModuleName);

    /*
     * Common Regular Expressions
     */
    var kNonAlphaNumericRegExp = /[^A-Za-z0-9 ]+/g;
    var kNonAlphaRegExp        = /[^A-Za-z ]+/g;
    var kNonNumericRegExp      = /[^0-9-.]/g;
    var kNumericRegExp         = /[0-9]/g;
    var kTagRegExp             = /<[\/]?([a-zA-Z0-9]+)[^>\^<]*>/ig;

    /*
     * Common Strings
     */
    var kEmpty = '';

    /**
     * @function {static} o2.String.stripNonAlpha
     *
     * <p>Removes non alphabetical characters from the <code>String</code>
     * (excluding numbers).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var stripped = o2.String.stripNonAlpha('abc123.!');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.stripNonAlpha = def(me, 'stripNonAlpha', function(str) {
        return str.replace(kNonAlphaRegExp, kEmpty);
    });

    /**
     * @function {static} o2.String.stripNonAlphanumeric
     *
     * <p>Removes alpha-numeric characters from the <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var stripped = o2.String.stripNonAlphanumeric('abc123.!');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.stripNonAlphanumeric = def(me, 'stripNonAlphanumeric',
                function(str) {
        return str.replace(kNonAlphaNumericRegExp, kEmpty);
    });

    /**
     * @function {static} o2.String.stripTags
     *
     * <p>Removes tags from the <code>String</code>.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var stripped = o2.String.stripTags('<p>abc123.!</p>');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.stripTags = def(me, 'stripTags', function(str) {
        return str.replace(kTagRegExp, kEmpty);
    });

    /**
     * @function {static} o2.String.stripNonNumeric
     *
     * <p>Removes non-numeric characters from the <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var stripped = o2.String.stripNonNumeric('abc123.!');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     -
     * @return the formatted <code>String</code>.
     */
    exports.stripNonNumeric = def(me, 'stripNonNumeric', function(str) {
        return str.replace(kNonNumericRegExp, kEmpty);
    });

    /**
     * @function {static} o2.String.stripNumeric
     *
     * <p>Removes numeric characters from the <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var stripped = o2.String.stripNumeric('abc123.!');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.stripNumeric = def(me, 'stripNumeric', function(str) {
        return str.replace(kNumericRegExp, kEmpty);
    });
}(this.o2));
/**
 * @module   string.transform
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>This package is responsible for simple <code>String</code> transformation
 * operations.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'String';

    /*
     * String (transform)
     */
    var me = create(kModuleName);

    /*
     * Common Regular Expressions
     */
    var kAllCapsRegExp            = /([A-Z])/g;
    var kCamelCaseRegExp          = /(\-[a-z])/g;
    var kLineBreakToNewLineRegExp = /<br\s*\/?>/g;
    var kNewLineToLineBreakRegExp = /\r\n|\n|\r/g;
    //var kRemoveTagsRegExp         = /<[\/]?([a-zA-Z0-9]+)[^><]*>/ig;

    /*
     * Common Text
     */
    var kBr               = '<br />';
    var kDash             = '-';
    var kEllipsis         = '&hellip;';
    var kEmpty            = '';
    var kJsonNotSupported = 'JSON support cannot be found!';
    var kNewLine          = '\n';
    var kUnderscore       = '_';

    /*
     * <p>Maximum length, after which the string is truncated with an
     * ellipsis (...)</p>
     */
    var kTruncationLength = 100;

    /**
     * @function {static} o2.String.br2nl
     *
     * <p>Replaces HTML [br /] tags with new line.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var replaced = o2.String.br2nl('hello<br />world.');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.br2nl = def(me, 'br2nl', function(str) {
        return str.replace(kLineBreakToNewLineRegExp, kNewLine);
    });

    /**
     * @function {static} o2.String.nl2br
     *
     * <p>Replaces new lines [\n] with HTML [br /] tags.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var replaced = o2.String.nl2br('hello\nworld.');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to format.
     *
     * @return the formatted <code>String</code>.
     */
    exports.nl2br = def(me, 'nl2br', function(str) {
        return str.replace(kNewLineToLineBreakRegExp, kBr);
    });

    /**
     * @function {static} o2.String.toCamelCase
     *
     * <p>Converts the input to camel case.</p>
     * <p>i.e. if input is 'lorem-ipsum', the output is 'loremIpsum'.</p>
     * <p>This is especially useful for converting <code>CSS</code> classes
     * to their <strong>DOM</strong> style representations.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var camelized = o2.String.toCamelCase('font-family');
     * </pre>
     *
     * @param {String} input - the <code>String</code> to convert.
     *
     * @return the formatted String.
     */
    exports.toCamelCase = def(me, 'toCamelCase', function(input) {
        return input.replace(kCamelCaseRegExp, function(match) {
            return match.toUpperCase().replace(kDash, kEmpty);
        });
    });

    /**
     * @function {static} o2.String.toDashedFromCamelCase
     *
     * <p>Converts a <code>String</code> of the form 'loremIpsum' to
     * 'lorem-ipsum'.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var dashed = o2.String.toDashedFromCamelCase('fontFamily');
     * </pre>
     *
     * @param {String} input - the <code>String</code> to convert.
     *
     * @return the formatted <code>String</code>.
     */
    exports.toDashedFromCamelCase = def(me, 'toDashedFromCamelCase',
                function(input) {
        return input.replace(kAllCapsRegExp, function(match) {
            return [kDash, match.toLowerCase()].join(kEmpty);
        });
    });

    /**
     * @function {static} o2.String.toJson
     *
     * <p>Converts the given <code>String</code> to a <strong>JSON</strong>
     * object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var parsed = o2.String.toJson('{"name" : "value"}');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to convert.
     *
     * @return the converted <strong>JSON</strong> <code>Object</code>.
     *
     * @throws Exception - if <strong>str</strong> is not a well-formed
     * <strong>JSON</strong> <code>String</code>.
     */
    exports.toJson = def(me, 'toJson', function(str) {
        if (!JSON) {
            throw kJsonNotSupported;
        }

        return JSON.parse(str);
    });

    /**
     * @function {static} o2.String.toUnderscoreFromCamelCase
     *
     * <p>Converts a <code>String</code> of the form 'loremIpsum' to
     * 'lorem_ipsum'.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var replaced = o2.String.toUnderscoreFromCamelCase('fontFamily');
     * </pre>
     *
     * @param {String} input - the <code>String</code> to convert.
     *
     * @return the formatted <code>String</code>.
     */
    exports.toUnderscoreFromCamelCase = def(me, 'toUnderscoreFromCamelCase',
                function(input) {
        return input.replace(kAllCapsRegExp, function(match) {
            return [kUnderscore, match.toLowerCase()].join(kEmpty);
        });
    });

    /**
     * @function {static} o2.String.truncate
     *
     * <p>Adds an ellipsis (&hellip;), if the length of the <code>String</code>
     * is greater than <strong>maxLen</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var truncated = o2.String.truncate('This ... is a very long String.');
     * </pre>
     *
     * @param {String} str - the <code>String</code> to process.
     * @param {Integer} maxLen - Optional (defaults TRUNCATION_LENGTH},
     * maximum <code>String</code> length that's allowed without truncation.
     *
     * @return the processed <code>String</code>.
     */
    exports.truncate = def(me, 'truncate', function(str, maxLen) {
        var eLen      = kEllipsis.length;
        var maxLength = maxLen || kTruncationLength;

        if (str.length > maxLength) {
            return [str.substr(0, maxLength - eLen), kEllipsis].join(kEmpty);
        }

        return str;
    });
}(this.o2));
/**
 * @module   event.constants
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A cross-browser event management object.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Event';

    /**
     * @class {static} o2.Event
     *
     * <p>A cross-browser event handling and event utilities class.</p>
     */
    var me = create(kModuleName);

    /**
    * @struct {static} o2.Event.keyCode
    */
    exports.keyCode = def(me, 'keyCode', {

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.ENTER - enter key.
         */
        ENTER : 13,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.RETURN - enter key.
         */
        RETURN : 13,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.LEFT - left arrow key.
         */
        LEFT : 37,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.RIGHT - right arrow key.
         */
        RIGHT : 39,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.TOP - up arrow key.
         */
        TOP : 38,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.BOTTOM - down arrow key.
         */
        BOTTOM : 40,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.UP - up arrow key.
         */
        UP : 38,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.DOWN - down arrow key.
         */
        DOWN : 40,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.BACKSPACE - backspace key.
         */
        BACKSPACE : 8,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.TAB - TAB key.
         */
        TAB : 9,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.SHIFT - shift key.
         */
        SHIFT : 16,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.CTRL - CTRL key.
         */
        CTRL : 17,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.ALT - ALT key.
         */
        ALT : 18,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.CAPS_LOCK - caps lock key.
         */
        CAPS_LOCK : 20,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.ESCAPE - ESC key.
         */
        ESCAPE : 27,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.DELETE - DEL key.
         */
        DELETE : 46,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.SPACE - SPACE key.
         */
        SPACE : 32,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.PAGE_UP - PAGE UP key.
         */
        PAGE_UP : 33,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.PAGE_DOWN - PAGE DOWN key.
         */
        PAGE_DOWN : 34,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.END - END key.
         */
        END : 35,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.HOME - HOME key.
         */
        HOME : 36,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.NUMPAD_ENTER - NUMPAD ENTER key.
         */
        NUMPAD_ENTER : 108,

        /**
         * @property {static const Integer}
         * o2.Event.keyCode.COMMA - COMMA key.
         */
        COMMA : 188
    });
}(this.o2));
/**
 * @module   event.core
 * @requires core
 * @requires event.constants
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A cross-browser event management object.</p>
 */
(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Event';

    /*
     * Event (core)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $      = require('$');
    var myName = require('name');
    var nill   = require('nill');

    var kString = 'String';
    var concat  = require(kString, 'concat');
    var format  = require(kString, 'format');

    /*
     * Common Constants
     */
    var kCallbackNotDefined = format('{0}: Callback is not defined!', myName);
    var kOn                 = 'on';

    /*
     * Feature Tests
     */
    var isAddEventListener = !!document.addEventListener;
    var isAttachEvent      = !!document.attachEvent;
    var windowEventHandle  = window.event;

    if (isAddEventListener) {

        /**
         * @function {static} o2.Event.addEventListener
         *
         * <p>Adds a new event listener to the <strong>DOM</strong> Node.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      doClickHandling();
         * });
         * </pre>
         *
         * @param {DomNode} node - the <strong>DOM</strong> object (or its
         * <code>String</code> id) the evet shall be attached.
         * @param {String} evt - the name of the event (like "click",
         * "mousemove"...)
         * @param {Function} fn - a reference to the on[event] callback action.
         *
         * @throws exception - if <strong>fn</strong> callback is not defined.
         */
        exports.addEventListener = def(me, 'addEventListener', function(node,
                    evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            // `false` disables event capturing.
            //
            // Event capturing is not very useful, since its
            // implementation vastly deviates among vendors.
            //
            // See:
            // http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow
            obj.addEventListener(evt, fn, false);
        });

        /**
         * @function {static} o2.Event.removeEventListener
         *
         * <p>Removes an already-added new event listener from the DOM Node.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.removeEventListener('container', 'click', container_click);
         * </pre>
         *
         * @param {DomNode} node - the DOM object (or its <code>String</code>
         * reference) the evet shall be removed.
         * @param {String} evt - the name of the event (like "click",
         * "mousemove"...)
         * @param {Function} fn - a reference to the on[event] callback action.
         *
         * @throws Exception - if <strong>fn</strong> callback is not defined.
         */
        exports.removeEventListener = def(me, 'removeEventListener', function(
                    node, evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            obj.removeEventListener(evt, fn, false);
        });
    } else if (isAttachEvent) {
        exports.addEventListener = def(me, 'addEventListener', function(node,
                    evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            obj.attachEvent(concat(kOn, evt), fn);
        });

        exports.removeEventListener = def(me, 'removeEventListener', function(
                    node, evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            obj.detachEvent(concat(kOn, evt), fn);
        });
    } else {
        exports.addEventListener = def(me, 'addEventListener', function(node,
                    evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            obj[concat(kOn, evt)] = fn;
        });

        exports.removeEventListener = def(me, 'removeEventListener', function(
                    node, evt, fn) {
            var obj = $(node);

            if (!obj) {
                return;
            }

            if (!fn) {
                throw kCallbackNotDefined;
            }

            obj[concat(kOn, evt)] = nill;
        });
    }

    //TODO: add documentation, add to meta defs:
    exports.on = alias(me, 'on', 'addEventListener');

    //TODO: add documentation, add to meta defs:
    exports.off = alias(me, 'off', 'removeEventListener');

    /*
     *
     */
    var addEventListener = require(kModuleName, 'addEventListener');

    /**
     * @function {static} o2.Event.addEventListeners
     *
     * <p>Adds a set of event handlers the the <strong>eventName</strong> of
     * the given <strong>collection</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListeners(['elm1', 'elm2'], 'click', function(evt) {
     *      handleClickEvent();
     * });
     * </pre>
     *
     * @param {Object} collection - an <code>Object</code> or an
     * <code>Array</code> of <strong>DOM</strong> nodes, or their
     * <strong>id</strong>s.
     * @param {String} eventName - the name of the <strong>event</strong> to
     * attach to.
     * @param {Function} handler - the common event handling
     * <strong>callback</strong>.
     *
     * @throws Exception - if the <strong>handler</strong> callback is not
     * defined.
     */
    exports.addEventListeners = def(me, 'addEventListeners', function(collection,
                eventName, handler) {
        if (!collection) {
            return;
        }

        var listen = addEventListener;
        var key = null;

        for (key in collection) {
            if (collection.hasOwnProperty(key)) {
                listen(collection[key], eventName, handler);
            }
        }
    });

    if (windowEventHandle) {

        /**
         * @function {static} o2.Event.getEventObject
         *
         * <p>Gets the actual event object.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      var e = o2.Event.getEventObject(evt);
         * });
         * </pre>
         *
         * @param {Event} evt - the actual <code>DOM Event</code> object used
         * internally in {@link Event.addEventListener}
         *
         * @return the actual <code>DOM Event</code> object.
         */
        exports.getEventObject = def(me, 'getEventObject', function() {
           return windowEventHandle;
        });

        /**
         * @function {static} o2.Event.getTarget
         *
         * <p>Gets the originating source of the event.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      var src = o2.Event.getTarget(evt);
         * });
         * </pre>
         *
         * @param {Event} evt - the actual <code>DOM Event</code> object used
         * internally in {@link o2.Event.addEventListener}
         *
         * @return the actual <strong>DOM</strong> target of the event object.
         */
        exports.getTarget = def(me, 'getTarget', function() {
            return windowEventHandle.srcElement;
        });
    } else {
        exports.getEventObject = def(me, 'getEventObject', function(evt) {
           return evt;
        });

        exports.getTarget = def(me, 'getTarget', function(evt) {
            return evt ? evt.target : null;
        });
    }

    /*
     *
     */
    var getEventObject = require(kModuleName, 'getEventObject');

    /**
     * @function {static} o2.Event.getKeyCode
     *
     * <p>Gets the key code of the key-related event (keydown, keyup, keypress
     * etc.).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keydown', function(evt) {
     *      var code = o2.Event.getKeyCode(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <strong>unicode</strong> key code associated
     * with the event as an <code>Integer</code>, if found; <code>0</code>
     * otherwise.
     */
    exports.getKeyCode = def(me, 'getKeyCode', function(evt) {
        var e = getEventObject(evt);

        if (!e) {
            return 0;
        }

        // For a cross-event (i.e. keydown, keyup, keypress)
        // result we normalize the code.
        // ref: http://www.quirksmode.org/js/keys.html

        // for @ input
        // onkeypress : {which: 50, keyCode: 50, charCode: 0 , value  '2' }
        // onkeydown  : {which: 64, keyCode: 0 , charCode: 64, value: '@' }

        return e.charCode || e.keyCode || 0;
    });

    /*
     *
     */
    var getMouseCoordinates = function(evt) {
        var e = getEventObject(evt);

        if (!e) {
            return {x : 0, y : 0};
        }

        var posx = 0;
        var posy = 0;

        if (e.pageX) {
            getMouseCoordinates = function(e) {
                if (!e) {
                    return {x : 0, y : 0};
                }

                posx = e.pageX || 0;
                posy = e.pageY || 0;

                return {x : posx, y : posy};
            };

            return getMouseCoordinates(evt);
        }

        if(e.clientX) {
            getMouseCoordinates = function(e) {
                if (!e) {
                    return {x : 0, y : 0};
                }

                var clientX = e.clientX || 0;
                var clientY = e.clientY || 0;
                var wd = document;

                posx = clientX + wd.body.scrollLeft +
                    wd.documentElement.scrollLeft;
                posy = clientY + wd.body.scrollTop +
                    wd.documentElement.scrollTop;

                return {x : posx, y : posy};
            };

            return getMouseCoordinates(evt);
        }

        // The current event object has neither pageX, nor clientX defined.
        return {x : 0, y : 0};
    };

    /**
     * @function {static} o2.Event.getMouseCoordinates
     *
     * <p>Gets the current mouse coordinates.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'mousemove', function(evt) {
     *      var dimensions = o2.Event.getMouseCoordinates(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the coordinates in the form of
     * <code>{x: mouseX, y: mouseY}</code>
     * where <code>x</code> is the distance from the top of the screen, and
     * <code>y</code> is the distance from the left of the screen.
     */
    exports.getMouseCoordinates = def(me, 'getMouseCoordinates', function(evt) {
        return getMouseCoordinates(evt);
    });

    if (windowEventHandle) {

        /**
         * @function {static} o2.Event.preventDefault
         *
         * <p>Prevents the default action. When this method is called inside an
         * even handling callback, the default action associated with that
         * event is not triggered. Like, if it is an <code>onclick</code>
         * event on a link, then the browser does not go to the
         * <code>href</code> of that link.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      o2.Event.preventDefault(evt);
         * });
         * </pre>
         *
         * @param {Event} evt - the actual <code>DOM Event</code> object used
         * internally in {@link Event.addEventListener}
         */
        exports.preventDefault = def(me, 'preventDefault', function() {
            windowEventHandle.returnValue = false;

            return false;
        });
    } else {
        exports.preventDefault = def(me, 'preventDefault', function(evt) {
            if (!evt) {
                return false;
            }

            if (evt.preventDefault) {
                evt.preventDefault();
            }

            return false;
        });
    }

    if (windowEventHandle) {

        /**
         * @function {static} o2.Event.stopPropagation
         *
         * <p>Stops the propagation of the event upwards in the DOM
         * hierarchy.</p>
         *
         * <p>Note that "change" event does not bubble.</p>
         *
         * <p>Also, events: change, submit, reset, focus, blur do not bubble
         * in Internet Explorer.</p>
         *
         * <p>According to specification, "focus" and "blur" should not bubble,
         * while "change", "submit", "reset" should.</p>
         *
         * <p>This behavior implemented properly in all web browsers but IE.</p>
         *
         * <p>See {@link
         * http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow}
         * for details.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      o2.Event.stopPropagation(evt);
         * });
         * </pre>
         *
         * @param {Event} evt - the actual <code>DOM Event</code> object used
         * internally in {@link Event.addEventListener}
         */
        exports.stopPropagation = def(me, 'stopPropagation', function() {
            windowEventHandle.cancelBubble = true;
        });
    } else {
        exports.stopPropagation = def(me, 'stopPropagation', function(evt) {
            if (!evt) {
                return;
            }

            evt.stopPropagation();
        });
    }
}(this.o2, this, this.document));
/**
 * @module   event.extend
 * @requires core
 * @requires event.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Extension methods for the {@link Event} object.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Event';

    /*
     * Event (extend)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var kEvent         = kModuleName;
    var getKeyCode     = require(kEvent, 'getKeyCode');
    var getEventObject = require(kEvent, 'getEventObject');

    var keyCode    = require(kModuleName, 'keyCode');
    var kBackspace = attr(keyCode, 'BACKSPACE');
    var kBottom    = attr(keyCode, 'BOTTOM');
    var kEnter     = attr(keyCode, 'ENTER');
    var kEscape    = attr(keyCode, 'ESCAPE');
    var kLeft      = attr(keyCode, 'LEFT');
    var kTab       = attr(keyCode, 'TAB');

    var kNumber = 'number';

    // According to W3C
    //     Left Button: 0
    //     Middle Button: 1
    //     Right Button: 2 (!)
    //
    // According to M$
    //     Left Button: 1
    //     Middle Button: 4
    //     Right Button: 2 (!)
    //     Left and Right: 3
    //     Left and Middle: 5
    //     Right and Middle: 6
    //     All three: 7
    //
    // ref: http://msdn.microsoft.com/en-us/library/ms533544(v=vs.85).aspx
    var kRightButton = 2;

    /**
     * @function {static} o2.Event.isArrowKey
     *
     * <p>Checks whether the pressed key is an arrow key.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keydown', function(evt) {
     *      var isArrowKey = o2.Event.isArrowKey(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <code>true</code> if the pressed key is an arrow key,
     * <code>false</code> otherwise.
     */
    exports.isArrowKey = def(me, 'isArrowKey', function(evt) {
        var code = getKeyCode(evt);

        return code >= kLeft && code <= kBottom;
    });

    /**
     * @function {static} o2.Event.isBackspaceKey
     *
     * <p>Checks whether the pressed key is the backspace (DEL) key.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keydown', function(evt) {
     *      var isBackspaceKey = o2.Event.isBackspaceKey(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <code>true</code> if the pressed key is the backspace key,
     * <code>false</code> otherwise.
     */
    exports.isBackspaceKey = def(me, 'isBackspaceKey', function(evt) {
        return getKeyCode(evt) === kBackspace;
    });

    if (window.event) {

        /**
         * @function {static} o2.Event.isCharacterKeypressEvent
         *
         * <p>Checks whether the character in a <code>onkeypress</code> event
         * actually produces a printable char.</p>
         *
         * <p>The thing you have to remember is that you can't reliably tell
         * <strong>anything at all</strong> about any character that may be
         * typed in a <code>onkeydown</code> or <code>onkeyup</code> event:
         * The printable key is determined only in the <code>onkeypress</code>
         * handler.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'keypress', function(evt) {
         *      var isCharKeypress = o2.Event.isCharacterKeypressEvent(evt);
         * });
         * </pre>
         *
         * @return <code>true</code> if the pressed key is a printable
         * character; <code>false</code> otherwise.
         */
        exports.isCharacterKeypressEvent = def(me, 'isCharacterKeypressEvent',
                    function(evt) {
            var e = getEventObject(evt);

            if (!e) {
                return false;
            }

            // M$IE only fires keypress events for printable keys:
            return true;
        });
    } else {
        exports.isCharacterKeypressEvent = def(me, 'isCharacterKeypressEvent',
                    function(evt) {
            var e = getEventObject(evt);

            if (!e) {
                return false;
            }

            // In other browsers evt.which is > 0 if and only if
            // the key pressed is a printable key.
            var which = e.which;

            if (typeof which !== kNumber || which <= 0) {
                return false;
            }

            //TODO: test for ctrl+backspace shift+backspace alt+backspace etc.

            // The only exception for this is the backspace key.
            return which !== kBackspace;
        });
    }

    /**
     * @function {static} o2.Event.isEnterKey
     *
     * <p>Checks whether the pressed key is the enter (return) key.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keypress', function(evt) {
     *      var isEnterKey = o2.Event.isEnterKey(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <code>true</code> if the pressed key is the enter key,
     * <code>false</code> otherwise.
     */
    exports.isEnterKey = def(me, 'isEnterKey', function(evt) {
        return getKeyCode(evt) === kEnter;
    });

    /**
     * @function {static} o2.Event.isEscapeKey
     *
     * <p>Checks whether the pressed key is the escape (ESC) key.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keypress', function(evt) {
     *      var isEscapeKey = o2.Event.isEscapeKey(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <code>true</code> if the pressed key is the escape key,
     * <code>false</code> otherwise.
     */
    exports.isEscapeKey = def(me, 'isEscapeKey', function(evt) {
        return getKeyCode(evt) === kEscape;
    });

    if (window.event) {

        /**
         * @function {static} o2.Event.isRightClick
         *
         * <p>Checks whether or not the curent action is a right click action.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Event.addEventListener('container', 'click', function(evt) {
         *      var isRightClick = o2.Event.isRightClick(evt);
         * });
         * </pre>
         *
         * @param {Event} evt - the actual <code>DOM Event</code> object used
         * internally in {@link o2.Event.addEventListener}.
         *
         * @return <code>true</code> if the event is a right click event,
         * <code>false</code> otherwise.
         */
        exports.isRightClick = def(me, 'isRightClick', function(evt) {
            var e = getEventObject(evt);

            if (!e) {
                return false;
            }

            return e.which === kRightButton;
        });
    } else {
        exports.isRightClick = def(me, 'isRightClick', function(evt) {
            var e = getEventObject(evt);

            if (!e) {
                return false;
            }

            return e.button === kRightButton;
        });
    }

    /**
     * @function {static} o2.Event.isTabKey
     *
     * <p>Checks whether the pressed key is the tab key.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Event.addEventListener('container', 'keypress', function(evt) {
     *      var isTabKey = o2.Event.isTabKey(evt);
     * });
     * </pre>
     *
     * @param {Event} evt - the actual <code>DOM Event</code> object used
     * internally in {@link o2.Event.addEventListener}
     *
     * @return the <code>true</code> if the pressed key is the tab key,
     * <code>false</code> otherwise.
     */
    exports.isTabKey = def(me, 'isTabKey', function(evt) {
        return getKeyCode(evt) === kTab;
    });
}(this.o2, this));
/**
 * @module   ajax.core
 * @requires core
 * @requires string.core
 * @requires event.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A cross-browser <strong>AJAX</strong> Wrapper.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Ajax';

    /**
     * @class {static} o2.Ajax
     *
     * <p>A <strong>static</strong> class for making <strong>AJAX</strong>
     * <strong>GET</strong> and <strong>POST</strong> requests.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var nill = require('nill');

    var kString       = 'String';
    var concat        = require(kString, 'concat');
    var generateGuid  = require(kString, 'generateGuid');

    var listen = require('Event', 'addEventListener');

    var ActiveXObject  = window.ActiveXObject;
    var XMLHttpRequest = window.XMLHttpRequest;

    /*
     * Headers
     */
    var commonHeaders = [{
        'Accept' :
        'text/javascript, text/html, application/xml, text/xml, */*'
    }];
    var postHeaders = [{
        'Content-Type' : 'application/x-www-form-urlencoded'
    }];

    /*
     * Microsoft-Specific ProgIds
     */
    var progIds = [
        'Msxml2.XMLHTTP',
        'Microsoft.XMLHTTP',
        'Msxml2.XMLHTTP.7.0',
        'Msxml2.XMLHTTP.6.0',
        'Msxml2.XMLHTTP.5.0',
        'Msxml2.XMLHTTP.3.0'
    ];

    /*
     * Event
     */
    var kUnload = 'unload';

    /*
     * Error Message
     */
    var kNoXhr = 'Failed to create an XHR instance';

    /*
     * Status
     */
    var kCached   = 304;
    var kComplete = 4;
    var kOk       = 200;

    /*
     * Verb
     */
    var kGet  = 'GET';
    var kPost = 'POST';

    /*
     * Text, Prefix, Suffix
     */
    var kAnd    = '&';
    var kEmpty  = '';
    var kEquals = '=';
    var kKey    = 'r';
    var kPlus   = '+';
    var kRandom = '?rnd=';

    /*
     * Common Regular Expressions
     */
    var kUrlSpaceRegExp = /%20/g;

    /*
     * Active requests are cached here.
     */
    var requestCache = {};

    /*
     * To uniquely mark xhr requests.
     */
    var counter = 0;

    /*
     * The total number of opened, but not completed (i.e. active) requests.
     */
    var activeRequestCount = 0;

    /*
     * <p>Creates a brand new <code>XMLHttpRequest</code> object.</p>
     */
    var createXhr = function() {
        var progId  = null;
        var request = null;

        if (window.XMLHttpRequest) {
            createXhr = function() {
                var request = new XMLHttpRequest();

                if (!request) {
                    throw kNoXhr;
                }

                // Request is not completed yet.
                request.isComplete = false;

                return request;
            };

            return createXhr();
        }

        while (progIds.length > 0) {
            progId = progIds.shift();

            try {
                request = new ActiveXObject(progId);

                break;
            } catch(ignore) {
            }
        }

        if (!request) {
            throw kNoXhr;
        }

        createXhr = function() {
            var request = new ActiveXObject(progId);

            // Request is not completed yet.
            request.isComplete = false;

            return request;
        };

        return createXhr();
    };

    /*
     * <p>Good boys clean their mess ;)</p>
     *
     * @param {XMLHttpRequest} xhr - the original XMLHttpRequest object.
     */
    function finalizeXhr(xhr) {
        if (!xhr) {
            return;
        }

        // To avoid memory leaks.
        xhr.onreadystatechange = nill;

        // Request is finalized
        xhr.isFinalized = true;

        delete requestCache[xhr.index];

        activeRequestCount--;

        // " <= 0 "  is just for devensive coding.
        // " === 0 " would suffice as well.
        if (activeRequestCount <= 0) {
            counter = 0;
            activeRequestCount = 0;
        }
    }

    /*
     * <p>Processes callbacks and finalizes the <code>Xhr</code>.</p>
     *
     * @param {XMLHttpRequest} xhr - the current <code>Xhr</code> instance.
     * @param {Object} callbacks - oncomplete, onerror and onexception callbacks.
     */
    function processCallbacks(xhr, callbacks) {
        var isSuccess    = false;
        var onaborted    = callbacks.onaborted   || nill;
        var oncomplete   = callbacks.oncomplete  || nill;
        var onerror      = callbacks.onerror     || nill;
        var onexception  = callbacks.onexception || nill;
        var responseText = kEmpty;
        var responseXml  = null;
        var status       = 0;
        var statusText   = kEmpty;

        if (xhr.isAborted) {
            onaborted(xhr);

            return;
        }

        // IE9 throws an error when accessing these properties
        // while the request is in an "aborted" state.
        try {
            status = xhr.status;
            responseText = xhr.responseText;
            responseXml  = xhr.responseXML;
            statusText   = xhr.statusText;
        } catch (ignore) {
        }

        isSuccess = status === kOk || status === kCached;

        callbacks = callbacks || {};

        // Since the response has come, mark the request as "completed".
        xhr.isComplete = true;

        try {
            if (isSuccess) {
                oncomplete(responseText, responseXml, xhr, status);

                return;
            }

            onerror(status, statusText, xhr);
        } catch(ex) {
            onexception(ex, xhr);
        } finally {
            finalizeXhr(xhr);
        }
    }

    /*
     * <p>Registers the callbacks to the <code>XMLHttpRequest</code>
     * instance.</p>
     *
     * @param {XMLHttpRequest} xhr - the original XMLHttpRequest object.
     * @param {Object} callbacks - An object of the form
     * {oncomplete: fn(responseText, responseXml, xhr, status),
     * onerror: fn(status, statusText, xhr),
     * onexception: fn(originalXhr, exception)}. Any of these callbacks are
     * optional.
     */
    function registerCallbacks(xhr, callbacks) {
        if (!xhr) {
            return;
        }

        if (xhr.isInitialized) {
            return;
        }

        xhr.onreadystatechange = function() {
            if (xhr.readyState === kComplete) {
                processCallbacks(xhr, callbacks);
            }
        };

        xhr.isInitialized = true;
    }

    /*
     * <p>Adds headers.</p>
     *
     * @param {XMLHttpRequest} xhr - the original XMLHttpRequest object.
     * @param {Object} headers - a config.constants.headers.* collection.
     */
    function addHeaders(xhr, headers) {
        var header = null;
        var i      = 0;
        var key    = 0;
        var len    = 0;

        for (i = 0, len = headers.length; i < len; i++) {
            header = headers[i];

            for (key in header) {
                if (header.hasOwnProperty(key)) {
                    xhr.setRequestHeader(key, header[key]);
                }
            }
        }
    }

    /*
     * <p>Adds common request headers.</p>
     *
     * @param {XMLHttpRequest} xhr - the original XMLHttpRequest object.
     */
    function addCommonRequestHeaders(xhr) {
        addHeaders(xhr, commonHeaders);
    }

    /*
     * <p>Adds request headers specific to <code>POST</code> requests.</p>
     *
     * @param {XMLHttpRequest} xhr - the original <code>XMLHttpRequest</code>
     * object.
     */
    function addPostRequestHeaders(xhr) {
        addHeaders(xhr, postHeaders);
    }

    /*
     * <p>Parses the params JSON and returns a <code>String</code> of
     * the form "&name1=value1&name2=value2"</p>
     */
    function generateParametrizeQueryString(params) {
        var buffer = [];
        var key = null;

        for (key in params) {
            if (params.hasOwnProperty(key)) {
                buffer.push([encodeURIComponent(key), kEquals,
                    encodeURIComponent(params[key])].join(''));
            }
        }

        return buffer.join(kAnd).replace(kUrlSpaceRegExp, kPlus);
    }

    /*
     * <p>Sends the request.</p>
     *
     * @see {@link Ajax.get} and {@link Ajax.post} for details.
     * @return the original <code>XMLHttpRequest</code>
     */
    function send(url, verb, parameters, callbacks, isSync) {
        if (!url) {
            return null;
        }

        var ajaxCallbacks      = callbacks  || {};
        var ajaxParameters     = parameters || {};

        var parametrizedQuery  = generateParametrizeQueryString(ajaxParameters);

        var isPost   = verb !== kGet;
        var getQuery = isPost ? kEmpty : concat(kAnd, parametrizedQuery);

        var index      = counter++;
        var isAsync    = !!!isSync;
        var postQuery  = isPost ? parametrizedQuery : kEmpty;
        var xhr        = createXhr();

        // Add request to cache.
        requestCache[kKey+index] = xhr;
        xhr.index = (kKey+index);

        activeRequestCount++;

        xhr.open(verb, concat(url, kRandom, generateGuid(), getQuery), isAsync);

        addCommonRequestHeaders(xhr);

        if (isPost) {
            addPostRequestHeaders(xhr);
        }

        registerCallbacks(xhr, ajaxCallbacks);

        try {
            xhr.send(postQuery);
        } catch(exception) {
            ajaxCallbacks.onerror(xhr.status, xhr.statusText, xhr);
        }

        return xhr;
    }

    /**
     * @function {static} o2.Ajax.abort
     * <p>Explicitly abort the request.</p>
     * <p>When the request is explicitly abourted, <strong>onaborted</strong>
     * callback is fired.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var request = o2.Ajax.get(url, params, callbacks);
     *
     * ...
     *
     * if (someCondition) {
     *      o2.Ajax.abort(request);
     * }
     * </pre>
     *
     * @param {XMLHttpRequest} xhr - the original
     * <strong>XMLHttpRequest</strong> being sent.
     */
    exports.abort = def(me, 'abort', function(xhr) {
        if (!xhr || xhr.isAborted) {
            return;
        }

        try {
            xhr.isAborted = true;
            xhr.abort();
        } catch (ignore) {
        }
    });

    /**
     * @function {static} o2.Ajax.createXhr
     *
     * <p>Creates a native <code>XMLHttpRequest</code> object.
     * <p>This is a <strong>low-level</strong> function; it simply returns
     * the browser's native object.
     * You may most probably want to use {@link Ajax.get} or {@link
     * Ajax.post} instead, for more functionality.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * // Creates a low-level cross-browser XmlHttpRequest object.
     * var request = o2.Ajax.createXhr();
     * </pre>
     * @return the created <code>XMLHttpRequest</code> object.
     */
    exports.createXhr = def(me, 'createXhr', function() {
        return createXhr();
    });

    /**
     * @function {static} o2.Ajax.get
     *
     * <p>Sends and <strong>AJAX GET</strong> request.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var request = o2.Ajax.get('/api.php', {
     *      name   : 'Volkan Özçelik',
     *      action : 'add'
     * }, {
     *      oncomplete  : function(text, xml, xhr, status) {},
     *      onerror     : function(statusCode, statusText, xhr) {},
     *      onaborted   : function(xhr) {},
     *      onexception : function(exception, xhr) {}
     * });
     * </pre>
     *
     * @param {String} url - the URL to send the request.
     * @param {Object} parameters - parameters collection as a name/value
     * pair object ({}).
     * @param {Object} callbacks - An object of the form
     * {oncomplete: fn(responseText, responseXml, xhr, status),
     * onerror: fn(status, statusText, xhr), onaborted: fn(xhr),
     * onexception: fn(exception, originalXhr)}.
     * Any of these callbacks are optional.
     * @param {Boolean} isSync - (optional defaults to <code>false</code>).
     * Set this <code>true</code> for sending a snychronous request.
     *
     * @return the original <code>XMLHttpRequest</code> object.
     */
    exports.get = def(me, 'get', function(url, parameters, callbacks, isSync) {
        return send(url, kGet, parameters, callbacks, isSync);
    });

    /**
     * @function {static} o2.Ajax.post
     *
     * <p>Sends an <strong>AJAX POST</strong> request.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var request = o2.Ajax.post('/api.php', {
     *      name   : 'Volkan Özçelik',
     *      action : 'add'
     * }, {
     *      oncomplete  : function(text, xml, xhr, status) {},
     *      onerror     : function(statusCode, statusText, xhr) {},
     *      onaborted   : function(xhr) {},
     *      onexception : function(exception, xhr) {}
     * });
     * </pre>
     *
     * @param {String} url - the <strong>URL</strong> to send the request.
     * @param {Object} parameters - parameters collection as a
     * <strong>name/value</strong> pair object ({}).
     * @param {Object} callbacks - An object of the form
     * {oncomplete: fn(responseText, responseXml, xhr, status),
     * onerror: fn(status, statusText, xhr), onaborted : fn(xhr),
     * onexception: fn(exception, originalXhr)}.
     * Any of these callbacks are optional.
     * @param {Boolean} isSync - (optional defaults to <code>false</code>).
     * Set this <code>true</code> for sending a <strong>snychronous</strong>
     * request.
     *
     * @return the original <code>XMLHttpRequest</code> object.
     */
    exports.post = def(me, 'post', function(url, parameters, callbacks, isSync) {
        return send(url, kPost, parameters, callbacks, isSync);
    });

    // There is a bug in IE (seen in 7, heard about in others) where AJAX
    // requests that are open when the window is closed still reserve
    // connections. This means that if you open and close two windows using
    // long-polling, the next time you open a page on that domain it will
    // hang forever. The below event listener fixes that.
    listen(window, kUnload, function() {
        var key     = null;
        var request = null;

        try {
            for(key in requestCache) {
                if(requestCache.hasOwnProperty(key)) {
                    request = requestCache[key];
                    request.abort();
                    delete requestCache[key];
                }
            }
        } catch(ignore) {
        }
    });
}(this.o2, this));
/**
 * @module   ajax.extend
 * @requires ajax.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>An AJAX controller that implements the <strong>Observer
 * Pattern</strong>.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Ajax';

    /*
     * Ajax (extend)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var get  = require(kModuleName, 'get');
    var post = require(kModuleName, 'post');

    /*
     * Caches
     */
    var getCache  = {};
    var postCache = {};

    /*
     * Common Constants
     */
    var kDelimeter = ',';

    /*
     *
     */
    function prepareToken(url, parameters) {
        var ar = [];
        var key = null;

        ar.push(url);

        for (key in parameters) {
            if (parameters.hasOwnProperty(key)) {
                ar.push(key);
                ar.push(parameters[key]);
            }
        }

        return ar.join(kDelimeter);
    }

   /**
    * @function {static} o2.Ajax.getSingle
    *
    * <p>Sends a single <strong>AJAX</strong> <strong>GET</strong> request,
    * and discards further requests until a response comes from the first
    * request.</p>
    *
    * <p>Two requests that have identical <strong>URL</strong>s and parameter
    * name-value pairs, are considered uniqe. This method, ensures that no two
    * unique <strong>GET</strong> requests will be fired without waiting for the
    * other.</p>
    *
    * <p><strong>Usage example:</strong></p>
    *
    * <pre>
    * var request = o2.Ajax.getSingle('/api.php', {
    *      name   : 'Volkan Özçelik',
    *      action : 'add'
    * }, {
    *      oncomplete  : function(text, xml, xhr, status) {},
    *      onerror     : function(statusCode, statusText, xhr) {},
    *      onaborted   : function(xhr) {},
    *      onexception : function(exception, xhr) {}
    * });
    * </pre>
    *
    * @param {String} url - the URL to send the request.
    * @param {Object} parameters - parameters collection as a name/value
    * pair object ({}).
    * @param {Object} callbacks - An object of the form
    * {oncomplete: fn(responseText, responseXml, xhr, status),
    * onerror: fn(status, statusText, xhr), onaborted: fn(xhr),
    * onexception: fn(exception, originalXhr)}.
    * Any of these callbacks are optional.
    *
    * @return the active <code>XMLHttpRequest</code> object.
    *
    * @see o2.Ajax.get
    */
    exports.getSingle = def(me, 'getSingle', function(url, parameters,
                callbacks) {
        var token = prepareToken(url, parameters);

        var request = getCache[token];

        if (request && !request.isComplete) {
            return getCache[token];
        }

        delete getCache[token];

        getCache[token] = get(url, parameters, callbacks);

        return getCache[token];
    });

   /**
    * @function {static} o2.Ajax.postSingle
    *
    * <p>Sends a single <strong>AJAX</strong> <strong>POST</strong> request,
    * and discards further requests until a response comes from the first
    * request.</p>
    *
    * <p>Two requests that have identical <strong>URL</strong>s and parameter
    * name-value pairs, are considered uniqe. This method, ensures that no two
    * unique <strong>POST</strong> requests will be fired without waiting for
    * the other.</p>
    *
    * <p><strong>Usage example:</strong></p>
    *
    * <pre>
    * var request = o2.Ajax.postSingle('/api.php', {
    *      name   : 'Volkan Özçelik',
    *      action : 'add'
    * }, {
    *      oncomplete  : function(text, xml, xhr, status) {},
    *      onerror     : function(statusCode, statusText, xhr) {},
    *      onaborted   : function(xhr) {},
    *      onexception : function(exception, xhr) {}
    * });
    * </pre>
    *
    * @param {String} url - the URL to send the request.
    * @param {Object} parameters - parameters collection as a name/value
    * pair object ({}).
    * @param {Object} callbacks - An object of the form
    * {oncomplete: fn(responseText, responseXml, xhr, status),
    * onerror: fn(status, statusText, xhr), onaborted: fn(xhr),
    * onexception: fn(exception, originalXhr)}.
    * Any of these callbacks are optional.
    *
    * @return the active <code>XMLHttpRequest</code> object.
    *
    * @see o2.Ajax.post
    */
    exports.postSingle = def(me, 'postSingle', function(url, parameters,
                callbacks) {
        var token = prepareToken(url, parameters);

        var request = postCache[token];

        if (request && !request.isComplete) {
            return;
        }

        delete postCache[token];

        postCache[token] = post(url, parameters, callbacks);
    });
}(this.o2));
/**
 * @module   ajaxstate
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A Model for controlling AJAX timeouts etc.</p>
 * <p>An {@link AjaxController} should be registered to this model.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'AjaxState';

    /**
     * @class {static} o2.AjaxState
     * @implements Observable
     *
     * <p>A <code>Model</code> for the available <code>AjaxController</code>
     * objects.</p>
     * <p>Implements the <code>Observable</code> interface.</p>
     *
     * <p>See
     * http://download.oracle.com/javase/1.4.2/docs/api/java/util/Observable.html</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var setTimeout   = attr(window, 'setTimeout');
    var clearTimeout = attr(window, 'clearTimeout');

    /*
     * Common Constants
     */
    var kNoTimeoutMetaData = 'Please specify timeout meta data for the observer';

    /*
     *
     */
    function timeoutObservers(self, observers) {
        var i        = 0;
        var len      = 0;
        var observer = null;

        for (i = 0, len = observers.length; i < len; i++) {
            observer = observers[i].object;

            observer.update(self, {isTimedOut : true});
        }
    }

    /*
     *
     */
    function getProtecteds(self) {
        return attr(self, 'protecteds');
    }

    /*
     *
     */
    function getConfig(self) {
        return attr(getProtecteds(self), 'config');
    }

    /*
     *
     */
    function getState(self) {
        return attr(getProtecteds(self), 'state');
    }

    /*
     *
     */
    function getObservers(self) {
        return attr(getProtecteds(self), 'observers');
    }

    /*
     *
     */
    function hasObserver(self, observer) {
        var i         = 0;
        var len       = 0;
        var observers = getObservers(self);

        for (i = 0, len = observers.length; i < len; i++) {
            if (observer.object === observers[i]) {
                return true;
            }
        }

        return false;
    }

    /*
     *
     */
    function listen(stateObject) {
        var config = getConfig(stateObject);
        var meta   = null;
        var now    = (new Date()).getTime();

        var observer  = null;
        var observers = getObservers(stateObject);
        var i         = 0;
        var len       = observers.length;

        var registrationTime     = null;
        var shouldNotifyObserver = false;
        var state                = getState(stateObject);
        var timeout              = null;
        var unregisterQueue      = [];

        if (!len) {
            clearTimeout(state.listenTimeoutId);

            state.listenTimeoutId = setTimeout(function() {
                listen(stateObject);
            }, config.LISTEN_TIMEOUT);

            return;
        }

        for (i = 0; i < len; i++) {
            observer = observers[i];
            meta = observer.meta;
            timeout = meta.timeout;
            registrationTime = meta.registrationTime;

            if (!timeout) {
                throw kNoTimeoutMetaData;
            }

            shouldNotifyObserver = (now - registrationTime > timeout);

            if (shouldNotifyObserver) {

                // "These are not the droids you're looking for.";
                // unregister 'em.
                unregisterQueue.push(observer);
            }
        }

        timeoutObservers(stateObject, unregisterQueue);

        clearTimeout(state.listenTimeoutId);

        state.listenTimeoutId = setTimeout(function() {
            listen(stateObject);
        }, config.LISTEN_TIMEOUT);
    }

    /**
     * @function {protected static} o2.AjaxState.addObserver
     *
     * <p>An implementation of the <code>Observer.addObserver</code>
     * method.</p>
     * <p>Registers an <code>Observer</code>.</p>
     *
     * <p>This method is <strong>protected</strong>, in a sense that it's not
     * meant to be called directly. {@link o2.AjaxController} and
     * {@link o2.JsonpController} use it indirectly to register themselves.</p>
     *
     * @param {Object} observer - the <code>Observer</code> to register.
     */
    exports.addObserver = def(me, 'addObserver', function(observer) {

        //!
        // acquire(me, this, 'observer');
        if (hasObserver(this, observer)) {
            return;
        }

        var observers = getObservers(this);

        observers.push({
            object : observer,
            meta : {
                registrationTime : (new Date()).getTime(),
                timeout : (observer.timeout || null)
            }
        });
    });

    /**
     * @function {static} o2.AjaxState.countObservers
     *
     * <p>An implementation of the <code>Observer.countObservers</code>
     * method.</p>
     * <p>Gets the <code>Observer</code> count.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var count = o2.AjaxState.countObservers();
     * </pre>
     *
     * @return the number of registered <code>Observer</code>s.
     */
    exports.countObservers = def(me, 'countObservers', function() {
        return getObservers(this).length;
    });

    /**
     * @function {protected static} o2.AjaxState.deleteObserver
     *
     * <p>An implementation of the <code>Observer.deleteObserver</code>
     * method.</p>
     * <p>Removes an <code>Observer</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <p>This method is <strong>protected</strong>, in a sense that it's not
     * meant to be called directly. {@link o2.AjaxController} and
     * {@link o2.JsonpController} use it indirectly to unregister
     * themselves.</p>
     *
     * @param {Object} observer - the <code>Observer</code> to remove.
     */
    exports.deleteObserver = def(me, 'deleteObserver', function(observer) {
        var i         = 0;
        var len       = 0;
        var observers = getObservers(this);

        // This is an already-deleted zombie object.
        // No need for further processing.
        if (observer.isDeleted) {
            return true;
        }

        for (i = 0, len = observers.length; i < len; i++) {
            if (observer === observers[i].object) {
                observers.splice(i, 1).isDeleted = true;

                return true;
            }
        }

        return false;
    });

    /**
     * @function {static} o2.AjaxState.deleteObservers
     *
     * <p>An implementation of the <code>Observer.deleteObservers</code>
     * method.</p>
     * <p>Unregisteres all of the registered <code>Observer</code>s.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.AjaxController.deleteObservers();
     * </pre>
     *
     */
    exports.deleteObservers = def(me, 'deleteObservers', function() {
        getObservers(this).length = 0;
    });

    /**
     * @function {static} o2.AjaxState.init
     *
     * <p>Initializes the <strong>object</strong> and starts notifying
     * registered <strong>observer</strong>s.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.AjaxState.init();
     * </pre>
     *
     */
    exports.init = def(me, 'init', function() {

        // We use implicit this, instead of explicity using
        // o2.AjaxState.protecteds.listen, because o2.JsonpState inherits
        // o2.AjaxState, and in o2.JsonpState this refers to o2.JsonpState.
        listen(this);
    });

    /**
     * @function {protected static} o2.AjaxState.timeoutObservers
     *
     * <p>Sends a timeout request and unregisters the given
     * <code>Observer</code>s.</p>
     *
     * <p>This method is <strong>protected</strong>, in a sense that it's not
     * meant to be called directly. {@link o2.AjaxController} and
     * {@link o2.JsonpController} use it indirectly to timeout
     * themselves.</p>
     *
     * @param {Array} observers - A collection of {@link AjaxController}
     * objects.
     */
    exports.timeoutObservers = def(me, 'timeoutObservers', function(observers) {
        timeoutObservers(this, observers);
    });

    /**
     * @function {static} o2.AjaxState.timeoutAllObservers
     *
     * <p>Sends a timeout request and unregisters all registered
     * <code>Observer</code>s.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.AjaxState.timeoutAllObservers();
     * </pre>
     *
     */
    exports.timeoutAllObservers = def(me, 'timeoutAllObservers', function() {
        timeoutObservers(this, getObservers(this));
    });

    /**
     *
     */
    def(me, 'protecteds', {

        /**
         * @struct {protected readonly} o2.AjaxState.protecteds.config
         *
         * <p>Module configuration.</p>
         */
        config : {
            LISTEN_TIMEOUT : 1000
        },

        /**
         * @struct {protected readonly} o2.AjaxState.state
         *
         * <p>Internal state.</p>
         */
        state : {
            listenTimeoutId : null
        },

        /**
         * @property {protected readonly Array}
         * o2.AjaxState.observers
         *
         * <p>A collection of the registered <code>Observer</code>s.</p>
         */
        observers : []
    });
}(this.o2, this));
/**
 * @module   ajaxcontroller.core
 * @requires ajaxstate.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>An AJAX controller that implements the <strong>Observer
 * Pattern</strong>.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var construct = attr(_, 'construct');
    var proto     = attr(_, 'proto');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'AjaxController';

    /*
     * Aliases
     */

    var nill = require('nill');

    var state = require('AjaxState');

    /**
     * @class o2.AjaxController
     * @implements Observer
     *
     * <p>An AJAX <code>Controller</code>. Registers itself to {@link
     * AjaxState} <code>Observable</code> upon construction.</p>
     *
     * <p>Implements the <code>Observer</code> interface.</p>
     */

    /**
     * @constructor o2.AjaxController.AjaxController
     *
     * <p>See
     * http://download.oracle.com/javase/1.4.2/docs/api/java/util/Observer.html
     * </p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var request = o2.Ajax.get('/api.php', {
     *      name   : 'Volkan Özçelik',
     *      action : 'add'
     * }, {
     *      oncomplete  : function(text, xml, xhr, status) {},
     *      onerror     : function(statusCode, statusText, xhr) {},
     *      onaborted   : function(xhr) {},
     *      onexception : function(exception, xhr) {}
     * });
     *
     * // The request will time out after 5 seconds and then ontimeout
     * // will be called.
     * var controller = new o2.AjaxController(requrest, {
     *      timeout   : 5000,
     *      ontimeout : function() {
     *      }
     * });
     * </pre>
     *
     * @param {XmlHttpRequest} xhr - the original XmlHttpRequest
     * @param {Object} args - an associative array in the form
     * {timeout:[timeoutInMilliSeconds], ontimeout: [function]}
     * both attributes are optional.
     */
    exports.AjaxController = construct(kModuleName, function(xhr, args) {
        this.xhr = xhr;
        this.timeout = (args && args.timeout) || null;
        this.ontimeout = (args && args.ontimeout) || nill;
        this.isDeleted = false;

        // Register self.
        state.addObserver(this);
    });

    /*
     *
     */
    var me = exports.AjaxController;

    /**
     * @function {virtual} o2.AjaxController.update
     *
     * <p>Implementation of the <code>Observer.update</code> interface
     * method.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var controller = new o2.AjaxController(xhr, params);
     *
     * ...
     *
     * // Timeout the AJAX request immediately.
     * controller.update({isTimedOut : true});
     * </pre>
     *
     * <p>{@link o2.JsonpController} overrides this implementation.</p>
     *
     * @param {Object} data - parameters passed from the <code>Observable</code>
     * to this <code>Observer</code>.
     */
    exports.update = proto(me, 'update', function(data) {
        if (!data.isTimedOut) {
            return;
        }

        // Unregister self from the observable.
        this.unregister();

        // Abort the request.
        this.xhr.abort();

        // Execute callback.
        this.ontimeout();
    });

    /**
     * @function {virtual} o2.AjaxController.unregister
     *
     * <p>Unregisters the object from the observer.</p>
     * <p>Call this when the <strong>AJAX</strong> request completes.</p>
     *
     * <p>{@link o2.JsonpController} overrides this implementation.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var controller = new o2.AjaxController(xhr, params);
     *
     * ...
     *
     * // The o2.AjaxState no longer listens to this Controller.
     * controller.unregister();
     * </pre>
     *
     */
    exports.unregister = proto(me, 'unregister', function() {
        if (this.isDeleted) {
            return;
        }

        state.deleteObserver(this);
    });
}(this.o2, this));
/**
 * @module   validation.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.2888371
 * -->
 *
 * <p>A validation helper.</p>
 */
(function(framework, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var obj       = attr(_, 'getObject');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Validation';


    /**
     * @class {static} o2.Validation
     *
     * <p>A simple class for validating various kinds of
     * <strong>object</strong>s.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var toString = attr(Object.prototype, 'toString');

    /*
     * Calendar Months
     */
    var months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    /*
     * Common Constants
     */
    var kDecimalBase          = 10;
    var kFebruaryIndex        = 1;
    var kLeapFebruaryDays     = 29;
    var kNormalFebruaryDays   = 28;
    var kObjectNameStartIndex = 8;
    var kTrimLastBraceIndex   = -1;
    var kYmdArgLen            = 3;

    /*
     * EcmaScript Types
     */
    var kArguments = 'Arguments';
    var kArray     = 'Array';
    var kBoolean   = 'Boolean';
    var kDate      = 'Date';
    var kFunction  = 'Function';
    var kNumber    = 'Number';
    var kObject    = 'Object';
    var kRegExp    = 'RegExp';
    var kString    = 'String';

    /*
     * Cheks whether the year is a leap year.
     */
    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
    }

    /**
     * @function {private} o2.Validation.is
     *
     * <p>Returns the type information of the given object.</p>
     * <p>The type can be any of the following:</p>
     * <p><code>Array, Boolean, Date, Error, Function, JSON,
     * Math, Number, Object, RegExp, String, Arguments</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : 'dolor'};
     * var isObject = o2.Validation.is(obj, 'Object');
     * </pre>
     *
     * @param {Object} obj - the object to check type against.
     * @param {String} type - the type to compare.
     *
     * @return <code>true</code> if the <strong>object</strong>'s type matches
     * the <strong>type</strong> parameter, <code>false</code> otherwise.
     */
    exports.is = def(me, 'is', function(obj, type) {
        var klass = toString.call(obj).slice(
            kObjectNameStartIndex, kTrimLastBraceIndex);

        return obj !== UNDEFINED && obj !== null && klass === type;
    });

    var is = obj(me).is;

    /**
     * @function {static} o2.Validation.isArguments
     *
     * <p>Checks whether the object is an <code>arguments</code> object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isArguments = o2.Validation.isArguments(arguments);
     * </pre>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is an <code>arguments</code> object,
     * <code>false</code> otherwise.
     */
    exports.isArguments = def(me, 'isArguments', function(obj) {
        return is(obj, kArguments);
    });

    /**
     * @function {static} o2.Validation.isArray
     *
     * <p>Checks whether the object is an <code>Array</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isArray = o2.Validation.isArray([]);
     * </pre>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is an <code>Array</code>,
     * <code>false</code> otherwise.
     */
    exports.isArray = def(me, 'isArray', function(obj) {
        return is(obj, kArray);
    });


    /**
     * @function {static} o2.Validation.isBoolean
     *
     * <p>Checks whether the object is a <code>Boolean</code>.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isBoolean = o2.Validation.isBoolean(false);
     * </pre>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is a <code>Boolean</code>,
     * <code>false</code> otherwise.
     */
    exports.isBoolean = def(me, 'isBoolean', function(obj) {
        return obj === true || obj === false || is(obj, kBoolean);
    });

    /**
     * @function {static} o2.Validation.isDate
     *
     * <p>Checks whether the object is a <code>Date</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isDate = o2.Validation.isDate((ew Date());
     * </pre>
     *
     * @param {Arguments} varargin - if a single argument is given it checks
     * whether it identifies a <code>Date</code> object. Otherwise the
     * function takes three parameters (year, month, date) and cheks whether
     * they denote a valid Date.
     *
     * @return <code>true</code> if obj is a <code>Date</code>,
     * <code>false</code> otherwise.
     */
    exports.isDate = def(me, 'isDate', function(objYear, objMonth, objDay) {
        var day    = objDay;
        var maxDay = 0;
        var month  = objMonth;
        var year   = objYear;

        if (arguments.length === kYmdArgLen) {
            if (!year || !month || !day) {
                return false;
            }

            month = parseInt(month, kDecimalBase);
            year  = parseInt(year, kDecimalBase);
            day   = parseInt(day, kDecimalBase);

            if (month < 0 || month > months.length) {
                return false;
            }

            months[kFebruaryIndex] = isLeapYear(year) ?
                kLeapFebruaryDays :
                kNormalFebruaryDays;

            maxDay = months[month - 1];

            return (day <= maxDay);
        }

        return is(objYear, kDate);
    });

    /**
     * @function {static} o2.Validation.isFunction
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isFunction = o2.Validation.isFunction(fnTest);
     * </pre>
     *
     * <p>Checks whether the object is a <code>Function</code>.</p>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is a <code>Function</code>,
     * <code>false</code> otherwise.
     */
    exports.isFunction = def(me, 'isFunction', function(obj) {
        return is(obj, kFunction);
    });

    /**
     * @function {static} o2.Validation.isNaN
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isNaN = o2.Validation.isNaN('lorem');
     * </pre>
     *
     * <p>Checks whether the given parameter is <code>NaN</code>.</p>
     *
     * @param {Object} obj - the <code>Object</code> to test.
     *
     * @return <code>true</code> if the item is <code>NaN</code>,
     * <code>false</code> otherwise.
     */
    exports.isNaN = def(me, 'isNaN', function(obj) {

        // NaN is the only value for which === is not reflexive.
        // JSLint whines about this, but it's normal.
        return obj !== obj;
    });

    /**
     * @function {static} o2.Validation.isNull
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isNull = o2.Validation.isNull(null);
     * </pre>
     *
     * <p>Checks whether the given parameter is <code>null</code>.</p>
     *
     * @param {Object} obj - the <code>Object</code> to test.
     *
     * @return <code>true</code> if the item is <code>null</code>,
     * <code>false</code> otherwise.
     */
    exports.isNull = def(me, 'isNull', function(obj) {
        return obj === null;
    });

    /**
     * @function {static} o2.Validation.isNumber
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isNumber = o2.Validation.isNumber(42);
     * </pre>
     *
     * <p>Checks whether the object is a <code>Number</code>.</p>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is a <code>Number</code>,
     * <code>false</code> otherwise.
     */
    exports.isNumber = def(me, 'isNumber', function(obj) {
        return is(obj, kNumber);
    });

    /**
     * @function {static} o2.Validation.isNumeric
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isNumeric = o2.Validation.isNumeric('4.2');
     * </pre>
     *
     * <p>Checks whether the given parameter is a numeric entity.</p>
     *
     * @param {Object} obj - the <code>Object</code> to test.
     *
     * @return <code>true</code> if the item is a numeric entity,
     * <code>false</code> otherwise.
     */
    exports.isNumeric = def(me, 'isNumeric', function(obj) {
        return !isNaN(parseFloat(obj)) && isFinite(obj);
    });

    /**
     * @function {static} o2.Validation.isObject
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isObject = o2.Validation.isObject({});
     * </pre>
     *
     * <p>Checks whether the object is an <code>Object</code>({}).</p>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is an <code>Object</code> ({}),
     * <code>false</code> otherwise.
     */
    exports.isObject = def(me, 'isObject', function(obj) {
        return is(obj, kObject);
    });

    /**
     * @function {static} o2.Validation.isRegExp
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isRegExp = o2.Validation.isRegExp(/test/ig);
     * </pre>
     *
     * <p>Checks whether the object is a <code>RegExp</code>.</p>
     *
     * @param {Object} obj - the object to test.
     *
     * @return <code>true</code> if obj is a <code>RegExp</code>,
     * <code>false</code> otherwise.
     */
    exports.isRegExp = def(me, 'isRegExp', function(obj) {
        return is(obj, kRegExp);
    });

    /**
     * @function {static} o2.Validation.isString
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isString = o2.Validation.isString('lorem');
     * </pre>
     *
     * <p>Checks whether the object is a <code>String</code>.</p>
     *
     * @param {Object} obj - the object to test.
     *
     * @return true if obj is a String, false otherwise.
     */
    exports.isString = def(me, 'isString', function(obj) {
        return is(obj, kString);
    });

    /**
     * @function {static} o2.Validation.isUndefined
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isUndefined = o2.Validation.isUndefined(undefined);
     * </pre>
     *
     * <p>Checks whether the given parameter is <code>undefined</code>.</p>
     *
     * @param {Object} obj - the <code>Object</code> to test.
     *
     * @return <code>true</code> if the item is <code>undefined</code>,
     * <code>false</code> otherwise.
     */
    exports.isUndefined = def(me, 'isUndefined', function(obj) {
        return obj === void 0;
    });

    /**
     * @function {static} o2.Validation.isWindow
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isWindow = o2.Validation.isWindow(window);
     * </pre>
     *
     * <p>Checks whether the given parameter is a <code>window</code>
     * object.</p>
     *
     * @param {Object} obj - the <code>Object</code> to test.
     *
     * @return <code>true</code> if the item is a <code>window</code>,
     * <code>false</code> otherwise.
     */
    exports.isWindow = def(me, 'isWindow', function(obj) {
        return obj && typeof obj === kObject && !!obj.setInterval;
    });
}(this.o2));
/**
 * @module   validation.regexp
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>Does validation by matching test subjects against predefined
 * <strong>regular expression</strong>s.<p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Validation';

    /*
     * Validation (regexp)
     */
    var me = create(kModuleName);

    /*
     * Common Regular Expressions
     */
    var kEmailRegExp      = /[a-z0-9!#$%&'*+\/=?\^_`{|}~\-."]+@[a-z0-9.]+/i;
    var kUrlRegExp        = /^(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[\-A-Z0-9+&@#\/%=~_|]$/i;
    var kWhitespaceRegExp = /^\s*$/;

    /**
     * @function {static} o2.Validation.isEmail
     *
     * <p>Did you know that <code>Abc\@def@example.com</code>, and
     * <code>customer/department=shipping@example.com</code> are all valid
     * e-mails?</p>
     * <p>There is no good (and realistic) regular expression to match an e-mail
     * address.<p>
     * <p>The grammar ( http://www.ietf.org/rfc/rfc5322.txt ) is too complicated
     * for that.</p>
     * <p>This method matches <strong>e-mail</strong> addresses, while giving
     * some false-positives.</p>
     * <p>The correct action to validate an <strong>e-mail</strong> address is
     * to validate by trying
     * (i.e. try sending an account activation <strong>e-mail</strong> to a
     * newly registered user, for example.).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isEmail = o2.Validation.isEmail('volkan@o2js.com');
     * </pre>
     *
     * @param {String} mail - the <strong>e-mail</strong> address to test.
     *
     * @return <code>true</code> if the <strong>e-mail</strong> address is a
     * potentially valid e-mail, <code>false</code> otherwise.
     */
    exports.isEmail = def(me, 'isEmail', function(mail) {
        return kEmailRegExp.test(mail);
    });

    /**
     * @function {static} o2.Validation.isUrl
     *
     * <p>Checks whether the given argument is a valid <strong>URL</strong>
     * address.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isUrl = o2.Validation.isUrl('http://o2js.com/');
     * </pre>
     *
     * @param {String} url - the address to check.
     *
     * @return <code>true</code> if the address is a valid <strong>URL</strong>,
     * <code>false</code> otherwise.
     */
    exports.isUrl = def(me, 'isUrl', function(url) {
        return kUrlRegExp.test(url);
    });

    /**
     * @function {static} o2.Validation.isWhitespace
     *
     * <p>Checks whether the given argument consists of only whitespace
     * characters.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isWhitespace = o2.Validation.isWhitespace('  \t\r\n   \n  ');
     * </pre>
     *
     * @param {String} text - the text to check.
     *
     * @return <code>true</code> if the argument consists of only whitespace
     * characters, <code>false</code> otherwise.
     */
    exports.isWhitespace = def(me, 'isWhitespace', function(text) {
        return kWhitespaceRegExp.test(text);
    });
}(this.o2));
/**
 * @module   method.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <code>Function</code> helper for stuff like
 * <strong>memoization</strong>, <strong>partial functions</strong> and
 * <strong>currying</strong>.</p>
 */
(function(framework, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /**
     * @class {static} o2.Method
     *
     * <p>A method helper class.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var ap     = Array.prototype;
    var concat = attr(ap, 'concat');
    var slice  = attr(ap, 'slice');

    var bind = Function.prototype.bind;

    if (bind) {

        /**
         * @function {static} o2.Method.bind
         *
         * <p>Creates a <code>Function</code> that uses <strong>base</strong> as
         * the "<code>this</code>" reference.</p>
         *
         * <p><strong>bind</strong> can often be used to bind a different
         * context to a <strong>curried</strong> function.
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * function test(a,b,c){ return this.number + (a*b+c); };
         * var context = {number:10};
         * var bound = o2.Method.bind(context, test);
         * bound(20,2,10);//gives 60
         * var bound2 = o2.Method.bind(context, test, 20);
         * bound2(2, 10);//gives 60
         * </pre>
         *
         * @param {Object} base - the context of the newly created
         * <code>Function</code>.
         * @param {Function} fn - the <code>Function</code> to modify.
         * @param {Arguments} varargin - variable number of input arguments to be
         * passed as initial set of arguments.
         *
         * @return the modified <code>Function</code>.
         */
        exports.bind = def(me, 'bind', function() {
            var args = slice.call(arguments);
            var context = args.shift();
            var fn = args.shift();

            return fn.bind(context, args);
        });
    } else {
        exports.bind = def(me, 'bind', function() {
            var args = slice.call(arguments);
            var context = args.shift();
            var fn = args.shift();

            return function() {
                return fn.apply(
                    context, concat.call(args, slice.call(arguments))
                );
            };
        });
    }

    /**
     * @function {static} o2.Method.curry
     *
     * <p>Curries the <code>Function</code>.</p>
     * <p>See http://www.dustindiaz.com/javascript-curry/ for a
     * discussion.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function test(a,b,c) { return a+b+c; }
     * var curried = o2.Method.curry(this, test, 1, 2);
     * var result = curried(3);//returns 6;
     * </pre>
     *
     * @return the modified <code>Function</code>.
     */
    exports.curry = def(me, 'curry', function() {
        var args = slice.call(arguments);
        var context = args.shift();
        var fn = args.shift();

        return function() {
            return fn.apply(context,
                args.concat(
                    slice.call(arguments)
                )
            );
        };
    });

    /**
     * @function {static} o2.Method.identity
     *
     * <p>Just an identity function, that return what it's given without
     * changing it.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var result = o2.identity(4);
     * // result will be 4
     * </pre>
     *
     * @param {Object} value - input.
     * @return the <strong>value</strong> itself.
     */
    exports.identity = def(me, 'identity', function(value) {
        return value;
    });

    /**
     * @function {static} o2.Method.memoize
     *
     * <p><strong>Memoizes</strong> the given <code>Function</code>'s
     * outcome and presents it from cache, instead of recalculating.</p>
     * <p>See http://en.wikipedia.org/wiki/Memoization for details.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function multiply(a,b){return a*b; }
     * var memoized = o2.Method.memoize(multiply);
     * var result = memoized(2,3);//fresh calculation.
     * result = memoized(4,2);//fresh calculation.
     * result = memoized(2,3);//retrieve from cache.
     * </pre>
     *
     * @param {Function} fn - the <code>Function</code> to memoize.
     * @param {Object} context - what should "this" refer to.
     * @param {...} ... - variable number of input arguments to pass
     * arguments to fn.
     *
     * @return a reference to the memoized <code>Function</code>.
     */
    exports.memoize = def(me, 'memoize', function() {
        var pad = {};
        var args = slice.call(arguments);
        var self = args.shift();
        var obj = args.length > 0 ? args[0] : null;

        var memoizedFn = function() {

            // Copy the arguments object into an array:
            // this allows it to be used as a cache key.
            var args = [];
            var i = 0;

            for (i = 0; i < arguments.length; i++) {
                args[i] = arguments[i];
            }

            // Evaluate the memoized function if it hasn't
            // been evaluated with these arguments before.
            if (!pad.hasOwnProperty(args)) {
                pad[args] = self.apply(obj, arguments);
            }

            return pad[args];
        };

        return memoizedFn;
    });

    /**
     * @function {static} o2.Method.partial
     *
     * <p>Defines a partial <code>Function</code>.</p>
     * <p>See http://ejohn.org/blog/partial-functions-in-javascript/ for a
     * detailed discussion.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function test(a,b,c){ return a*b+c; }
     * var partial = o2.Method.partial(this, test, 10, undefined, 20);
     * var result = partial(3);//returns 50;
     * </pre>
     *
     * @param {Object} base - the context of the newly created
     * <code>Function</code>.
     * @param {Function} fn - the <code>Function</code> to modify.
     * @param {Arguments} varargin - variable number of input arguments to
     * be passed as initial set of arguments.
     *
     * @return the modified <code>Function</code>.
     */
    exports.partial = def(me, 'partial', function() {
        var args = slice.call(arguments);
        var context = args.shift();
        var fn = args.shift();

        return function() {
            var arg = 0;
            var i = 0;

            for (i = 0; i < args.length && arg < arguments.length; i++) {
                if (args[i] === UNDEFINED) {
                    args[i] = arguments[arg++];
                }
            }

            return fn.apply(context, args);
        };
    });
}(this.o2));
/**
 * @module   method.event
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Event-handling-related helper methods.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /*
     * Method (event)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var slice = attr(Array.prototype, 'slice');

    /**
    * @function {static} o2.Method.bindAsEventListener
    *
    * <p>Binds the given function as an event listener, ensuring that
    * the first parameter is always the event object.</p>
    *
    * <p>This method is generally used in conjunction with
    * {@link o2.Event.addEventListener}.</p>
    *
    * <p><strong>Usage example:</strong></p>
    *
    * <pre>
    * var $ = o2.$;
    * var listen = o2.Event.addEventListener;
    * var getTarget = o2.Event.getTarget;
    * var bind = o2.Method.bindAsEventListener;
    *
    * var context = {id : 1, description : 'hello world.'};
    * var kClick = 'click';
    * var menu = $('mainMenu');
    *
    * function test(evt, a, b) {
    *      console.log( getTarget(evt) );
    *      console.log( this.id );
    *      console.log( this.description );
    *      console.log( a );
    *      console.log( b );
    * }
    *
    * var delegate = bind(context, test, 20, 30);
    * listen(menu, kClick, delegate);
    *
    * // When mainMenu element is clicked the output will be as follows:
    * //
    * // [DOM Element]
    * // 1
    * // hello world
    * // 20
    * // 30
    * </pre>
    *
    * @return the bound <code>Function</code>.
    *
    * @see o2.Event.addEventListener
    */
    exports.bindAsEventListener = def(me, 'bindAsEventListener', function() {
        var args    = slice.call(arguments);
        var context = args.shift();
        var fn      = args.shift();

        return function(e) {
            args.unshift(e);

            return fn.apply(context, args);
        };
    });
}(this.o2));
/**
 * @module   method.inherit
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>OOP/Inheritance related method helpers.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /*
     * Method (inherit)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var format = require('String', 'format');

    /*
     * Common Constants
     */
    var kEmpty                 = '';
    var kArgumentCountMismatch = ['Method: Argument count mismatch. ',
        'Expecting: {0}, provided: {1}'].join(kEmpty);
    var kFunction              = 'function';

    /**
     * @function {static} o2.Method.overload
     *
     * <p>Adds a method to the <code>Object</code>.</p>
     * <p>If parameters count is different but the name is same,
     * adds the method with a different signature, overloading the former
     * one.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var Context = {};
     *
     * o2.Method.overload(Context, 'test', function(a) {
     *      console.log(a);
     * });
     *
     * o2.Method.overload(Context, 'test', function(a, b) {
     *      console.log(a + b);
     * });
     *
     * Context.test(1);
     * Context.test(1, 2);
     *
     * // will output:
     * // 1
     * // 3
     * </pre>
     *
     * @param {Object} object - the <code>Object</code> to add methods to.
     * @param {String} name - the name of the method.
     * @param {Function} fn - the method reference.
     *
     * @return the overloaded <code>Function</code>.
     */
    exports.overload = def(me, 'overload', function(object, name, fn) {
        var old = object[name];

        object[name] = function() {

            // If both functions have identical # of arguments,
            // then call the cached function.
            if (fn.length === arguments.length) {
                return fn.apply(this, arguments);
            }

            // Otherwise try to call the old function, if any.
            if (typeof old === kFunction) {
                return old.apply(this, arguments);
            }
        };
    });

    /**
     * @function {static} o2.Method.requireAllArguments
     *
     * <p>Checks the passed in arguments, and if all arguments are present,
     * executes <code>Function</code>. Otherwise throws an error.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function test(a, b) {
     *
     * }
     *
     * var testEnsure = o2.Method.requireAllArguments(test);
     *
     * testEnsure(1);    // will throw an exception.
     * testEnsure(1, 2); // will NOT throw an exception.
     * </pre>
     *
     * @param {Function} fn - the <code>Function</code> to check.
     *
     * @return the applied <code>Function</code>.
     *
     * @throws Excpetion if all of the arguments is not provided to the
     * <code>Function</code>.
     */
    exports.requireAllArguments = def(me, 'requireAllArguments', function(fn) {
        return function() {

            // throw an error if the arguments' length do not match.
            if (arguments.length < fn.length) {
                throw format(kArgumentCountMismatch, fn.length,
                    arguments.length);
            }

            return fn.apply(this, arguments);
        };
    });
}(this.o2));
/**
 * @module   method.repeat
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <code>Function</code> helper for stuff repetitive method calls.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /*
     * Method (repeat)
     */
    var me = create(kModuleName);

    /**
     * @function {static} o2.Method.after
     *
     * <p>Creates a <code>Function</code> that only executes after being called
     * <strong>count</strong> times.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var bump = o2.Method.after(3, function() {
     *      console.log('bump');
     * });
     *
     * bump();bump();bump();bump();
     * // Will log 'bump' only once.
     * </pre>
     *
     * @param {Integer} count - the numer of calls required to the
     * <code>Function</code> before executing it.
     * @param {Function} delegate - the delegate to execute.
     *
     * @return a <code>Function</code> that will only execute after being
     * called <strong>count</strong> times.
     */
    exports.after = def(me, 'after', function(count, delegate) {
        if (count <= 0) {
            return;
        }

        return function() {
            count--;

            var context = this;
            var args = arguments;

            if (count < 1) {
                return delegate.apply(context, args);
            }
        };
    });

    /**
     * @function {static} o2.Method.once
     *
     * <p>Creates a <code>Function</code> that will only get called once.<p>
     * <p>May be useful for creating <strong>singleton</strong>
     * <code>Object</code>s, or for lazy-loading modules.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var init = o2.Method.once(function() {
     *      console.log('done');
     * });
     *
     * init();init();
     * // Will log 'done' only once.
     * </pre>
     *
     * @param {Function} delegate - the <code>Function</code> to execute.
     *
     * @return a <code>Function</code> that will execute only once.
     */
    exports.once = def(me, 'once', function(delegate) {
        var did = false;
        var cache = null;

        return function() {
            var context = this;
            var args = arguments;

            if (did) {
                return cache;
            }

            did = true;

            cache = delegate.apply(context, args);

            return cache;
        };
    });

    /**
     * @function {static} o2.Method.times
     *
     * <p>Sequentially executes a given <code>Function</code> given amount
     * of times.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Method.times(3, function(i) {
     *   console.log(i);
     * });
     * // Will log:
     * // 0
     * // 1
     * // 2
     * </pre>
     *
     * @param {Integer} count - number of times to execute.
     * @param {Function} delegate - the <code>Function</code> to execute (in
     * the form <code>function(i, payload)</code>).
     * @param {Object} context - what should <code>this</code> refer to inside
     * the <code>Function</code>.
     * @param {Object} payload - the <code>Object</code> to pass to the
     * <strong>delegate</strong> as a second argument.
     */
    exports.times = def(me, 'times', function(count, delegate, context,
                payload) {
        var i = 0;

        for (i = 0; i < count; i++) {
            delegate.apply(context, [i, payload]);
        }
    });
}(this.o2));
/**
 * @module   method.timer
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <code>Function</code> helper for timer-related actions, like delaying
 * a <code>Function</code> call.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /*
     * Method (timer)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var now = require('now');

    var clearTimeout = attr(window, 'clearTimeout');
    var setTimeout   = attr(window, 'setTimeout');

    /*
     * Timer-Related
     */
    var kTimerId       = 'id';
    var kDelayCheckMs  = 50;

    /*
     *
     */
    function isTimeExceeded(currentTime, lastCallTime, waitMs) {
        return !!currentTime && (now() - lastCallTime > waitMs);
    }

    /*
     *
     */
    function doTimeout(timerContext, timerId, delegate, ms) {
        clearTimeout(timerContext[timerId]);

        timerContext[timerId] = setTimeout(delegate, ms);
    }

    /*
     *
     */
    function exec(timers, queue, delegate) {
        var item = queue.pop();

        if (!item) {
            return;
        }

        timers.lastCallTime = now();

        try {
            delegate.apply(item.context, item.args);
        } catch (ignore) {
        }
    }

    /*
     *
     */
    function execIfWaitedEnough(timers, queue, waitMs, delegate) {
        if (!isTimeExceeded(timers.lastCallTime, waitMs)) {
            return;
        }

        exec(timers, queue, delegate);
    }

    /**
     * @function o2.Method.debounce
     *
     * <p>Creates a <code>Function</code> that will not be triggered, as long as
     * it continues to get invoked within a certain time window.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var debounceAction = o2.Method.debuonce(function() {
     *      console('if you call me within a second, I will skip.');
     * }, 1000);
     * </pre>
     *
     * @param {Function} delegate - the <code>Function</code> to debounce.
     * @param {Integer} waitMs - the least amount of time (in milliseconds)
     * to wait between calls.
     *
     * @return the debounced <code>Function</code>.
     */
    exports.debounce = def(me, 'debounce', function(delegate, waitMs) {
        var timers = {};

        timers[kTimerId] = null;

        return function() {
            var context = this;
            var args = arguments;

            doTimeout(timers, kTimerId, function() {
                delegate.apply(context, args);
            }, waitMs);
        };
    });

    /**
     * @function {static} o2.Method.defer
     *
     * <p>Defers a <code>Function</code> for a specified amount of time.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var deferAction = o2.Method.defer(function() {
     *      console.log('I will be delayed for 1 second');
     * }, 1000);
     * </pre>
     *
     * @param {Function} delegate - the <code>Function</code> to defer.
     * @param {Integer} interval - the interval to defer in milliseconds.
     * @param {Object} context - the context (this reference) to bind.
     * @param {Array} args - arguments to pass to the function.
     */
    exports.defer = def(me, 'defer', function(delegate, interval, context,
                args) {
        setTimeout(function() {
            return delegate.apply(context, args);
        }, interval);
    });

    /**
     * @function {static} o2.Method.delay
     *
     * <p>An <strong>alias</strong> to {@link o2.Method.defer}.</p>
     *
     * @see o2.Method.defer
     */
    exports.delay = alias(me, 'delay', 'defer');

    /**
     * @function {static} o2.Method.throttle
     *
     * <p>Returns a <code>Function</code> that will execute at most once in a
     * given time window. That is to say, quick repetitive calls to the function
     * are <strong>throttled</strong>.</p>
     *
     * <p>This may be especially useful for asyncronous <strong>AJAX</strong>,
     * requests, preventing the client to bombard the server with too many
     * simultaneous requests.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Method.throttle(function() {
     *      console.log('You can call me at max once within a second');
     * }, 1000);
     * </pre>
     *
     * @param {Function} delegate - the <code>Function</code> to throttle.
     * @param {Integer} waitMs - the least amount of time (in milliseconds)
     * to wait between calls.
     *
     * @return the throttled <code>Function</code>.
     */
    exports.throttle = def(me, 'throttle', function(delegate, waitMs) {
        var timers = {
            lastCallTime : null
        };

        timers[kTimerId] = null;

        var queue = [];

        var loop = function() {
            execIfWaitedEnough(timers, queue, waitMs, delegate);

            if (!queue.length) {
                return;
            }

            doTimeout(timers, kTimerId, loop, kDelayCheckMs);
        };

        return function() {
            queue.push({context : this, args : arguments});

            loop();
        };
    });
}(this.o2, this));
/**
 * @module   method.transpose.
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>flip/fold/merge kind of method helper that ammend/transpose
 * <code>Function</code>s.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Method';

    /*
     * Method (transpose)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var ap     = Array.prototype;
    var slice  = attr(ap, 'slice');

    /**
     * @function {static} o2.Method.compose
     *
     * <p>Create a method that calls the <strong>invoker</strong> with the
     * return value of the evaluated function <strong>fn</strong>. The current
     * arguments are passed to <strong>fn</strong>, and the evaluated result
     * is passed to the <strong>invoker</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function double(a) { return a*2; }
     * var min = Math.min;
     * var doubleMin = o2.Method.compose(double, min);
     * var res = doubleMin(3, 5);
     * // res will be 6
     * </pre>
     *
     * @param {Function} invoker - the invoker.
     * @param {Function} delegate - the invokee.
     *
     * @return the created <code>Function</code>.
     */
    //TODO: pass an optional context parameter.
    exports.compose = def(me, 'compose', function(invoker, delegate) {
        return function() {
            return invoker.apply(this, [delegate.apply(this, arguments)]);
        };
    });

    /**
     * @function {static} o2.Method.flip
     *
     * <p>Flips two arguments of the given <code>Function</code>, and returns a
     * new <code>Function</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function factor(a, b) { return a / b; }
     * var flipped = o2.Method.flip(factor, 0, 1);
     * var result = factor(5, 2) == flipped(2, 5);
     * // result will be true
     * </pre>
     *
     * @param {Function} fn - the delegate to flip arguments of.
     * @param {Integer} index1 - the index of the first argument.
     * @param {Integer} index2 - the index of the second argument.
     *
     * @return the created <code>Function</code>.
     */
    exports.flip = def(me, 'flip', function(fn, index1, index2) {
        return function() {
            var args      = slice.call(arguments);
            var temporary = args[index1];

            args[index1] = args[index2];
            args[index2] = temporary;

            return fn.apply(this, args);
        };
    });

    /**
     * @function {static} o2.Method.wrap
     *
     * <p>Returns the first <strong>delegate</strong> passed as an argument
     * to the second <strong>wrapper</strong> followed by the arguments of
     * the returned <code>Funciton</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function wrapper(fn, a, b) { return fn(a, b) + a + b; }
     * function delegate { return a * b; }
     * var wrapped = o2.Method.wrap(delegate, wrapper);
     *
     * var result = wrapped(3, 5);
     * // result will be 23
     * </pre>
     *
     * @param {Function} delegate - the first <code>Function</code> to pass
     * as parameter.
     * @param {Function} wrapper - the wrapper <code>Function</code>.
     *
     * @return the wrapped <code>Function</code>.
     */
    //TODO: pass an optional context parameter.
    exports.wrap = def(me, 'wrap', function(delegate, wrapper) {
        return function() {
            return wrapper.apply(this,
                [delegate].concat(slice.call(arguments)));
        };
    });
}(this.o2));
/**
 * @module   collection.core
 * @requires core
 * @requires methodhelper.core
 * @requires validation.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A utility <strong>class</strong> to modify collections.</p>
 */
(function(framework, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Collection';

    /**
     * @class {static} o2.Collection
     *
     * <p>A <strong>class</strong> to modify collections.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var kMethodHelper = 'Method';
    var identity      = require(kMethodHelper, 'identity');
    var bind          = require(kMethodHelper, 'bind');

    var kValidation = 'Validation';
    var isArguments = require(kValidation, 'isArguments');
    var isArray     = require(kValidation, 'isArray');
    var isFunction  = require(kValidation, 'isFunction');
    var isObject    = require(kValidation, 'isObject');

    var slice = attr(Array.prototype, 'slice');

    var floor  = attr(Math, 'floor');
    var max    = attr(Math, 'max');
    var min    = attr(Math, 'min');
    var random = attr(Math, 'random');

    /*
     * Common Constants
     */
    var kEmpty  = '';
    var kLength = 'length';

    /**
     * @function {static} o2.Collection.clear
     *
     * <p>Removes all the elements of the <code>Object</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {a:'b'};
     * o2.Collection.clear(obj);
     * // obj is now {}
     * obj = [1,2,3];
     * o2.CollectionHelper.clear(obj);
     * // obj is now []
     * </pre>
     *
     * @param {Object} ar - the <code>Object</code> to clear.
     *
     * @return a <strong>reference</strong> to the object itself.
     */
    exports.clear = def(me, 'clear', function(ar) {
        var key = null;

        if (!ar) {
            return null;
        }

        if (isArray(ar)) {
            ar.length = 0;

            return ar;
        }

        if (!isObject(ar)) {
            return ar;
        }

        for (key in ar) {
            if (ar.hasOwnProperty(key)) {
                delete ar[key];
            }
        }

        return ar;
    });

    /**
     * @function {static} o2.Collection.copy
     *
     * <p>Creates a clone of the given <code>Object</code>, and returns it;
     * leaving the original intact.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj1 = {a:'b'};
     * var obj2 = o2.Collection.copy(obj1);
     * </pre>
     *
     * @param {Object} ar - the object to clone.
     *
     * @return the copied <code>Object</code>.
     */
    exports.copy = def(me,'copy', function(ar) {
        if (!ar) {
            return [];
        }

        if (!isObject(ar)) {
            return ar;
        }

        var theCopy = isArray(ar) ? [] : {};
        var key = null;

        if (isArray(ar)) {
            return ar.slice();
        }

        for (key in ar) {
            if (ar.hasOwnProperty(key)) {
                theCopy[key] = ar[key];
            }
        }

        return theCopy;
    });

    /**
     * @function {static} o2.Collection.clone
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.copy}.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * @see o2.Collection.copy
     */
    exports.clone = alias(me, 'clone', 'copy');

    /**
     * @function {static} o2.Collection.compact
     *
     * <p>Remove <code>null</code>, and <code>undefined</code> members from
     * the <code>Object</code>.
     * This function alters the actual <code>Object</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [null, 1, 2, undefined, '', 3, 4];
     * o2.Collection.compact(ar);
     * // ar is now [1, 2, '', 3, 4]
     * </pre>
     *
     * @param {Object} ar - the <code>Object</code> to clean.
     *
     * @return a reference to the <code>Object</code> itself.
     */
    exports.compact = def(me,'compact', function(ar) {
        var value = null;
        var i = 0;
        var len = 0;
        var key = null;

        if (!ar) {
            return null;
        }

        if (!isObject(ar)) {
            return ar;
        }

        if (isArray(ar)) {
            for (i = 0, len = ar.length; i < len; i++) {
                value = ar[i];

                if (value === null || value === UNDEFINED) {
                    ar.splice(i, 1);

                    i = i - 1;
                    len = ar.length;
                }
            }

            return ar;
        }

        for (key in ar) {
            if (ar.hasOwnProperty(key)) {
                value = ar[key];

                if (value === null || value === UNDEFINED) {
                    delete ar[key];
                }
            }
        }

        return ar;
    });

    /**
     * @function {static} o2.Collection.indexOf
     *
     * <p>Gets the index of the element in the given <code>Array</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar [1, 2, 3, 4];
     * var id = o2.Collection.indexOf(ar, 3);
     * // id is 2
     * </pre>
     *
     * @param {Object} ar - the <code>Array</code> or <code>Object</code> to
     * search.
     * @param {Object} elm - the <code>Object</code> to match.
     *
     * @return the index of the element if found, <code>-1</code> otherwise.
     */
    //TODO: check whether "def" actually returns the function.
    exports.indexOf = def(me, 'indexOf', function(ar, elm) {
        var counter = 0;
        var i       = 0;
        var key     = null;
        var len     = 0;

        if (!ar) {
            return -1;
        }

        if (!isObject(ar)) {
            return -1;
        }

        // Array.prototype.indexOf
        if (ar.indexOf) {
            return ar.indexOf(elm);
        }

        if (isArray(ar)) {
            for (i = 0, len = ar.length; i < len; i++) {
                if (elm === ar[i]) {
                    return i;
                }
            }

            return -1;
        }

        if (!isObject(ar)) {
            return -1;
        }

        for (key in ar) {
            if (ar.hasOwnProperty(key)) {
                if (ar[key] === elm) {
                    return counter;
                }

                counter++;
            }
        }

        return -1;
    });

    /*
     *
     */
    var indexOf = require(kModuleName, 'indexOf');

    /**
     * @function {static} o2.Collection.contains
     *
     * <p>An <strong>alias</strong> to <code>o2.Collection.indexOf(ar,
     * elm) &gt; -1</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 2, 3, 4];
     * var isInAr = o2.Collection.contains(ar, 3);
     * // isInAr is true
     * </pre>
     *
     * @param {Array} ar - the <code>Array</code> to search.
     * @param {Object} elm - the <code>Object</code> to match.
     *
     * @return <code>true</code> if the <code>Array</code> contains the item,
     * <code>false</code> otherwise.
     */
    exports.contains = def(me,'contains', function(ar, elm) {
        if (!ar) {
            return -1;
        }

        if (!isObject(ar)) {
            return -1;
        }

        return indexOf(ar, elm) > -1;
    });

    /*
     *
     */
    var contains = require(kModuleName, 'contains');

    /**
     * @function {static} o2.Collection.includes
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.contains}
     *
     * @see o2.Collection.contains
     */
    exports.includes = alias(me, 'includes', 'contains');

    /**
     * @function {static} o2.Collection.inArray
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.contains}
     *
     * <p><strong>Usage example:</strong></p>
     *
     * @see o2.Collection.contains
     */
    exports.inArray = alias(me, 'inArray', 'contains');

    /**
     * @function {static} o2.Collection.find
     *
     * <p>Gets the first <strong>collection</strong> item that validates
     * against the given <strong>delegator</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 2, 3, 4];
     *
     * var res = o2.Collection.find(ar, function(value){
     *      return value === 3;
     * });
     *
     * // res will be 3
     * </pre>
     *
     * @param {Object} obj - the <code>Array</code> or an iterable
     * <code>Object</code>.
     * @param delegate - Iterator <code>Function</code> in the form
     * <code>function(value, index, collection)</code>.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that acts as the <code>this</code>
     * reference in the <strong>iterator</strong>.
     *
     * @return the first truthy evaluated item; <code>null</code> if nothing
     * is found.
     */
    exports.find = def(me,'find', function(obj, delegate, context) {
        var i      = 0;
        var index  = 0;
        var key    = null;
        var len    = 0;
        var result = null;
        var value  = null;

        if (!obj) {
            return null;
        }

        if (!isObject(obj)) {
            return null;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                value = obj[i];

                if(delegate.apply(context, [value, i, obj])) {
                    result = value;

                    break;
                }
            }

            return result;
        }

        for(key in obj) {
            if(obj.hasOwnProperty(key)) {
                value = obj[key];
                if(delegate.apply(context, [value, index, obj])) {
                    result = value;

                    break;
                }

                index++;
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.detect
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.find}.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * @see o2.Collection.find
     */
    exports.detect = alias(me, 'detect', 'find');

    /**
     * @function {static} o2.Collection.forEach
     *
     * <p>Executes a delegate of the form
     * <code>fn(item, currentIndex, collection)</code> for each element
     * of the <strong>collection</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     *
     * o2.Collection.forEach(collection, function(item, index, collection) {
     *      log(item);
     * });
     * // will log:
     * 1
     * 2
     * 3
     * 4
     * </pre>
     *
     * @param {Object} obj - the <code>Array</code> or an iterable
     * <code>Object</code>.
     * @param {Function} delegate - the iterator in the form
     * <code>function(item, index, collection)</code>.
     */
    exports.forEach = def(me, 'forEach', function(obj, delegate) {
        var i   = 0;
        var key = null;
        var len = 0;

        if (!obj) {
            return;
        }

        if (!isObject(obj)) {
            return;
        }

        // Array.prototype.forEach
        if (obj.forEach) {
            obj.forEach(delegate);

            return;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                delegate(obj[i], i, obj);
            }

            return;
        }

        for (key in obj) {
            if(obj.hasOwnProperty(key)) {
                delegate(obj[key], key, obj);
            }
        }
    });

    /**
     * @function {static} o2.Collection.each
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.forEach}.</p>
     *
     * @see o2.Collection.forEach
     */
    exports.each = alias(me, 'each', 'forEach');

    /**
     * @function {static} o2.Collection.diff
     *
     * <p>Takes the difference between the current collection and a number of
     * other collections. Only items that do not remain in the rest of the
     * collections will be returned.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar1 = [1, 2, 3, 4, 5];
     * var ar2 = [2, 3, 4, 5, 6];
     * var ar3 = o2.Collection.diff(ar1, ar2);
     * // ar3 is [1, 5. 6]
     * </pre>
     *
     * @param {Arguments} ... - variable number of input arguments; each
     * argument should either be an <code>Array</code> or an iterable
     * <code>Object</code>.
     *
     * @return an <code>Array</code> of non-matching items.
     *
     * @see o2.Collection.intersect
     * @see o2.Collection.union
     */
    exports.diff = def(me,'diff', function(collection) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var rest   = null;
        var result = [];
        var value  = null;

        if (!collection) {
            return result;
        }

        if (!isObject(collection)) {
            return result;
        }

        rest = slice.call(arguments, 1);

        if (isArray(collection)) {
            for(i = 0, len = collection.length; i < len; i++) {
                value = collection[i];

                if (!contains(rest, value)) {
                    result.push(value);
                }
            }

            return result;
        }

        for (key in collection) {
            if (collection.hasOwnProperty(key)) {
                value = collection[key];

                if (!contains(rest, value)) {
                    result.push(value);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getDifference
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.diff}.</p>
     *
     * @see o2.Collection.diff
     */
    exports.getDifference = alias(me, 'getDifference', 'diff');

    /**
     * @function {static} o2.Collection.every
     *
     * <p>Check whether every element of a collection passes a truth test.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     *
     * var isAllNumeric = o2.Collection.every(collection, function(item) {
     *      return !isNaN(item);
     * });
     * // isAllNumeric will be true
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable collection.
     * @param {Function} delegate - an iterator of the form
     * <code>function(item, index, obj)</code>; where <strong>item</strong> is
     * the current collection item, <strong>index</strong> is the current index
     * and <strong>obj</strong> is the collection itself.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return <code>true</code> if <strong>delegate</strong> returns
     * <code>true</code> for every element of the collection; <code>false</code>
     * otherwise.
     */
    exports.every = def(me,'every', function(obj, delegate, context) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var result = true;

        if (!obj) {
            return true;
        }

        if (!isObject(obj)) {
            return true;
        }

        // Array.prototype.every
        if (obj.every) {
            return obj.every(delegate, context);
        }

        if (isArray(obj)) {
            for(i = 0, len = obj.length; i < len; i++) {
                result = delegate.apply(context, [obj[i], i, obj]);

                if (!result) {
                    return false;
                }
            }

            return true;
        }

        var counter = 0;

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                result = delegate.apply(context, [obj[key], counter, obj]);

                if (!result) {
                    return false;
                }

                counter++;
            }
        }

        return true;
    });

    /**
     * @function {static} o2.Collection.exclude
     *
     * <p>Excludes filtered out items from the collection. Returns a new
     * collection without alterin the initial one.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     *
     * var rest = o2.Collection.exclude(collection, function(item) {
     *      return item % 2 === 0;
     * });
     *
     * // rest will be [1, 3, 5]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - the iterator in the form
     * <code>function(context, value, index, obj)</code> where
     * <strong>value</strong> is the current element of <strong>obj</strong>
     * being iterated over, and <strong>index</strong> is the index of that
     * element.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return a new filtered object.
     *
     * @see o2.Collection.grep
     */
    exports.exclude = def(me,'exclude', function(obj, delegate, context) {
         var i       = 0;
         var key     = null;
         var len     = 0;
         var results = [];
         var value   = null;

         if (!obj) {
             return results;
         }

         if (!isObject(obj)) {
            return results;
         }

         if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                value = obj[i];
                if (!delegate.apply(context, value, i, obj)) {
                    results.push(value);
                }
            }

             return results;
         }

         var counter = 0;

         for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];
                if (!delegate.apply(context, value, counter, obj)) {
                    results.push(value);
                }

                counter++;
            }
         }

         return results;
    });

    /**
     * @function {static} o2.Collection.reject
     *
     * <p>An <strong>alıas</strong> to {@link o2.Collection.exclude}.</p>
     *
     * @see o2.Collection.reject
     */
    exports.reject = alias(me, 'reject', 'exclude');

    /**
     * @function {static} o2.Collection.extend
     *
     * <p>Merges two <code>Object</code>s or <code>Array</code>s.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var base = {lorem: 'ipsum'};
     * var child = {dolor: 'sit'};
     *
     * o2.Collection.extend(child, base);
     *
     * // child => {lorem : 'ipsum', dolor : 'sit'}
     * </pre>
     *
     * @param {Object} toObj - the <code>Object</code> to copy values to.
     * @param {Object} fromObj - the <code>Object</code> to copy values from.
     *
     * @return a <strong>reference</strong> to the modified <code>toObj</code>.
     */
    exports.extend = def(me,'extend', function(toObj, fromObj) {
         var i     = 0;
         var key   = null;
         var len   = 0;
         var value = null;

        if (!toObj) {
            return {};
        }

        if (!isObject(toObj)) {
            return toObj;
        }

        if (!isObject(fromObj)) {
            return toObj;
        }

        if (isArray(toObj)) {
            if(!isArray(fromObj)) {
                return toObj;
            }

            i = 0;
            len = fromObj.length;

            for (i = 0; i < len; i++) {
                value = fromObj[i];

                if(indexOf(toObj, value) === -1) {
                    toObj.push(value);
                }
            }

            return toObj;
        }

        for (key in fromObj) {
            if (fromObj.hasOwnProperty(key)) {
                toObj[key] = fromObj[key];
            }
        }

        return toObj;
    });

    /**
     * @function {static} o2.Collection.merge
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.extend}.</p>
     *
     * @see o2.Collection.extend
     */
    exports.merge = alias(me, 'merge', 'extend');

    /**
     * @function {static} o2.Collection.getFirst
     *
     * <p>Gets the first item in the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return the first item in the collection if exists; <code>null</code>
     * otherwise.
     */
    exports.getFirst = def(me,'getFirst', function(obj) {
        var key = null;

        if (!obj) {
            return null;
        }

        if (!isObject(obj)) {
            return null;
        }

        if (isArray(obj)) {
            return obj[0] || null;
        }

        for(key in obj) {
            if(obj.hasOwnProperty(key)) {
                return obj[key];
            }
        }

        return null;
    });

    /**
     * @function {static} o2.Collection.getFirstN
     *
     * <p>Gets the first <strong>n</strong> elements of the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5, 6];
     * var firstFew = o2.Collection.getFirstN(collection, 3);
     * // firstFew will be [1, 2, 3]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Integer} n - the number of items to retrieve.
     *
     * @return the first <strong>n</strong> elements of the collection if
     * the collection has more than <strong>n</strong> items; all of the items
     * in the collection otherwise.
     */
    exports.getFirstN = def(me,'getFirstN', function(obj, n) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var result = [];

        if (!obj) {
            return [];
        }

        if (!isObject(obj)) {
            return [];
        }

        if (isArray(obj)) {
            for (i = 0; i < len && i < n; i++) {
                result.push(obj[i]);
            }

            return result;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (i < n) {
                    result.push(obj[key]);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getFunctions
     *
     * <p>Gets all the <strong>static</strong> methods of the object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {fn1 : function(){}, fn2 : function() {}, lorem : 1};
     * var methods = o2.Collection.getFunctions(obj);
     * // methods now is [fn1, fn2]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return gets all the member <code>Function</code>s in the current
     * object.
     */
    exports.getFunctions = def(me,'getFunctions', function(obj) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var result = [];
        var value  = null;

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (!isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                value = obj[i];

                if (isFunction(value)) {
                    result.push(value);
                }
            }

            return result;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];

                if (isFunction(value)) {
                    result.push(value);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getMethods
     *
     * <p>An <strong>alias</strong> to
     * {@link o2.Collection.getFunctions}.</p>
     *
     * @see o2.Collection.getFunctions
     */
    exports.getMethods = alias(me, 'getMethods', 'getFunctions');

    /**
     * @function {static} o2.Collection.getKeys
     *
     * <p>Gets all the keys of the object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : 'ipsum', dolor : 'sit'};
     * var keys = o2.Collection.getKeys(obj);
     * // keys will be ['lorem', 'dolor']
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return an <code>Array</code> of the object's keys.
     */
    exports.getKeys = def(me,'getKeys', function(obj) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var result = [];

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                result.push([kEmpty, i].join(kEmpty));
            }

            return result;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                result.push(key);
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getLast
     *
     * <p>Gets the last item in the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var last = o2.Collection.getLast(collection);
     * // last will be 5
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return the last item in the collection if any; <code>null</code>
     * otherwise.
     */
    exports.getLast = def(me,'getLast', function(obj) {
        var key  = null;
        var last = null;
        var len  = 0;

        if (!obj) {
            return last;
        }

        if (!isObject(obj)) {
            return last;
        }

        if (isArray(obj)) {
            len = obj.length;

            return len ? obj[len - 1] : null;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                last = obj[key];
            }
        }

        return last;
    });

    /**
     * @function {static} o2.Collection.getLastN
     *
     * <p>Gets the last <strong>n</strong> items in the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var lastFew = o2.Collection.getLastN(collection, 3);
     * // lastFew will be [3, 4, 5]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Integer} n - the number of items to retrieve.
     *
     * @return the last <strong>n</strong> items if the collection has at least
     * <strong>n</strong> items; all the items of the collection otherwise.
     */
    exports.getLastN = def(me,'getLastN', function(obj, n) {
        var i      = 0;
        var key    = null;
        var len    = 0;
        var result = [];

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (!n) {
            return result;
        }

        if (isArray(obj)) {
            return slice.apply(obj, [max(obj.length - n, 0)]);
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                len++;
            }
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (i >= len - n) {
                    result.push(obj[key]);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.isEmpty
     *
     * <p>Check whether the collection contains any members.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * // This will return true:
     * o2.Collection.isEmpty([]);
     *
     * // This will also return true:
     * o2.Collection.isEmpty({});
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return <code>true</code> if the collection is empty; <code>false</code>
     * otherwise.
     */
    exports.isEmpty = def(me,'isEmpty', function (obj) {
         if (!obj) {
             return true;
         }

         if (!isObject(obj)) {
            return true;
         }

         var key = null;

         for (key in obj) {
             if (obj.hasOwnProperty(key)) {
                 return false;
             }
         }

         return true;
    });

    /*
     *
     */
    var isEmpty = require(kModuleName, 'isEmpty');

    /**
     * @function {static} o2.Collection.getMax
     *
     * <p>Gets the maximum value of the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 3, 11, 42, 4, 5, 6];
     * var meaningOfLife = o2.Collection.getMax(collection);
     * // meaningOfLife will be 42
     *
     * var meaningOfUniverse = o2.Collection.getMax(collection, function(item) {
     *      return item !== 42 ? Math.PI : 42;
     * });
     * // meaningOfUniverse will also be 42
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - (optional, defaults to
     * <code>undefined</code>) the evaluator <code>Function</code> in the
     * form <code>functon(item, index, obj)</code> where <strong>item</strong>
     * is the current collection item; <strong>index</strong> is the index
     * of that item.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return the maximum value in the collection.
     */
    exports.getMax = def(me,'getMax', function(obj, delegate, context) {
        var calculated = null;
        var index      = 0;
        var key        = null;
        var result     = -Infinity;
        var store      = null;

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (!delegate) {
            if (isArray(obj)) {
                return max.apply(Math, obj);
            }

            if (isEmpty(obj)) {
                return result;
            }

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    store = store || obj[key];

                    if (store < obj[key]) {
                        store = obj[key];
                    }
                }
            }

            return store;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                store = obj[key];

                calculated = delegate ? delegate.apply(context,
                    [store, index, obj]) : obj;

                if (calculated >= result) {
                    result = calculated;
                }

                index++;
            }
        }

        return result;
    });

    /*
     *
     */
    var getMax = require(kModuleName, 'getMax');

    /**
     * @function {static} o2.Collection.getMin
     *
     * <p>Gets the maximum value of the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [111, 311, 1211, 42, 114, 235, 126];
     * var meaningOfLife = o2.Collection.getMin(collection);
     * // meaningOfLife will be 42
     *
     * var meaningOfUniverse = o2.Collection.getMin(collection, function(item) {
     *      return item !== 42 ? 42 * Math.PI : 42;
     * });
     * // meaningOfUniverse will also be 42
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - (optional, defaults to
     * <code>undefined</code>) the evaluator <code>Function</code> in the
     * form <code>functon(item, index, obj)</code> where <strong>item</strong>
     * is the current collection item; <strong>index</strong> is the index
     * of that item.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return the minimum value in the collection.
     */
    exports.getMin = def(me,'getMin', function(obj, delegate, context) {
        var calculated = null;
        var index      = 0;
        var key        = null;
        var result     = Infinity;
        var store      = null;

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (!delegate) {
            if (isArray(obj)) {
                return min.apply(Math, obj);
            }

            if (isEmpty(obj)) {
                return result;
            }

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    store = store || obj[key];

                    if (store >= obj[key]) {
                        store = obj[key];
                    }
                }
            }

            return store;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                store = obj[key];

                calculated = delegate ? delegate.apply(context,
                    [store, index, obj]) : obj;

                if (calculated < result) {
                    result = calculated;
                }

                index++;
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getRest
     *
     * <p>Gets the elements of the collection after index n.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     *
     * var rest = o2.Collection.getRest(collection);
     * // rest will be [2, 3, 4, 5]
     *
     * rest = o2.Collection.getRest(collection, 2);
     * // rest will be [3, 4, 5];
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Integer} n - (optional; defaults to <code>1</code>) the
     * zero-based index to cut at.
     *
     * @return the items after the index <strong>n</strong> (n<sup>th</sup>
     * item included)
     */
    exports.getRest = def(me,'getRest', function(obj, n) {
        var cutAt  = 0;
        var index  = 0;
        var key    = null;
        var result = [];

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        cutAt = n === UNDEFINED ? 1 : n;

        if (isArray(obj)) {
            return slice.apply(obj, [cutAt]);
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (index >= cutAt) {
                    result.push(obj[key]);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.getSize
     *
     * <p>Gets the number of items in the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var size = o2.Collection.getSize(collection);
     * // size will be 5
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return the number of items in the collection.
     */
    exports.getSize = def(me,'getSize', function(obj) {
        var counter = 0;
        var key     = null;

        if (!obj) {
            return 0;
        }

        if (!isObject(obj)) {
            return 0;
        }

        if (obj.length !== UNDEFINED) {
            return obj.length;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                counter++;
            }
        }

        return counter;
    });

    /**
     * @function {static} o2.Collection.getCount
     *
     * <p>An <strong>alias</strong> to {o2.Collection.getSize}</p>
     *
     * @see o2.Collection.getSize
     */
    exports.getCount = alias(me, 'getCount', 'getSize');

    /**
     * @function {static} o2.Collection.getLength
     *
     * <p>An <strong>alias</strong> to {o2.Collection.getSize}</p>
     *
     * @see o2.Collection.getSize
     */
    exports.getLength = alias(me, 'getLength', 'getSize');

    /**
     * @function {static} o2.Collection.getSortedIndex
     *
     * <p>Gets an index to insert the item at a sorted <code>Array</code>,
     * so that is not needed to be resorted.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 2, 24, 30, 44, 66, 100];
     * var idx = o2.Collection.getSortedIndex(42);
     * // idx will be 4
     * </pre>
     *
     * @param {Array} array - an <code>Array</code> to work on.
     * @param {Object} item - the item to insert.
     * @param {Function} delegate - (optional, defaults to identity function),
     * a <code>Function</code> that takes the current item as a parameter and
     * returns an <code>Integer</code> value.
     *
     * @return <code>-1</code> if the collection is not an <code>Array</code>;
     * the computed sorted index otherwise.
     */
    exports.getSortedIndex = def(me,'getSortedIndex', function(array, item,
                delegate) {
        if (!isArray(array)) {
            return -1;
        }

        var iterator = delegate || identity;

        var high = array.length;
        var low  = 0;
        var mid  = 0;

        // Binary search:
        while (low < high) {
            mid = (low + high) >> 1;

            if (iterator(array[mid]) < iterator(item)) {
                low = mid +1;
            } else {
                high = mid;
            }
        }

        return low;
    });

    /**
     * @function {static} o2.Collection.getValues
     *
     * <p>Gets the value of an <code>Object</code> that has
     * <code>{key1 : value1, key2 : value2 ... }</code> kind of layout.</p>
     *
     * <p>If an <code>Array</code> is passed, it makes a shallow copy of that
     * array and returns it.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = {lorem : 1, ipsum : 2, dolor : 3};
     * var values = o2.Collection.getValues(collection);
     * // values will be ['lorem', 'ipsum', 'dolor']
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return the values in the collection.
     */
    exports.getValues = def(me,'getValues', function(obj) {
        var key    = null;
        var result = [];

        if (!obj) {
            return null;
        }

        if (!isObject(obj)) {
            return null;
        }

        if (isArray(obj)) {
            return obj.slice();
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                result.push(obj[key]);
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.grep
     *
     * <p>Filters the items of a collections using an evaluator delegate
     * and returns the filtered result set.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5, 6];
     * var evens = o2.Collection.grep(collection, function(item) {
     *      return item % 2 === 0;
     * });
     * // evens will be [2, 4, 6]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - the filter <code>Function</code> in the form
     * <code>[Boolean] function(item)</code>.
     *
     * @return the filtered collection.
     */
    exports.grep = def(me,'grep', function(obj, delegate) {
        var i      = 0;
        var item   = null;
        var key    = null;
        var len    = 0;
        var result = [];

        if (!obj) {
            return result;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                item = obj[i];

                if(delegate(item)) {
                    result.push(item);
                }
            }

            return result;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                item = obj[key];

                if(delegate(item)) {
                    result.push(item);
                }
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.select
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.grep}.</p>
     *
     * @see o2.Collection.grep
     */
    exports.select = alias(me, 'select', 'grep');

    /**
     * @function {static} o2.Collection.filter
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.grep}.</p>
     *
     * @see o2.Collection.grep
     */
    exports.filter = alias(me, 'filter', 'grep');

    /**
     * @function {static} o2.Collection.group
     *
     * <p>Groups the items in the collection by a key or an evaluator
     * <code>Function</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [
     *      {lorem : 1},
     *      {lorem : 2},
     *      {lorem : 3},
     *      {ipsum : 1},
     *      {ipsum : 2}
     * ];
     *
     * var lorems = o2.Collection.group(collection, 'lorem')
     * //lorems will be {lorem : [1, 2, 3]}
     *
     * var grouped = o2.Collection.group(collection, function(item) {
     *      for(key in item) {
     *          if (item.hasOwnProperty(key)) {
     *              return key;
     *          }
     *      }
     * });
     * // grouped will be {lorem : [1, 2, 3], ipsum : [1, 2]}
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - A <code>String</code> key that the items
     * in the collection share, or a <code>Function</code> in the form
     * <code>[key] function(item, index)</code> where <strong>item</strong>
     * is the current collection item, <strong>index</strong> if that item's
     * index; and the return value is a key to group.
     *
     * @return an <code>Array</code> of grouped items.
     *
     * @see o2.Collection.pluck
     */
    exports.group = def(me,'group', function(obj, delegate) {
        var i      = 0;
        var key    = null;
        var ky     = null;
        var len    = 0;
        var result = {};
        var value  = null;

        var iterator = isFunction(delegate) ? delegate :
            function(obj) { return obj[delegate]; };

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                value = obj[i];
                ky = iterator(value, i);

                if (!result[ky]) {
                    result[ky] = [];
                }

                result[ky].push(value);
            }

            return result;
         }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];
                ky = iterator(value, i);

                if (!result[ky]) {
                    result[ky] = [];
                }

                result[ky].push(value);

                i++;
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.toArray
     *
     * <p>Safely converts the <code>Object</code> in question into anarray.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : 1, ipsum : 2};
     * var ar = o2.Collection.toArray(obj);
     * // ar will be [1, 2]
     * </pre>
     *
     * @param {Object} obj - Any <code>Object</code> to convert to an
     * <code>Array</code>. If <strong>obj</strong> is, in deed, an
     * <code>Array</code>, then a shallow copy of it is returned without
     * altering the original <code>Object</code>.
     *
     * @return the generated <code>Array</code>.
     *
     * @see o2.Object.toArray
     */
    exports.toArray = def(me,'toArray', function(obj) {
        var key    = null;
        var result = [];

        if (!obj) {
            return result;
        }

        if (obj.toArray) {
            return obj.toArray();
        }

        if (isArray(obj)) {
            return obj.slice();
        }

        if (isArguments(obj)) {
            return slice.apply(obj);
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                result.push(obj[key]);
            }
        }

        return result;
    });

    /*
     *
     */
    var toArray = require(kModuleName, 'toArray');

    /**
     * @function {static} o2.Collection.map
     *
     * <p>Calls a <code>Function</code> for each member of the collection,
     * passing the current item as a parameter. Returns an <code>Array</code>
     * containing the results of each call.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var squared = o2.Collection.map(collection, function(item) {
     *      return item*item;
     * });
     * // squared will be [1, 4, 9, 25]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - A mapper in the form
     * <code>function(item, index, collection)</code> where
     * <strong>item</strong> is the current collection element,
     * <strong>index</strong> is its index, and <strong>collection</strong> is
     * the current object <strong>obj</strong>.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return a mapped <code>Array</code>.
     *
     * @see o2.Collection.invoke
     */
    exports.map = def(me,'map', function(obj, delegate, context) {
        var i       = 0;
        var key     = null;
        var len     = 0;
        var results = [];
        var value   = null;

        if (!obj) {
            return results;
        }

        if (!isObject(obj)) {
            return results;
        }

        // Array.prototype.map
        if (obj.map) {
            return obj.map(delegate, context);
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                value = obj[i];

                results.push(
                    delegate.apply(context, [value, i, obj])
                );
            }

            return results;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];

                results.push(
                    delegate.apply(context, [value, i, obj])
                );

                i++;
            }
        }

        return results;
    });

    /*
     *
     */
    var map = require(kModuleName, 'map');

    /**
     * @function {static} o2.Collection.unique
     *
     * <p>Removes duplicate entries from the collection. Returns a new
     * <code>Array</code>; does not alter the original collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 2, 3, 2, 4, 2, 42];
     * var uniq = o2.Collection.unique(ar);
     * // uniq will be [1, 2, 3, 4, 42]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - (optional,
     * defaults to <code>undefined</code>) a mapper in the form
     * <code>function(item, index, collection)</code> where
     * <strong>item</strong> is the current collection element,
     * <strong>index</strong> is its index, and <strong>collection</strong> is
     * the current object <strong>obj</strong>.
     *
     * @return a copy of the collection containing unique items.
     */
    exports.unique = def(me,'unique', function(array, delegate) {
        var ar     = null;
        var cache  = [];
        var elm    = null;
        var i      = 0;
        var len    = 0;
        var result = [];

        if (!array) {
            return result;
        }

        if (isArray(array)) {
            ar = array.slice().sort();
        } else {
            ar = toArray(array).sort();
        }

        if (delegate) {
            ar = delegate ? map(array, delegate) : ar;
        }

        for (i = 0, len = ar.length; i < len; i++) {
            elm = ar[i];

            if (i === 0 || cache[cache.length-1] !== elm) {
                cache.push(elm);
                result.push(elm);
            }
        }

        return result;
    });

    /*
     *
     */
    var unique = require(kModuleName, 'unique');

    /**
     * @function {static} o2.Collection.intersect
     *
     * <p>Returns an <code>Array</code> of items that are common in all of
     * the collections passed in as parameters.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar1 = [1, 2, 3, 4, 5];
     * var ar2 = [2, 3, 4, 5, 6];
     * var ar3 = o2.Collection.intersect(ar1, ar2);
     * // ar3 is [2, 3, 4, 5]
     * </pre>
     *
     * @param {...} varargin - the objects to intersect as input arguments.
     *
     * @return an <code>Array</code> containing only the values that are common
     * in all of the collections given.
     *
     * @see o2.Collection.diff
     * @see o2.Collection.union
     */
    exports.intersect = def(me,'intersect', function(ar) {
        var i      = 0;
        var item   = null;
        var j      = 0;
        var jlen   = 0;
        var len    = 0;
        var peer   = null;
        var peers  = slice.apply(arguments, [1]);
        var result = unique(ar);

        if (result.length === 0) {
            return [];
        }

        for (i = 0, len = peers.length; i < len; i++) {
            peer = unique(peers[i]);

            if (!isObject(peer)) {
                return [];
            }

            for (j = 0, jlen = result.length; j < jlen; j++) {
                item = result[j];

                if (!contains(peer, item)) {
                    result.splice(j, 1);
                }

                if (!result.length) {
                    return [];
                }
            }
        }

        return result;
    });


    /*
     * @param {varargin} -
     */

    /**
     * @function {static} o2.Collection.invoke
     *
     * <p>Calls the delegate <code>Function</code> with an optional set
     * of parametrs for each item in the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * function log(item) { console.log(item); }
     * o2.Collection.invoke(collection, log);
     * // will log:
     * // 1
     * // 2
     * // 3
     * // 4
     * // 5
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Object} delegate - the delegate to invoke in the form
     * delegate(item, ...varargin). If it's a <code>String</code> then
     * <code>item[delegate]</code> will be used instead.
     * @param {varargin} ... - A set of parameters to pass after the delegate.
     *
     * @see o2.Collection.map
     */
    exports.invoke = def(me,'invoke', function(obj, delegate) {
        var i       = 0;
        var invoker = null;
        var item    = null;
        var key     = null;
        var len     = 0;

        if (arguments.length < 2) {
            return;
        }

        if (!obj) {
            return;
        }

        if (!isObject(obj)) {
            return;
        }

        var args = slice.apply(arguments, [2]);

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                item = obj[i];
                invoker = isFunction(delegate) ? delegate : item[delegate];
                invoker.apply(item, args);
            }

            return;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                item = obj[key];
                invoker = isFunction(delegate) ? delegate : item[delegate];
                invoker.apply(item, args);
            }
        }
    });

    /**
     * @function {static} o2.Collection.lastIndexOf
     *
     * <p>Returns the last index of the given item.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 4, 2, 42, 2, 4, 42, 21, 12, 1];
     * var idx = o2.Collection.lastIndexOf(collection, 42);
     * // idx will be 7
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Object} item - the item to check the index of.
     *
     * @return the last index of the item if exists, <code>-1</code> otherwise.
     */
    exports.lastIndexOf = def(me,'lastIndexOf', function(obj, item) {
        var i = 0;

        if (!obj) {
            return -1;
        }

        if (!isObject(obj)) {
            return -1;
        }

        // Array.prototype.lastIndexOf
        if (obj.lastIndexOf) {
            return obj.lastIndexOf(item);
        }

        var collection = isArray(obj) ? obj : toArray(obj);

        for (i = collection.length - 1; i >= 0; i--) {
            if (collection[i] === item) {
                return i;
            }
        }

        return -1;
    });

    /**
     * @function {static} o2.Collection.pluck
     *
     * <p>Hard to explain in words. Let us demonstrate by an example:</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [
     *      {key1 : {lorem1 : 'ipsum1'}, key2 : {dolor1 : 'amet1'}},
     *      {key1 : {lorem2 : 'ipsum2'}, key2 : {dolor2 : 'amet2'}},
     *      {key1 : {lorem3 : 'ipsum3'}, key2 : {dolor3 : 'amet3'}}
     * ];
     *
     * // Will return:
     * // [
     * //    {dolor1 : 'amet1'},
     * //    {dolor2 : 'amet2'},
     * //    {dolor3 : 'amet3'}
     * // ]
     * o2.Collection.pluck(collection, 'key2');
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Object} key - the key to pluck.
     *
     * @return a plucked subset.
     *
     * @see o2.Collection.group
     */
    exports.pluck = def(me,'pluck', function(obj, key) {
        var i      = 0;
        var k      = null;
        var len    = 0;
        var result = [];

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                result.push(obj[i][key]);
            }

            return result;
        }

        for (k in obj) {
            if (obj.hasOwnProperty(k)) {
                result.push(obj[k][key]);
            }
        }

        return result;
    });

    /*
     *
     */
    var pluck = require(kModuleName, 'pluck');

    /**
     * @function {static} o2.Collection.reduce
     *
     * <p>Works similar to the <strong>reduce</strong> part of the
     * <a href="http://www.mongodb.org/display/DOCS/MapReduce">Map Reduce</a>
     * algorithm.</p>
     * <p>Reduces a <strong>collection</strong> into a single value by
     * applying a <strong>delegate</strong> of the form
     * <code>function(cache, value, index, collection)</code> where
     * <strong>cache</strong> is the accumulator, <strong>value</strong>
     * is the iterated item, <strong>index</strong> is the item's index,
     * and <strong>collection</strong> is the collection we are working on.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var reduced = o2.Collection.reduce(collection, function(store, value) {
     *      return store + value;
     * }, 0);
     * // reduced will be 15
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Functon} delegate - the reducer <code>Function</code>.
     * @param {Object} store - the initial seed.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return a single reduced value.
     */
    exports.reduce = def(me, 'reduce', function(obj, delegate, store, context) {
        var cache    = store;
        var i        = 0;
        var index    = 0;
        var isSeeded = arguments.length > 2;
        var iterator = delegate;
        var key      = null;
        var len      = 0;
        var value    = null;

        if (!obj) {
            return null;
        }

        if (!isObject(obj)) {
            return null;
        }

        // Array.prototype.reduce
        if (obj.reduce) {
            if (context) {
                iterator = bind(context, delegate);
            }

            return isSeeded ?
                obj.reduce(iterator, store) :
                obj.reduce(iterator);
        }

        if (isArray(obj)) {
            for(i = 0, len = obj.length; i < len; i++) {
                value = obj[i];

                if (!isSeeded) {
                    cache = value;
                    isSeeded = true;
                } else {
                    cache = iterator.apply(context,
                        [cache, value, i, obj]
                    );
                }
            }

            if (!isSeeded) {
                //TODO: const.
                throw 'reduce: empty collection with no seed';
            }

            return cache;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];

                if (!isSeeded) {
                    cache = value;
                    isSeeded = true;
                } else {
                    cache = iterator.apply(context,
                        [cache, value, index, obj]
                    );
                }

                index++;
            }
        }

        if (!isSeeded) {
            //TODO: const.
            throw 'redude: empty collection with no seed';
        }

        return cache;
    });

    /*
     *
     */
    var reduce = require(kModuleName, 'reduce');

    /**
     * @function {static} o2.Collection.fold
     *
     * <p>An <strong>alias</strong> to {o2.Collection.reduce}.</p>
     *
     * @see o2.Collection.reduce
     */
    //TODO: check that "alias" actually returns a function instance.
    exports.fold = alias(me, 'fold', 'reduce');

    /**
     * @function {static} o2.Collection.reduceRight
     *
     * <p>Works similar to {@link o2.Collection.fold}, but goes from
     * the end of the collection to the beginning of the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var reduced = o2.Collection.reduceRight(collection, function(
     *              store, value) {
     *      return store + value;
     * }, 0);
     * // reduced will be 15
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Functon} delegate - the reducer <code>Functon</code>.
     * @param {Object} store - the initial seed.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return a single reduced value.
     *
     * @see o2.Collection.reduce
     */
    exports.reduceRight = def(me,'reduceRight', function(obj, delegate, store,
                context) {
        var isSeeded = arguments.length > 2;
        var iterator = delegate;

        if (!isObject(obj)) {
            return null;
        }

        if (!obj) {
            return null;
        }

        if (context) {
            iterator = bind(context, delegate);
        }

        // Array.prototype.reduceRight
        if (obj.reduceRight) {
            return isSeeded ?
                obj.reduceRight(iterator, store) :
                obj.reduceRight(iterator);
        }

        var reversed = toArray(obj).reverse();

        return isSeeded ? reduce(reversed, iterator, store, context) :
            reduce(reversed, iterator);
    });

    /**
     * @function {static} o2.Collection.foldR
     *
     * <p>An <strong>alias</strong> to
     * {@link o2.Collection.reduceRight}.</p>
     *
     * @see o2.Collection.reduceRight
     */
    exports.foldR = alias(me, 'foldR', 'reduceRight');

    /**
     * @function {static} o2.Collection.removeElement
     *
     * <p>Removes all ocurences of the element from the collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5]
     * var result = o2.Collection.removeElement(collection, 3);
     * // result will be [1, 2, 4, 5]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Object} elm - the element to remove.
     */
    exports.removeElement = def(me, 'removeElement', function(obj, elm) {
        var i    = 0;
        var item = null;
        var key  = null;
        var len  = 0;

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                item = obj[i];

                if(item === elm) {
                    obj.splice(i, 1);
                    i--;
                    len = obj.length;
                }
            }

            return;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                item = obj[key];

                if(item === elm) {
                    delete obj[key];
                }
            }
        }
    });

    /**
     * @function {static} o2.Collection.removeElementByValue
     *
     * <p>Removes and element from the collection if it has a property named
     * <strong>name</strong> with a value <strong>value</strong>.</p>
     *
     * <p>This method works by reference, and alters the given collection.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = { lorem : 1, ipsum : 2, sit : 3}
     * o2.Collection.removeElementByValue(collection, 'sit', 3);
     * // collection will be {lorem : 1, ipsum : 2}
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {String} name - the name of the property.
     * @param {Object} value - the value to compare.
     *
     * @return a reference to <strong>obj</strong> itself.
     */
    exports.removeElementByValue = def(me, 'removeElementByValue', function(obj,
                name, value) {
        var i    = 0;
        var item = null;
        var key  = null;
        var len  = 0;

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                item = obj[i];

                if(item[name] === value) {
                    obj.splice(i, 1);
                    i--;
                    len = obj.length;
                }
            }

            return obj;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                item = obj[key];

                if(item[name] === value) {
                    delete obj[key];
                }
            }
        }

        return obj;
    });

    /**
     * @function {static} o2.Collection.shuffle
     *
     * <p>Randomizes the collection. Does not alter the original collection,
     * just returns a randomized copy.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 2, 3, 4, 5];
     * var shuffled = o2.Collection.shuffle(ar);
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return an <code>Array</code> that's a shuffled copy of the initial
     * collection.
     */
    exports.shuffle = def(me,'shuffle', function(obj) {
        var collection = null;
        var i          = 0;
        var index      = null;
        var len        = 0;
        var result     = [];
        var value      = null;

        if (!obj) {
            return result;
        }

        if (!isObject(obj)) {
            return result;
        }

        if (!isArray(obj)) {
            collection = toArray(obj);
        } else {
            collection = obj;
        }

        for (i = 0, len = collection.length; i < len; i++) {
            value = collection[i];

            if (i === 0) {
                result.push(value);
            } else {
                index = floor(random() * (i + 1));
                result[i] = result[index];
                result[index] = value;
            }
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.sort
     *
     * <p>Sorts the collection.</p>
     *
     * <p>Contrary to <code>Array.prototype.sort</code>, this function does not
     * sort the collection in place, and therefore it  does not alter the
     * initial object's contents.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 5, 4, 7];
     * var sorted = o2.Collection.sort(collection, function(item) {
     *      return item;
     * });
     * // sorted will be [1, 2, 4, 5, 7]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param {Function} delegate - (Optional, defaults to an identity function
     * that returns the original item) the sorter in the form
     * <code>function(value, index, collection)</code> where
     * <strong>value</strong> is the current item, <strong>index</strong> is
     * that item's index; and <strong>collection</strong> is
     * <strong>obj</strong>; this delegate should return an <code>Integer</code>
     * value.
     * <code>function(item, index, collection)</code>.
     * @param {Object} context - (optional, defaults to <code>undefined</code>)
     * the context that the <strong>delegate</strong>
     * uses as the <code>this</code> reference.
     *
     * @return a sorted copy of the initial collection.
     */
    exports.sort = def(me,'sort', function(obj, delegate, context) {
        var i     = 0;
        var key   = null;
        var len   = 0;
        var meta  = [];
        var value = null;

        var iterator = delegate || identity;

        if (!obj) {
            return meta;
        }

        if (!isObject(obj)) {
            return meta;
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                meta.push({
                    value : value,
                    order : iterator.apply(context, value, i, obj)
                });
            }
        } else {
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    meta.push({
                        value : obj[key],
                        order : iterator.apply(context, value, i, obj)
                    });

                    i++;
                }
            }
        }

        meta.sort(function(left, right) {
            var l = left.order;
            var r = right.order;

            if (l < r) {
                return -1;
            }

            if (l > r) {
                return 1;
            }

            return 0;
        });

        var result = [];

        for(i = 0, len = meta.length; i < len; i++) {
            result.push(meta[i].value);
        }

        return result;
    });

    /**
     * @function {static} o2.Collection.some
     *
     * <p>Checks whether at least one element of the given
     * <strong>collection</strong> satisfies a condition given with
     * the <strong>delegate</strong>.</p>
     * <p>The <strong>delegate</strong> is in the form
     * <code>function(context, value, index, collection)</code>, iterates
     * through the items of the <strong>collection</strong> and returns
     * a <strong>boolean</strong> value. When this <strong>delegate</strong>
     * returns <code>true</code> in any iteratioin, <strong>some(...)</strong>
     * also returns true; it returns <code>false</code> otherwise.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var collection = [1, 2, 3, 4, 5];
     * var isSome = o2.Collection.some(collection, function(item) {
     *      return item > 4;
     * });
     * // isSome will be true
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     * @param delegate - Iterator <code>Function</code> in the form
     * <code>function(value, index, collection)</code>.
     * @param {Object} context - The context to regard as <code>this</code>
     * reference.
     *
     * @return <code>true</code> if the <strong>iterator</strong> returns
     * <code>true</code> for at least one element; returns <code>false</code>
     * otherwise.
     */
    exports.some = def(me,'some', function(obj, delegate, context) {
        var i        = 0;
        var index    = 0;
        var iterator = delegate || identity;
        var key      = null;
        var len      = 0;
        var result   = false;

        if (!obj) {
            return false;
        }

        // Array.prototype.some
        if (obj.some) {
            return obj.some(iterator, context);
        }

        if (isArray(obj)) {
            for (i = 0, len = obj.length; i < len; i++) {
                if (result) {
                    break;
                }

                result = iterator.apply(context, [obj[i], i, obj]);
            }

            return !!result;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (result) {
                    break;
                }

                result = iterator.apply(context,
                    [obj[key], index, obj]);

                index++;
            }
        }

        return !!result;
    });

    /**
     * @function {static} o2.Collection.any
     *
     * <p>An <strong>alias</strong> to {@link o2.Collection.some}.</p>
     *
     * @see o2.Collection.some
     */
    exports.any = alias(me, 'any', 'some');

    /**
     * @function {static} o2.Collection.flatten
     *
     * <p>Shallow flattens an <code>Array</code>.</p>
     * <p>Does not alter the original object, returns a new flattened object
     * instead.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [[1, 2], [3, 4], 5]
     * var flattened = o2.Object.flatten(ar);
     * // flattened is [1, 2, 3, 4, 5]
     * </pre>
     *
     * @param {Object} obj - an <code>Array</code> or an iterable
     * <code>Object</code> to work on.
     *
     * @return the flattened collection.
     */
    exports.flatten = def(me, 'flatten', function(obj) {
        var i     = 0;
        var key   = null;
        var len   = 0;
        var store = [];
        var value = null;

        if (!obj) {
            return store;
        }

        if (!isObject(obj)) {
            return store;
        }

        if (isArray(obj)) {
            for(i = 0, len = obj.length; i < len; i++) {
                value = obj[key];

                if (isArray(value)) {
                    store.concat(value);
                } else {
                    store.push(value);
                }
            }

            return store;
        }

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                value = obj[key];

                if (isArray(value)) {
                    store.concat(value);
                } else {
                    store.push(value);
                }
            }
        }

        return store;
    });

    /*
     *
     */
    var flatten = require(kModuleName, 'flatten');

    /**
     * @function {static} o2.Collection.union
     *
     * <p>Merges several collections into a single <code>Array</code></p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var union = o2.Collection.union([1, 2], [2, 3], [3, 4], [5]);
     * // union will be [1, 2, 3, 4, 5]
     * </pre>
     *
     * @param {...} varargin - the collections to merge as input parameters.
     *
     * @return the merged <code>Array</code>.
     *
     * @see o2.Collection.diff
     * @see o2.Collection.istersect
     */
    exports.union = def(me,'union', function() {
        return unique(flatten(arguments));
    });

    /**
     * @function {static} o2.Collection.zip
     *
     * <p>Takes a set of <code>Array</code>s as parameters and brings together
     * the elements that have the same index.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar1 = [1,2,3];
     * var ar2 = ['a', 'b', 'c', 'd'];
     * var ar3 = [true, false];
     *
     * // returns:
     * // [
     * //       [1, 'a', true],
     * //       [2. 'b', false],
     * //       [3, 'c'],
     * //       ['d']
     * // ]
     * zip(ar1, ar2, ar3);
     * </pre>
     *
     * @param {...} varargin - the <code>Array</code>s to zip as a variable
     * number of input arguments.
     *
     * @return a zipped <code>Array</code>.
     */
    exports.zip = def(me,'zip', function() {
        var args    = slice.call(arguments);
        var i       = 0;
        var length  = getMax(pluck(args, kLength));
        var results = [];

        for (i = 0; i < length; i++) {
            results[i] = pluck(args, [kEmpty, i].join(kEmpty));
        }

        return results;
    });
}(this.o2, this));
/**
 * @module convert
 *
 * <p>not implemented.</p>
 */
(function(/*framework, window, undefined*/) {
    'use strict';

    // var _         = framework.protecteds;
    // var alias     = _.alias;
    // var attr      = _.getAttr;
    // var construct = _.construct;
    // var create    = _.create;
    // var def       = _.define;
    // var obj       = _.getObject;
    // var proto     = _.proto;
    // var require   = _.require;

    // NOTE: this object will NOT be developed until all the unit tests are done.
    // var me = framework;
    // me.Convert = {
    //     toArray : function(obj, isDeep) {},
    //     toUppercase : function(str) {},
    //     /* whatever */
    // };
}(/*this.o2, this*/));
/**
 * @module   cookie.core
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <strong>Cookie</strong> helper.</p>
 */
(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Cookie';

    /**
     * @class {static} o2.Cookie
     *
     * <p>A <strong>cookie</strong> helper class.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var concat = require('String', 'concat');

    var escape = attr(window, 'escape');

    /*
     * Common Constants
     */
    var kBlank         = ' ';
    var kDelimeter     = ';';
    var kDomain        = '; domain=';
    var kEmpty         = '';
    var kEquals        = '=';
    var kExpires       = '; expires=';
    var kNextCharIndex = 1;
    var kPath          = '; path=';
    var kRootPath      = '/';
    var kSecure        = '; secure';

    /**
     * @function {static} o2.Cookie.read
     *
     * <p>Reads the value of the <strong>cookie</strong> with the given
     * name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var value = o2.Cookie.read('cookieName');
     * </pre>
     *
     * @param {String} name - the name of the <strong>cookie</strong> to
     * read.
     *
     * @return the value of the <strong>cookie</strong>; or <code>null</code>
     * if the <strong>cookie</strong> is not found.
     */
    exports.read = def(me, 'read', function(name) {
        var ca = document.cookie.split(kDelimeter);
        var eq = concat(decodeURIComponent(name), kEmpty);
        var i  = 0;

        for (i = 0; i < ca.length; i++) {
            var c = ca[i];

            while (c.charAt(0) === kBlank) {
                c = c.substring(kNextCharIndex, c.length);
            }

            if (c.indexOf(eq) === 0) {
                return c.substring(eq.length + kNextCharIndex, c.length);
            }
        }

        return null;
    });

    /**
     * @function {static} o2.Cookie.save
     *
     * <p>Saves a <strong>cookie</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Cookie.save('testCookie', 'testValue', 10);
     * </pre>
     *
     * @param {String} name - the name of the <strong>cookie</strong>.
     * @param {String} value - the value of the <strong>cookie</strong>.
     * @param {Integer} days - (optional) how many days should the
     * <strong>cookie</strong> persist.
     * @param {String} path - (optional) the path of the cookie.
     * @param {String} domain - (optional) the domain of the cookie.
     * @param {Boolean} isSecure - (optional) will the cookie be used for a
     * secure connection.
     */
    exports.save = def(me, 'save', function(name, value, days, path, domain,
                isSecure) {
        var d  = new Date();
        var ex = kEmpty;

        if (days) {
            d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
            ex = concat(kExpires , d.toGMTString());
        } else {
            ex = kEmpty;
        }

        var cookiePath = path || kRootPath;

        // Do not use encodeURICompoent for paths as it replaces / with %2F
        var cookieString = concat(
            encodeURIComponent(name), kEquals,
            encodeURIComponent(value), ex, kPath,
            escape(cookiePath)
        );

        if (domain) {
            cookieString = concat(cookieString, kDomain, escape(domain));
        }

        if (isSecure) {
            cookieString = concat(cookieString, kSecure);
        }

        document.cookie = cookieString;
    });

    /*
     *
     */
    var save = require(kModuleName, 'save');

    /**
     * @function {static} o2.Cookie.remove
     *
     * <p>Removes a <strong>cookie</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Cookie.remove('testCookie');
     * </pre>
     *
     * @param {String} name - the name of the <strong>cookie</strong> to
     * remove.
     * @param {String} path - (optional) the path of the cookie.
     * @param {String} domain - (optional) the domain of the cookie.
     * @param {Boolean} isSecure - (optional) will the cookie be used for a
     * secure connection.
     */
    exports.remove = def(me, 'remove', function(name, path, domain) {
        save(name, kEmpty, -1, path || kRootPath, domain || null);
    });

    // removeAll makes things too complicated if path, and domain
    // come into play... Will not implement it.
    // removeAll : function(){ }
}(this.o2, this, this.document));
/**
 * @module   date.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <code>Date</code> helper module.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Date';

    /**
     * @class {static} o2.Date
     *
     * <p>A date/time utilities class.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $      = require('$');
    var now    = require('now');

    var format = require('String', 'format');

    var math  = Math;
    var floor = attr(math, 'floor');
    var abs   = attr(math, 'abs');

    /*
     * i18n
     */

    var kAgo              = 'ago';
    var kCenturies        = 'centuries';
    var kDays             = 'days';
    var kFromNow          = 'from now';
    var kHours            = 'hours';
    var kJustNow          = 'just now';
    var kLastCentury      = 'last century';
    var kLastMonth        = 'last month';
    var kLastWeek         = 'last week';
    var kLastYear         = 'last year';
    var kMinutes          = 'minutes';
    var kMonths           = 'months';
    var kNextCentury      = 'next century';
    var kNextMonth        = 'next month';
    var kNextWeek         = 'next week';
    var kNextYear         = 'next year';
    var kOneHourAgo       = 'an hour ago';
    var kOneHourFromNow   = 'an hour from now';
    var kOneMinuteAgo     = 'a minute ago';
    var kOneMinuteFromNow = 'a minute from now';
    var kSeconds          = 'seconds';
    var kTomorrow         = 'tomorrow';
    var kWeeks            = 'weeks';
    var kYears            = 'years';
    var kYesterday        = 'yesterday';

    var kTokenizedText = '{0} {1} {2}';

    /*
     * Time Formats
     */
    var timeFormats = [
        [60         , kSeconds     , 1                ],
        [120        , kOneMinuteAgo, kOneMinuteFromNow],
        [3600       , kMinutes     , 60               ],
        [7200       , kOneHourAgo  , kOneHourFromNow  ],
        [86400      , kHours       , 3600             ],
        [172800     , kYesterday   , kTomorrow        ],
        [604800     , kDays        , 86400            ],
        [1209600    , kLastWeek    , kNextWeek        ],
        [2419200    , kWeeks       , 604800           ],
        [4838400    , kLastMonth   , kNextMonth       ],
        [29030400   , kMonths      , 2419200          ],
        [58060800   , kLastYear    , kNextYear        ],
        [2903040000 , kYears       , 29030400         ],
        [5806080000 , kLastCentury , kNextCentury     ],
        [58060800000, kCenturies   , 2903040000       ]
    ];

    /*
     * Common Constants
     */
    var kString = 'string';

    /**
     * @function {static} o2.Date.getPrettyDate
     *
     * <p>Prints a human-readable time string, by looking at the difference
     * between two timestamps.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var timeString = o2.Date.getPrettyDate((new Date()).getTime());
     * // timeString is 'just now'
     * </pre>
     *
     * @param {Integer} time - the offset time in milliseconds.
     * @param {Integer} currTime - (Optional, default to NOW) the base time
     * in milliseconds.
     */
    exports.getPrettyDate = def(me, 'getPrettyDate', function(time, currTime) {
        var currentTime = currTime || $.now();
        var listChoice  = 1;
        var seconds     = (new Date(currentTime) - new Date(time)) / 1000;
        var token       = kAgo;

        if (seconds < 0) {
            seconds = abs(seconds);
            token = kFromNow;
            listChoice = 2;
        }

        var i = 0;
        var currentFormat = timeFormats[i];

        while (currentFormat) {
            if (seconds < 5) {
                return kJustNow;
            }

            if (seconds < currentFormat[0]) {
                if (typeof currentFormat[2] === kString) {
                    return currentFormat[listChoice];
                }

                return format(kTokenizedText,
                    floor(seconds / currentFormat[2]),
                    currentFormat[1],
                    token
                );
            }

            currentFormat = timeFormats[++i];
        }

        return time;
    });

    /**
     * @function {static} o2.Date.getTime
     *
     * <p>An alias to {@link o2.now}.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var linuxTime = o2.Date.getTime();
     * </pre>
     *
     * @see o2.now
     */
    exports.getTime = def(me, 'getTime', function() {
        return now();
    });

    /**
     * @function {static} o2.Date.now
     *
     * <p>An alias to {@link o2.Date.getTime}.</p>
     *
     * @see o2.Date.getTime
     */
    exports.now = alias(me, 'now', 'getTime');
}(this.o2));
/**
 * @module   debugger.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A debugging helper.</p>
 */
(function(framework, window, document, UNDEFINED) {
   'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Debugger';

    /**
     * @class {static} o2.Debugger
     *
     * <p>A static object for debugging purposes.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * // note: initalize Debugger only once,
     * // possibly on window.load or dom content ready
     * o2.Debugger.init(someDomNode, true);
     *
     * //then inside your code use this syntax.
     * o2.Debugger.println('stuff to debug');
     * </pre>
     *
     * @see o2.Unit
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $    = require('$');
    var nill = require('nill');

    var createElement = attr(document, 'createElement');

    var console = window.console || {};
    var error   = console.error  || nill;
    var info    = console.info   || nill;
    var log     = console.log    || nill;
    var warn    = console.warn   || nill;

    /*
     * Configuration
     */
    var isUsingConsole = true;
    var outputElement  = null;


    /*
     * State
     */
    var isInitialized = false;

    /*
     * Common Class Names
     */
    var kError = 'error';
    var kFail  = 'fail';
    var kInfo  = 'info';
    var kLog   = 'log';
    var kPass  = 'pass';
    var kWarn  = 'warn';

    /*
     * Common Errors
     */
    var kCannotInitialize = 'Debugger: cannot initialize outputElement';
    var kErrorText        = '<b>ERROR:</b> ';
    var kFailText         = '<b>FAIL:</b> ';
    var kInfoText         = '<b>INFO:</b> ';
    var kPassText         = '<b>PASS:</b> ';
    var kWarnText         = '<b>WARN:</b> ';

    /*
     * Common Constants
     */
    var kDefaultContainer = 'div';
    var kEmpty            = '';

    /*
     *
     */
    function println(text, className) {
        switch (className) {
            case kLog:
                log(text);

                break;
            case kInfo:
                info(text);

                break;
            case kWarn:
                warn(text);

                break;
            case kError:
                error(text);

                break;
            default:
                log(text);

                break;
        }
    }

    /*
     * A factory class that creates printer deleages,
     * by parsing the configuration object.
     */
    var PrinterFactory = {

        /*
         * Returns a delegate, parsing the configuration object.
         * Usage:
         *     var delegate = PrinterFactory.create(config);
         * @param {Object} config - the configuration object.
         *
         * @return {Function} the proper delegate.
         */
        create : function(config) {
            var isUsingConsole = config.isUsingConsole;

            if (isUsingConsole && outputElement) {
                return function(value, className) {
                    var debugContent = createElement(kDefaultContainer);

                    debugContent.className = className;
                    debugContent.innerHTML = value;
                    outputElement.appendChild(debugContent);

                    println(value, className);
                };
            } else if (isUsingConsole && !outputElement) {
                return function(value, className) {
                    println(value, className);
                };
            } else if (!isUsingConsole && outputElement) {
                return function(value, className) {
                    var debugContent = createElement(kDefaultContainer);

                    debugContent.className = className;
                    debugContent.innerHTML = value;
                    outputElement.appendChild(debugContent);
                };
            } else {
                return nill;
            }
        }
    };

    /**
     * @function {static} o2.Debugger.assert
     *
     * <p>Checks the value of pass, and displays the message with a proper
     * className.</p>
     * <p>The class name can be one of the {@link
     * Debugger.config.constants.className} members.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.assert((1==true), '1 == true');
     * </pre>
     *
     * @param {Expression} pass - the expression to evaluate.
     * @param {String} message - the message to display.
     *
     * @see o2.Unit.assert
     */
    exports.assert = def(me, 'assert', function(pass, message) {
        if (!isInitialized) {
            return;
        }

        if (pass) {
            me.println([kPassText, message].join(kEmpty), kPass);

            return;
        }

        me.println([kFailText, message].join(kEmpty), kFail);
    });

    /**
     * @function {static} o2.Debugger.error
     *
     * <p>Prints an error message to the output.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.error('A serious error occured');
     * </pre>
     *
     * @param {String} message - the error message to display.
     */
    exports.error = def(me, 'error', function(message) {
        if (!isInitialized) {
            return;
        }

        me.println([kErrorText, message].join(kEmpty), kError);
    });

    /**
     * @function {static} o2.Debugger.info
     *
     * <p>Prints an info message to the output.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.info('An info.');
     * </pre>
     *
     * @param {String} message - the info message to display.
     */
    exports.info = def(me, 'info', function(message) {
        if (!isInitialized) {
            return;
        }

        me.println([kInfoText, message].join(kEmpty), kInfo);
    });

    /**
     * @function {static} o2.Debugger.init
     *
     * <p>Initializes the {@link Debugger} <code>static</code> class.</p>
     * <p>Either <strong>>outputElement</strong>>, or
     * <strong>>shouldUseConsole</strong>, or
     * both should be provided.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.init('divConsole', true);
     * </pre>
     *
     * @param {Object} outputElement - Either the <strong>id</strong> of the
     * element, or the element itself to append debug messages.
     * @param {Boolean} shouldUseConsole - should browser's built-in console
     * be used, if available.
     */
    exports.init = def(me, 'init', function(outputElement, shouldUseConsole) {
        var outputNode = $(outputElement);

        // Can I use the browser's built-in console?
        // (the double negation !!shouldUseConsole will convert the var to
        // boolean.)
        isUsingConsole = (console !== UNDEFINED && !!shouldUseConsole);

        // Is everything ok? -- I should either use the output element, or
        // the console.
        // If I can use neither of them, then it's a fatal situation.
        var isCfgOk = ((outputNode && outputNode.nodeName) || isUsingConsole);

        if (!isCfgOk) {
            throw kCannotInitialize;
        }

        // Set the output element.
        outputElement = outputNode;

        // Successfully initialized.
        isInitialized = true;

        // Prevent initializing the object more than once.
        me.init = nill;
    });

    /**
     * @function {static} o2.Debugger.log
     *
     * <p>This is an <strong>alias</strong> to {@link Debugger.println}.</p>
     * <p>Simply logs a message.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.log('Hello world');
     * </pre>
     *
     * @param {String} message - the message to log.
     *
     * @see o2.Unit.log
     */
    exports.log = def(me, 'log', function(message) {
        if (!isInitialized) {
            return;
        }

        me.println(message, kLog);
    });

    /**
     * @function {static} o2.Debugger.println
     *
     * <p>Prints the string representation of value to the next line.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.println('Hello world.');
     * </pre>
     *
     * @param {String} value - the value to print.
     * @param {String} className - the CSS class name that is associated with
     * the line.
     */
    exports.println = def(me, 'println', function(value, className) {

        // If not initialized, then we cannot use any of
        // Debugger's public methods.
        if (!isInitialized) {
            return;
        }

        // Reset className if not given.
        if (!className) {
            className = kLog;
        }

        // Create a new printer method.
        me.println = PrinterFactory.create();

        // Call the newly created method.
        me.println(value, className);
    });

    /**
     * @function {static} o2.Debugger.warn
     *
     * <p>Prints an warning message to the output.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Debugger.warn('caution!');
     * </pre>
     *
     * @param {String} message - the warning message to display.
     */
    exports.warn = def(me, 'warn', function(message) {
        if (!isInitialized) {
            return;
        }

        me.println([kWarnText, message].join(kEmpty), kWarn);
    });
}(this.o2, this, this.document));
/**
 * @module   dom.class
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A utility package to add/remove/modify <code>class</code>es.</p>
 */
(function(framework, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (class)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var concat = require('String', 'concat');

    /*
     * Common Constants
     */
    var kBeginOrBlank = '(\\s|^)';
    var kBlank        = ' ';
    var kEndOrBlank   = '(\\s|$)';

    /**
     * @function {static} o2.Dom.createClassNameRegExp
     *
     * <p>Creates a regular expression that will match a given
     * <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var reg = o2.Dom.createClassNameRegExp('testClass');
     * </pre>
     *
     * @param {String} c - The name of the class.
     *
     * @returns a <code>RegExp</code> that matches the given class name.
     */
    exports.createClassNameRegExp = def(me, 'createClassNameRegExp',
                function(c) {
        return new RegExp(concat(kBeginOrBlank, c, kEndOrBlank));
    });

    /*
     *
     */
    var createClassNameRegExp = require(kModuleName, 'createClassNameRegExp');

    /**
     * @function {static} o2.Dom.hasClass
     *
     * <p>Checks whether an <strong>element</strong> has the given
     * <strong>className</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * if (o2.Dom.hasClass('container', 'active')) {
     *      doStuff();
     * }
     * </pre>
     *
     * @param {DomNode} el - either the <strong>element</strong>, or the
     * <strong>id</strong> of it.
     * @param {String} c - the <strong>className</strong> to test.
     *
     * @return <code>true</code> if <strong>el</strong> has the
     * <code>className</code> <strong>c</strong>, <code>false</code> otherwise.
     */
    exports.hasClass = def(me, 'hasClass', function(el, c) {
        el = $(el);

        if (!el) {
            return false;
        }

        return createClassNameRegExp(c).test(el.className);
    });

    /*
     *
     */
    var hasClass = require(kModuleName, 'hasClass');

    /**
     * @function {static} o2.Dom.addClass
     *
     * <p>Add a class to the given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.addClass('container', 'active');
     * </pre>
     *
     * @param {DomNode} el - either the <strong>element</strong>, or the
     * <strong>id</strong> of it.
     * @param {String} c - the <strong>className</strong> to add.
     */
    exports.addClass = def(me, 'addClass', function(el, c) {
        el = $(el);

        if (!el) {
            return;
        }

        if (hasClass(el, c)) {
            return;
        }

        el.className += concat(kBlank, c);
    });

    /*
     *
     */
    var addClass = require(kModuleName, 'addClass');

    /**
     * @function {static} o2.Dom.removeClass
     *
     * <p>Removes a <strong>class</strong> name from the given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.removeClass('container', 'active');
     * </pre>
     *
     * @param {DomNode} el - either the <strong>element</strong>, or the
     * <strong>id</strong> of it.
     * @param {String} c - the className to remove.
     */
    exports.removeClass = def(me, 'removeClass', function(el, c) {
        el = $(el);

        if (!el) {
            return;
        }

        if (!hasClass(el, c)) {
            return;
        }

        el.className = el.className.replace(createClassNameRegExp(c), kBlank);
    });

    /*
     *
     */
    var removeClass = require(kModuleName, 'removeClass');

    /**
     * @function {static} o2.Dom.toggleClass
     *
     * <p>Toggles the <strong>CSS</strong> <code>className</code> of a given
     * element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.toggleClass('container', 'active');
     * </pre>
     *
     * @param {Object} el - the <strong>DOM</strong> element to toggle or its
     * <code>String</code> id.
     * @param {String} c - the class name to toggle.
     * @param {Boolean} state - (Optional, defaults to <code>undefined</code>),
     * if <code>true</code> add class <strong>c</strong> to
     * <strong>el</strong>, if <code>true</code> removes class
     * <strong>c</strong> from <strong>el</strong>. If the parameter is not
     * given, the class is toggled (i.e. added if the class does not exist,
     * and removed if the class exists).
     */
    exports.toggleClass = def(me, 'toggleClass', function(el, c, state) {
        if (state !== UNDEFINED) {
            if (state) {
                addClass(el, c);

                return;
            }

            removeClass(el, c);

            return;
        }

        if (hasClass(el, c)) {
            removeClass(el, c);

            return;
        }

        addClass(el, c);
    });
}(this.o2, this));
////////////////////////////**
 * @module   dom.constants
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Constant definitions for {@link o2.Dom}.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /**
     * @class {static} o2.Dom
     *
     * A cross-browser <strong>DOM</strong> manipulation helper.
     */
    var me = create(kModuleName);

    /**
     * @struct {static} o2.Dom.nodeType
     *
     * <code>DOM</code> node types.
     */
    exports.nodeType = def(me, 'nodeType', {

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.ELEMENT - element node.
         */
        ELEMENT : 1,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.ATTRIBUTE - atribute node.
         */
        ATTRIBUTE : 2,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.TEXT - text node.
         */
        TEXT : 3,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.CDATA - CDATA section.
         */
        CDATA : 4,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.ENTITY_REFERENCE - entity reference.
         */
        ENTITY_REFERENCE : 5,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.ENTITY - entity.
         */
        ENTITY : 6,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.PROCESSING_INSTRUCTION - processing
         * instruction.
         */
        PROCESSING_INSTRUCTION : 7,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.COMMENT - comment node.
         */
        COMMENT : 8,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.DOCUMENT - document (root) node.
         */
        DOCUMENT : 9,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.DOCUMENT_TYPE - DTD node.
         */
        DOCUMENT_TYPE : 10,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.DOCUMENT_FRAGMENT - document fragment.
         */
        DOCUMENT_FRAGMENT : 11,

        /**
         * @property {static const Integer}
         * o2.Dom.nodeType.NOTATION - notation.
         */
        NOTATION : 12
    });
}(this.o2));
//     var _         = framework.protecteds;
//     var alias     = _.alias;
//     var attr      = _.getAttr;
//     var construct = _.construct;
//     var create    = _.create;
//     var def       = _.define;
//     var obj       = _.getObject;
//     var proto     = _.proto;
//     var require   = _.require;

//TODO: complete me.

//     if (document.documentElement &&
//                 document.documentElement.getBoundingClientRect) {

//         /**
//          * @function {static} o2.Dom.getOffset
//          *
//          * <p>Gets the left and top offset of a given element.</p>
//          *
//          * @param {Object} e - the element, or the id of the element, to get
//          * the offsets of.
//          *
//          * @return the offset from the top-left corner of the viewport, in the
//          * form <code>{left: l, top: t}</code>.
//          */
//         def(me, 'getOffset', function(elmItem) {
//             var elm = $(elmItem);

//             if (!elm || !elm.ownerDocument) {
//                 return {top : 0, left : 0};
//             }

//             var box = null;

//             try {
//                 box = elem.getBoundingClientRect();
//             } catch(ignore) {
//             }

//             var doc = elem.ownerDocument;
//             var docElem = getDocumentElement();

//             if (!docElem) {
//                 return {top : 0, left : 0};
//             }

//             if (!box) {
//                 return {top : 0, left : 0};
//             }

//             if(!isParentOrSelf(docElem, elem)) {
//                 return {top : box.top, left : box.left};
//             }

//             var body = doc.body;
//             var win = window;
//             var clientTop = docElem.clientTop || 0;
//             var clientLeft = docElem.clientLeft || 0;
//             var scrollTop = win.pageYOffset || docElem.scrollTop;
//             var scrollLeft = win.pageXOffset || docElem.scrollLeft;

//             return {
//                 top : box.top + scrollTop - clientTop,
//                 left : box.left + scrollLeft - clientLeft
//             };
//         });
//     } else {
//         def(me, 'getOffset', function(elmItem) {
//             var elem = $(elmItem);

//             if (!elem || !elem.ownerDocument ) {
//                 return {top : 0, left : 0};
//             }

//             var docElm = document.documentElement;
//             var computedDocElm = getDocumentElement();
//             var doc = elem.ownerDocument;

//             var top = elem.offsetTop;
//             var left = elem.offsetLeft;
//             var offsetParent = elem.offsetParent;
//             var isPrevFixed = isFixed(elm);

//             while (true) {
//                 elem = elem.parentNode;

//                 if (!elem) {
//                     break;
//                 }

//                 if (elem === docElm) {
//                     break;
//                 }

//                 if (isPrevFixed) {
//                     break;
//                 }

//                 top  -= elem.scrollTop;
//                 left -= elem.scrollLeft;

//                 if (elem === offsetParent) {
//                     top  += elem.offsetTop;
//                     left += elem.offsetLeft;

//                     offsetParent = elem.offsetParent;
//                 }

//                 isPrevFixed = isFixed(elm);
//             }

//             if (isPrevFixed) {
//                 top  += computedDocElm.scrollTop;
//                 left += computedDocElm.scrollLeft;
//             }

//             return {top : top, left : left};
//         });
//     }


//     /**
//      * @function {static} o2.Dom.getOffsetLeft
//      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).left</code>.</p>
//      *
//      * @see o2.Dom.getOffset
//      */
//     def(me, 'getOffsetLeft', function(obj) {
//         return getOffset(obj).left;
//     });

//     /**
//      * @function {static} o2.Dom.getOffsetTop
//      *
//      * <p>An alias to <code>o2.Dom.getOffset(obj).top</code>.</p>
//      *
//      * @see o2.Dom.getOffset
//      */
//     def(me, 'getOffsetTop', function(obj) {
//         return getOffset(obj).top;
//     });

//     /*
//      * setOffset uses it to compute CSS .top and .left when necessary.
//      */
//     function getPosition() {
//         var elm = $(obj);

//         if (!elm) {
//             return {top : 0, left : 0};
//         }

//         var offsetParent = elm.offsetParent;

//         var offset = getOffset(elm);
//         var parentOffset = getOffest(offsetParent);

//         return {
//             top :
//                 offset.top -
//                 parseFloat(getStyle(elm, 'marginTop')) -
//                 parseFloat(getStyle(offsetParent, 'borderTopWidth')),
//             left :
//                 offset.left -
//                 parseFloat(getStyle(elm, 'marginLeft')) -
//                 parseFloat(getStyle(offsetParent, 'borderLeftWidth'))
//         }
//     }







// };/**
 * @module   dom.core
 * @requires core
 * @requires dom.constants
 * @requires dom.style
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A cross-browser <strong>DOM</strong> manipulation helper.</p>
 */
(function(framework, document, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (core)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var nt            = require(kModuleName, 'nodeType');
    var kElementNode  = attr(nt, 'ELEMENT');
    var kDocumentNode = attr(nt, 'DOCUMENT');
    var kText         = attr(nt, 'TEXT');

    var createElement          = attr(document,'createElement');
    var createDocumentFragment = attr(document, 'createDocumentFragment');

    /*
     * Common Constants
     */
    var kClass     = 'class';
    var kClassName = 'className';
    var kCss       = 'css';
    var kCssText   = 'cssText';
    var kDiv       = 'div';
    var kEmpty     = '';
    var kFunction  = 'function';
    var kNumber    = 'number';
    var kObject    = 'object';
    var kString    = 'string';
    var kStyle     = 'style';

    /*
     * Common Regular Expression
     */
    var kReturnRegExp = /\r\n|\r/g;
    var kWhiteSpaceRegExp = /^\s*$/;

    /*
     * For creating document fragments.
     */
    var tempFragmentDiv = null;

    /**
     * @function {static} o2.Dom.append
     *
     * <p>Appends the element to the bottom of its parent.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var child = o2.$('childNode');
     * var parent = o2.$('parentNode');
     * o2.Dom.append(child, parent);
     * </pre>
     *
     * @param {Object} elmChild - the child node, or the <strong>id</strong> of
     * the node to append.
     * @param {Object} elmParent - the parent container, or the
     * <strong>id</strong> of the container.
     */
    exports.append = def(me, 'append', function(elmChild, elmParent) {
        var child  = $(elmChild);
        var parent = $(elmParent);
        var temp   = null;

        if (!child || !parent) {
            return;
        }

        if (typeof child === 'string') {
            temp = createElement(kDiv);
            parent.appendChild(temp).innerHTML = child;
            return temp;
        }

        return parent.appendChild(child);
    });

    /**
     * @function {static} o2.Dom.createDocumentFragment
     *
     * <p>Creates a <strong>Document Fragment</strong> from an
     * <strong>HTML</strong> <code>String</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var frag = o2.Dom.createDocumentFragment('[div]test[/div]');
     * </pre>
     *
     * @param {String} html - the <strong>HTML</strong> to create a fragment
     * from.
     *
     * @return {HTMLDocumentFragment} - the generated <code>document</code>
     * fragment.
     */
    exports.createDocumentFragment = def(me, 'createDocumentFragment',
                function(html) {
        var result = createDocumentFragment();

        tempFragmentDiv = tempFragmentDiv || createElement(kDiv);

        tempFragmentDiv.innerHTML = html;

        while (tempFragmentDiv.firstChild) {
            result.appendChild(tempFragmentDiv.firstChild);
        }

        tempFragmentDiv = null;

        return result;
    });

    /**
     * @function {static} o2.Dom.createElement
     *
     * <p>Creates an element with given name and attributes.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var el = o2.Dom.createElement(
     *      'div',
     *      {className : 'active', style : 'font-weight : bold'}
     * );
     * </pre>
     *
     * @param {String} name - the node name of the element (i.e. 'div', 'a').
     * @param {Object} attributes - an associative array in the form
     * <code>{att1:value1, att2:value2}</code>.
     *
     * @return the created element.
     */
    exports.createElement = def(me, 'createElement', function(name,
                attributes) {
        var e       = createElement(name);
        var isClass = false;
        var isStyle = false;
        var key     = null;
        var value   = kEmpty;

        // Internet Explorer 7- (and some minor browsers) cannot set values
        // for style, class or event handlers, using setAttribute.
        // Internet Explorer 8 has fixed most of these, but still cannot set
        // event handlers. Internet Explorer 9 can now set these attributes
        // in standards mode. A few more browsers also have trouble reading
        // these attributes using getAttribute.

        for (key in attributes) {
            if (attributes.hasOwnProperty(key)) {
                value = attributes[key];

                isClass = key === kClass || key === kClassName;
                isStyle = key === kStyle || key === kCss ||
                    key === kCssText;

                if (isClass) {
                    e.className = value;
                } else if (isStyle) {

                    // The string value of the style attribute is available
                    // as a read/write string called cssText, which is a
                    // property of the style object, which itself is a
                    // property of the element.
                    //
                    // Note, however, that it is not supported very well;
                    // Safari does not support it up to version 1.1 (reading
                    // it produces the value null)
                    //
                    // ...
                    //
                    // To avoid problems a combination of cssText and
                    // getAttribute/setAttribute can be used.
                    e.style.cssText = value;
                    e.setAttribute(kStyle, value);
                } else {
                    e[key] = attributes[key];
                }
            }
        }

        return e;
    });

    /**
     * @function {static} o2.Dom.create
     *
     * <p>An alias to {@link o2.Dom.createElement}.</p>
     *
     * @see o2.Dom.createElement
     */
    exports.create = alias(me, 'create', 'createElement');

    /**
     * @function {static} o2.Dom.getAttribute
     *
     * <p>Gets the attribute of a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var uid = o2.Dom.getAttribute('container', 'data-user-id');
     * </pre>
     *
     * @param {Object} elm - the node, or the <strong>id</strong> of the
     * node, to get the attribute of.
     * @param {String} attribute - the attribute to gather.
     *
     * @return the value of the attribute if found; <code>null</code>
     * otherwise.
     */
    exports.getAttribute = def(me, 'getAttribute', function(elm, attribute) {
        var obj = $(elm);

        if (!obj || !attribute) {
            return null;
        }

        var value = null;

        if (attribute === kClass || attribute === kClassName) {
            value = obj.className;

            if (value !== UNDEFINED) {
                return value;
            }
        }

        if (attribute === kStyle || attribute === kCss ||
                    attribute === kCssText) {
            value = obj.cssText;

            if (value !== UNDEFINED) {
                return value;
            }
        }

        // The DOM object (obj) may not have a getAttribute method.
        if (typeof obj.getAttribute === kFunction) {
            value = obj.getAttribute(attribute);

            if (value !== UNDEFINED) {
                return value;
            }
        }

        return obj[attribute] || null;
    });

    /**
     * @function {static} o2.Dom.getHtml
     *
     * <p>Gets the <strong>HTML</strong> of a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var html = o2.Dom.getHtml('container');
     * </pre>
     *
     * @param {Object} elm - the <strong>DOM</strong> node or its
     * <code>String</code> id.
     *
     * @return the <code>innerHTML</code> of the given node, if it exists;
     * <code>null</code> otherwise.
     */
    exports.getHtml = def(me, 'getHtml', function(elm) {
        var obj = $(elm);

        if (!obj) {
            return null;
        }

        return obj.innerHTML;
    });

    if (document.innerText !== UNDEFINED) {

        /**
         * @function {static} o2.Dom.getText
         *
         * <p>Gets the textual content of the given node, replacing entities
         * like <code>& amp;</code> with it's corresponding character
         * counterpart (<strong>&</strong> in this example).</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var txt = o2.Dom.getText('container');
         * </pre>
         *
         * @param {Object} elm - the <strong>DOM</strong> node or its
         * <code>String</code> id.
         *
         * @return the textual content of the given node.
         */
        exports.getText = def(me, 'getText', function(elm) {
            var obj = $(elm);

            if (!obj) {
                return null;
            }

            var nodeType = obj.nodeType;

            if (!nodeType) {
                return null;
            }

            if (nodeType !== kElementNode && nodeType !== kDocumentNode) {
                return null;
            }

            if (typeof obj.innerText !== kString) {
                return null;
            }

            return obj.innerText.replace(kReturnRegExp, '');
        });
    } else {
        exports.getText = def(me, 'getText', function(elm) {
            var obj = $(elm);

            if (!obj) {
                return null;
            }

            var nodeType = obj.nodeType;

            if (!nodeType) {
                return null;
            }

            if (nodeType !== kElementNode && nodeType !== kDocumentNode) {
                return null;
            }

            if (typeof obj.textContent !== kString) {
                return null;
            }

            return obj.textContent;
        });
    }

    /**
     * @function {static} o2.Dom.insertAfter
     *
     * <p>Adds the node after the reference node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ref = o2.$('ref');
     * var new = o2.$('new');
     * o2.Dom.insertAfter(new, ref);
     * </pre>
     *
     * @param {Object} elmNewNode - the DOM node, or the <strong>id</strong> of
     * the node, to insert after.
     * @param {Object} elmRefNode - the reference node, or the
     * <strong>id</strong> of the node.
     */
    exports.insertAfter = def(me, 'insertAfter', function(elmNewNode, elmRefNode) {
        var newNode = $(elmNewNode);
        var refNode = $(elmRefNode);

        if (!newNode || !refNode) {
            return;
        }

        var obj = refNode.parentNode;

        if (refNode.nextSibling) {
            obj.insertBefore(newNode, refNode.nextSibling);

            return;
        }

        obj.appendChild(newNode);
    });

    /**
     * @function {static} o2.Dom.insertBefore
     *
     * <p>Adds the node before the reference node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ref = o2.$('ref');
     * var new = o2.$('new');
     * o2.Dom.insertBefore(new, ref);
     * </pre>
     *
     * @param {Object} elmNewNode - the node, or the <strong>id</strong> of the
     * node, to insert before.
     * @param {Object} elmRefNode - the reference, or the <strong>id</strong> of
     * the node.
     */
    exports.insertBefore = def(me, 'insertBefore', function(elmNewNode,
                elmRefNode) {
        var newNode = $(elmNewNode);
        var refNode = $(elmRefNode);

        if (!newNode || !refNode) {
            return;
        }

        var obj = refNode.parentNode;

        obj.insertBefore(newNode, refNode);
    });

    /**
     * @function {static} o2.Dom.isDocument
     *
     * <p>Checks whether the given node is a <code>document</code> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isDocument = o2.Dom.isDocument(currentNode);
     * </pre>
     *
     * @param {DOMNode} obj - the <strong>node</strong> to test.
     *
     * @return <code>true</code> if the <strong>node</strong> is the
     * <code>document</code> element; <code>false</code> otherwise.
     */
    exports.isDocument = def(me, 'isDocument', function(obj) {
        return !!(obj && obj.nodeType === kElementNode);
    });

    /**
     * @function {static} o2.Dom.isElement
     *
     * <p>Checks whether the given node is an <strong>element</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isElement = o2.Dom.isElement(currentNode);
     * </pre>
     *
     * @param {DOMNode} obj - the <strong>node</strong> to test.
     *
     * @return <code>true</code> if the <strong>node</strong> is an
     * <strong>element</strong> node; <code>false</code> otherwise.
     */
    exports.isElement = def(me, 'isElement', function(obj) {
        return !!(obj && obj.nodeType === kElementNode);
    });

    /**
     *
     */
    //TODO: add documentation.
    exports.isNode = def(me, 'isNode', function(obj) {
        return (
            typeof window.Node === 'object' ?
                // DOM Level 2
                obj instanceof window.Node :
                obj && typeof obj === kObject &&
                typeof obj.nodeType === kNumber &&
                typeof obj.nodeName === kString
        );
    });

    /**
     * @function {static} o2.Dom.prepend
     *
     * <p>Prepends the element to the top of its parent.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var child = o2.$('ChildContainer');
     * var parent = o2.$('MasterContainer');
     * o2.Dom.prepend(child, parent);
     * </pre>
     *
     * @param {Object} elmChild - the child node, or the id of the node to
     * prepend.
     * @param {Object} elmParent - the parent container, or the id of the
     * container.
     */
    exports.prepend = def(me, 'prepend', function(elmChild, elmParent) {
        var child  = $(elmChild);
        var parent = $(elmParent);

        if (!child || !parent) {
            return;
        }

        if (typeof child === kString) {
            var temp = createElement(kDiv);
            temp.innerHTML = child;

            if (parent.childNodes.length === 0) {
                return parent.appendChild(temp);
            }

            return parent.insertBefore(child, parent.childNodes[0]);
        }

        if (parent.childNodes.length === 0) {
            return parent.appendChild(child);
        }

        return parent.insertBefore(child, parent.childNodes[0]);
    });

    /**
     * @function {static} o2.Dom.remove
     *
     * <p>Removes the element from the <strong>DOM</strong> flow.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.remove('nagivation');
     * </pre>
     *
     * @param {Object} e - either the <strong>element</strong>, or the
     * <strong>id</strong> of it, to remove.
     *
     * @return the removed node.
     */
    exports.remove = def(me, 'remove', function(e) {
        var elm = $(e);

        if (!elm) {
            return null;
        }

        elm.parentNode.removeChild(elm);

        return elm;
    });

    /**
     * @function {static} o2.Dom.removeNode
     *
     * <p>An <strong>alias</strong> to {@link o2.Dom.remove}.</p>
     *
     * @see o2.Dom.remove
     */
    exports.removeNode = alias(me, 'removeNode', 'remove');

    /**
     * @function {static} o2.Dom.removeChildren
     *
     * <p>Removes all the children of the element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.removeChildren('container');
     * </pre>
     *
     * @param {Object} e - either the <strong>element</strong>, or the
     * <strong>id</strong> of it to process.
     */
    exports.removeChildren = def(me, 'removeChildren', function(elm) {
        var node = $(elm);

        if (!node) {
            return;
        }

        node.innerHTML = kEmpty;
    });

    /**
     * @function {static} o2.Dom.empty
     *
     * <p>An <strong>alias</strong> to {@link o2.Dom.removeChildren}.</p>
     *
     * @param {Object} elm - either the <strong>element</strong>, or the
     * <strong>id</strong> of it to process.
     */
    exports.empty = alias(me, 'empty', 'removeChildren');

    /**
     * @function {static} o2.Dom.removeEmptyTextNodes
     *
     * <p>Removes empty text nodes from the element.</p>
     * <p>Note that this removal is not recursive; only the first-level empty
     * child nodes of the element will be removed.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.removeEmptyTextNodes('container');
     * </pre>
     *
     * @param {Object} e - either the <strong>element</strong>, or the
     * <strong>id</strong> of it to process.
     */
    exports.removeEmptyTextNodes = def(me, 'removeEmptyTextNodes', function(e) {
        var arRemove     = [];
        var child        = null;
        var elm          = $(e);
        var i            = 0;
        var shouldRemove = false;

        if (!elm) {
            return;
        }

        var children = elm.childNodes;
        var len      = children.length;

        for (i = 0; i < len; i++) {
            child = children[i];

            if (!child.hasChildNodes()) {
                shouldRemove = child.nodeType === kText &&
                    kWhiteSpaceRegExp.test(child.nodeValue);

                if (shouldRemove) {
                    arRemove.push(child);
                }
            }
        }

        for (i = 0, len = arRemove.length; i < len; i++) {
            child = arRemove[i];
            child.parentNode.removeChild(child);
        }
    });

    /**
     * @function {static} o2.Dom.removeEmpty
     *
     * <p>An <strong>alias</strong> to
     * {@link o2.Dom.removeEmptyTextNodes}.</p>
     *
     * @see o2.Dom.removeEmptyTextNodes
     */
    exports.removeEmpty = alias(me, 'removeEmpty', 'removeEmptyTextNodes');

    /**
     * @function {static} o2.Dom.setAttribute
     *
     * <p>Sets the attribute of the given object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.setAttribute('container', 'data-user-id', '123');
     * </pre>
     *
     * @param {Object} elm - the object or the <code>String</code> id of it.
     * @param {String} attribute - the name of the attribute.
     * @param {String} value - the value of the attribute.
     */
    exports.setAttribute = def(me, 'setAttribute', function(elm, attribute,
                value) {
        var obj = $(elm);

        if (!obj || !attribute) {
            return;
        }

        if (attribute === kClass  || attribute === kClassName){
            obj.className = value;

            return;
        }

        if (typeof obj.setAttribute === kFunction) {
            obj.setAttribute(attribute, value);

            return;
        }

        obj[attribute] = value;
    });

    /**
     * @function {static} o2.Dom.setHtml
     *
     * <p>Simply sets the <code>innerHTML</code> of the element.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.setHtml('container', '[h1]hello[/h1]');
     * </pre>
     *
     * @param {Object} elm - The <strong>DOM</strong> element to set the
     * <strong>HTML</strong> of, or its <code>String</code> id.
     */
    exports.setHtml = def(me, 'setHtml', function(elm, html) {
        var obj = $(elm);

        if (!obj) {
            return;
        }

        obj.innerHTML = html;
    });
}(this.o2, this.document));
/**
 * @module   dom.style
 * @requires core
 * @requires dom.core
 * @requires string.core
 * @requires string.transform
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A utility package to
 * <strong>add</strong>/<strong>remove</strong>/<strong>modify</strong>
 * styles.</p>
 */
(function(framework, window, document, UNDEFINED) {
   'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (style)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $      = require('$');
    var t      = require('t');
    var myName = require('name');

    var kString               = 'String';
    var concat                = require(kString, 'concat');
    var toCamelCase           = require(kString, 'toCamelCase');
    var toDashedFromCamelCase = require(kString, 'toDashedFromCamelCase');

    var createElement        = attr(document, 'createElement');
    var getElementsByTagName = attr(document, 'getElementsByTagName');

    /*
     * Common Constants
     */
    var kBackgroundPositionX = 'background-position-x';
    var kBackgroundPositionY = 'background-position-y';
    var kCssFloat            = 'cssFloat';
    var kDisplay             = 'display';
    var kEmpty               = '';
    var kFloat               = 'float';
    var kHead                = 'head';
    var kHidden              = 'hidden';
    var kLeft                = 'left';
    var kLink                = 'link';
    var kM$                  = 'MSIE';
    var kNone                = 'none';
    var kOldDisplay          = '_oldDisplay';
    var kPixels              = 'px';
    var kRel                 = 'rel';
    var kStyle               = 'style';
    var kTextCss             = 'text/css';
    var kTitle               = 'title';
    var kTop                 = 'top';
    var kVisibility          = 'visibility';
    var kZeroPx              = '0px';

    /*
     * Common Regular Expressions
     */
    var kRegNumber      = /^-?\d/;
    var kRegPixelNumber = /^-?\d+(?:px)?$/i;

    /**
     * @function {static} o2.Dom.activateAlternateStylesheet
     *
     * <p>Activates the <strong>alternate stylesheet</strong> with the given
     * <code>title</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.activateAlternateStylesheet('alternateTheme');
     * </pre>
     *
     * @param {String} title - the <code>title</code> of the <strong>alternate
     * stylesheet</strong> to activate.
     */
    exports.activateAlternateStylesheet = def(me, 'activateAlternateStylesheet',
                function(title) {
        var i             = 0;
        var len           = 0;
        var link          = null;
        var links         = t(kLink);
        var linkTitle     = kEmpty;
        var shouldDisable = false;

        for (i = 0, len = links.length; i < len; i++) {
            link = links[i];
            linkTitle = link.getAttribute(kTitle);
            shouldDisable = link.getAttribute(kRel).indexOf(kStyle) !== -1 &&
                title;
            link.disabled = (linkTitle === title) ? false : shouldDisable;
        }
    });

    /*
     *
     */
    var isCrap = window.navigator.userAgent.indexOf(kM$) > -1 && !window.opera;

    if(isCrap) {

        /**
         * @function {static} o2.Dom.addCssRules
         *
         * <p>Adds the CSS rules given in the <strong>cssText</strong> parameter
         * to the document.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Dom.addCssRules(
         *      'div.warning { background-color:#c00; color:#fff };'
         * );
         * </pre>
         */
        exports.addCssRules = def(me, 'addCssRules', function(cssText) {
            try {
                document.createStyleSheet().cssText = cssText;
            } catch(e) {
                var firstSheet = document.styleSheets[0];

                if(firstSheet) {
                    firstSheet.cssText = concat(firstSheet.cssText, cssText);
                }
            }
        });
    } else {
        exports.addCssRules = def(me, 'addCssRules', function(cssText) {
            var d         = createElement(kStyle);
            d.type        = kTextCss;
            d.textContent = cssText;

            getElementsByTagName(kHead)[0].appendChild(d);
        });
    }

    var kCssText = 'cssText';

    /**
     * @function {static} o2.Dom.addStyle
     *
     * <p>Adds style attributes to a <code>DOM</code> node.</p>
     *
     * <p>Note that adding and removing style attributes to a
     * <strong>DOM</strong>
     * not is considered "bad practice". Do not use inline styles to modify the
     * view;
     * assign <strong>className</strong>'s instead of <strong>style</strong>
     * values.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.addStyle('container', {color : '#bada55'})
     * </pre>
     *
     * @param {Object} obj - the current <code>DOM</code> node, or the
     * <strong>id</strong> of that node, to add styles to.
     * @param {Object} style - styles in the form <code>{style1:value1,
     * style2:value2}</code>.
     */
    exports.addStyle = def(me, 'addStyle', function(obj, style) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        var key               = null;
        var toCamelCaseCached = toCamelCase;

        var objStyle = obj.style;

        if (typeof style === kString) {
            if(objStyle.setAttribute) {
                objStyle.setAttribute(kCssText, style);

                return;
            }

            obj.setAttribute(kStyle, style);

            return;
        }

        for (key in style) {
            if (style.hasOwnProperty(key)) {
                if (key === kFloat) {
                    objStyle.cssFloat = style[key];
                } else {
                    objStyle[toCamelCaseCached(key)] = style[key];
                }
            }
        }
    });

    /**
     * @function {static} o2.Dom.setCss
     *
     * <p>An alias to {@link o2.Dom.addStyle}.</p>
     *
     * @see o2.Dom.addStyle
     */
    exports.setCss = alias(me, 'setCss', 'addStyle');

    /**
     * @function {static} o2.Dom.setStyle
     *
     * <p>An alias to {@link o2.Dom.addStyle}.</p>
     *
     * @see o2.Dom.addStyle
     */
    exports.setStyle = alias(me, 'setStyle', 'addStyle');

    /*
     *
     */
    function getStyleTextFromAttribute(obj) {
        var styleText = obj.getAttribute(kStyle);

        if(!styleText) {
            return kEmpty;
        }

        if (typeof styleText === kString) {
            return styleText;
        }

        return kEmpty;
    }

    /*
     *
     */
    function getInlineStyle(obj, cssProp) {

        //return the property if set inline.
        var val = obj.style[cssProp];

        if (val) {
            return val;
        }

        return null;
    }

    /*
     *
     */
    function prepareCssProperty(cssProperty) {
        if (cssProperty === kFloat) {
            return kCssFloat;
        }

        return toCamelCase(cssProperty);
    }

    if (document.defaultView && document.defaultView.getComputedStyle) {

        /**
         * @function {static} o2.Dom.getStyle
         *
         * <p>Gets the <strong>style</strong> of a given property of
         * the element.</p>
         * <p>Tries to parse the <code>currentStyle</code>, if available;
         * otherwise tries to calculate the style using
         * <code>window.getComputedStyle</code>;
         * gets <code>obj.style</code> if everything else fails.
         *
         * <p>Note that adding and removing style attributes to a
         * <strong>DOM</strong> not is considered "bad practice". Do not use
         * inline styles to modify the view;
         * assign <strong>className</strong>'s instead of <strong>style</strong>
         * values.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var color = o2.Dom.getStyle('container', 'color');
         * </pre>
         *
         * @param {Object} elm - the element, or the <strong>id</strong> of it,
         * to check.
         * @param {String} cssProperty - the css property either
         * <strong>dash-separated</strong>
         * or <strong>camelCased</strong> (i.e.: 'border-color' or
         * 'borderColor')
         * @param {Boolean} isNoForce - (optional; defaults to
         * <code>false</code>)
         * if <code>true</code> inherited values from the CSS files will also be
         * parsed, otherwise, only inline styles will be parsed.
         *
         * @return the calculated <strong>style</strong> value.
         */
        exports.getStyle = def(me, 'getStyle', function(elm, cssProperty,
                    isNoForce) {
            var noForce   = !!isNoForce;
            var obj       = $(elm);

            if (!obj) {
                return null;
            }

            if (!cssProperty) {
                return getStyleTextFromAttribute(obj);
            }

            var defaultView = document.defaultView;
            var cssProp = prepareCssProperty(cssProperty);

            if (noForce) {
                return getInlineStyle(obj, cssProp);
            }

            var d = defaultView.getComputedStyle(obj, kEmpty
                ).getPropertyValue(toDashedFromCamelCase(cssProp));

            if (cssProp === kBackgroundPositionY ||
                        cssProp === kBackgroundPositionX) {
                if(d === kTop || d === kLeft) {
                    d = kZeroPx;
                }
            }

            return d;
        });
    } else {
        exports.getStyle = def(me, 'getStyle', function(elm, cssProperty,
                    isNoForce) {
            var noForce   = !!isNoForce;
            var obj       = $(elm);

            if (!obj) {
                return;
            }

            if (!cssProperty) {
                return getStyleTextFromAttribute(obj);
            }

            var cssProp = prepareCssProperty(cssProperty);

            if(noForce) {
                return getInlineStyle(obj, cssProp);
            }

            //TODO: factor out.
            if (obj.currentStyle) {
                var camelizedCss = toCamelCase(cssProp);
                var value      = obj.currentStyle[camelizedCss];
                var isImproper = !kRegPixelNumber.test(value) &&
                    kRegNumber.test(value);

                //
                // Dean Edwards:
                //
                // MSIE6+ has special pixelLeft/Width/Height etc properties.
                // They represent the current pixel value of the equivalent
                // style setting.
                // So, if you have style.width=8em then style.pixelWidth would
                // return the pixel equivalent. MSIE also supports an override
                // style called runtimeStyle.
                //
                // Setting properties on runtimeStyle overrides all other style
                // properties.
                //
                // This trick works by setting style.left and then getting MSIE
                // to convert it by calling style.pixelLeft.
                //
                // To stop the element moving around the screen when we do this,
                // we set runtimeStyle.left with the current left value. After
                // we’ve done the conversion we set everything back to the
                // way it was.
                //
                // ref: http://ajaxian.com/archives/computed-vs-cascaded-style
                //
                if (isImproper) {
                    var left = obj.style.left;
                    var runtimeLeft = obj.runtimeStyle.left;

                    obj.runtimeStyle.left = obj.currentStyle.left;
                    obj.style.left = (value || 0);
                    value = concat(obj.style.pixelLeft, kPixels);

                    obj.style.left = left;
                    obj.runtimeStyle.left = runtimeLeft;

                    return value;
                }

                return value;
            }

            return null;
        });
    }

    /**
     * @function {static} o2.Dom.getCss
     *
     * <p>An alias to {@link o2.Dom.getStyle}.</p>
     *
     * @see o2.Dom.getStyle
     */
    exports.getCss = alias(me, 'getCss', 'getStyle');

    /**
     * @function {static} o2.Dom.hide
     *
     * <p>Hides the given object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.hide('container');
     * </pre>
     *
     * @param {Object} obj - the <strong>DOM</strong> node, or the
     * <strong>id</strong> to hide.
     */
    exports.hide = def(me, 'hide', function(elm) {
        var obj = $(elm);

        if (!obj) {
            return;
        }

        if (obj.style.display !== kNone) {
            obj[[myName, kOldDisplay].join(kEmpty)] = obj.style.display;
        }

        obj.style.display = kNone;
    });

    /*
     *
     */
    var hide = require(kModuleName, 'hide');

    /**
     * @function {static} o2.Dom.show
     *
     * <p>Shows the given object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.show('container');
     * </pre>
     *
     * @param {Object} elm - the <strong>DOM</strong> node, or the
     * <strong>id</strong> of it, to show.
     */
    exports.show = def(me, 'show', function(elm) {
        var obj = $(elm);

        if (!obj) {
            return;
        }

        obj.style.display = obj[[myName, kOldDisplay].join(kEmpty)] || kEmpty;

        delete obj[[myName, kOldDisplay].join(kEmpty)];
    });

    /*
     *
     */
    var show = require(kModuleName, 'show');

    /**
     * @function {static} o2.Dom.isVisible
     *
     * <p>Checks whether the <strong>DOM</strong> node is visible.</p>
     * <p>Note that being visible does not necessarily mean being available
     * inside the <strong>viewport</strong>.</p>
     * <p>If a <strong>DOM</strong> node has <code>display == 'none'</code>
     * or <code>visibility == 'hidden'</code> <strong>CSS</strong> properties,
     * then it's regarded as "invisible", otherwise it is considered to be
     * "visible".</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isContainerVisible = o2.Dom.isVisible('container');
     * </pre>
     *
     * @param {Object} obj - the <strong>DOM</strong> element, or the
     * <strong>id</strong> of it, to test.
     *
     * @return <code>true</code> if the element is visible, <code>false</code>
     * otherwise.
     */
    exports.isVisible = def(me, 'isVisible', function(obj) {
        obj = $(obj);

        if (!obj) {
            return false;
        }

        // has offset dimensions
        // OR display IN (inline,block,'')
        // OR visibility in ('visible','')
        //
        // getStyle returns null if it cannot
        // reliably determine the style (this happens in archaic
        // browsers).
        //
        // So if there's no inline display/visibility attribute is set
        // and cannot acquire those attributes
        // from the computed style, then the method fails and returns
        // false.

        var display = me.getStyle(obj, kDisplay);
        var visibility = me.getStyle(obj, kVisibility);

        if (visibility === kHidden) {
            return false;
        }

        if (display === kNone) {
            return false;
        }

        return ((obj.offsetWidth !== 0 || obj.offsetHeight !== 0   )) ||
               ((display    ===  null  ) && (visibility !== kHidden)) ||
               ((visibility ===  null  ) && (display    !== kNone  )) ||
               ((display    !== kNone  ) && (visibility !== kHidden));
    });

    /*
     *
     */
    var isVisible = require(kModuleName, 'isVisible');

    /**
     * @function {static} o2.Dom.toggleVisibility
     *
     * <p>Toggles the visibility of the given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.toggleVisibility('container');
     * </pre>
     *
     * @param {Object} elm - a <strong>DOM</strong> reference or its
     * <code>String</code> id.
     * @param {Boolean} state - (Optional, defaults to <code>undefined</code>)
     * if <code>true</code>, show the item; if <code>false</code> hides the
     * item; if <code>undefined</code> simply toggles the visibility of the
     * item.
     */
    exports.toggleVisibility = def(me, 'toggleVisibility', function(elm,
                state) {
        var obj = $(elm);

        if (!obj) {
            return;
        }

        if (state !== UNDEFINED) {
            if (state) {
                show(elm);

                return;
            }

            hide(elm);

            return;
        }

        if (isVisible(elm)) {
            hide(elm);

            return;
        }

        show(elm);
    });
}(this.o2, this, this.document));
/**
 * @module   dom.dimension
 * @requires core
 * @requires dom.style
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Includes dimension (<strong>i.e. width-height related</strong>) helper
 * methods.</p>
 */
(function(framework, window, document, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';


    /*
     * Dom (dimension)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var concat = require('String', 'concat');

    var setStyle = require(kModuleName, 'setStyle');

    var self = attr(window, 'self');

    /*
     * Common Constants
     */
    var kHeight    = 'height';
    var kModernCss = 'CSS1Compat';
    var kPixel     = 'px';
    var kWidth     = 'width';

    /*
     *
     */
    var getDocumentElement = function() {

        // document.body can be null when refreshing.
        if (!document || !document.body) {
            return null;
        }

        var result = (document.documentElement &&
            document.compatMode === kModernCss
        ) ? document.documentElement : document.body;

        getDocumentElement = function() {
            return result;
        };

        return result;
    };

    /**
     * @function {static} o2.Dom.getDimension
     *
     * <p>Gets the dimension of the given element in the form
     * <code>{width: w, height: h}</code>, where <strong>w</strong> and
     * <strong>h</strong> are in pixels.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var dimensions = o2.Dom.getDimension('container');
     * </pre>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     *
     * @return the dimension of the <strong>DOMNode</strong> in the form
     * <code>{width: w, height: h}</code>.
     */
    exports.getDimension = def(me, 'getDimension', function(obj) {
        obj = $(obj);

        if (!obj || obj.offsetWidth === UNDEFINED) {
            return {width : 0, height : 0};
        }

        return {
            width : obj.offsetWidth,
            height : obj.offsetHeight
        };
    });

    /*
     *
     */
    var getDimension = require(kModuleName, 'getDimension');

    /**
     * @function {static} o2.Dom.getDocumentDimension
     *
     * <p>Gets the dimension of the document in the form <code>{width: w,
     * height: h}</code>. If the visible (i.e. <code>clientHeight</code>) is
     * greater than the document's height returns the height of the visible
     * area as the height portion.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var viewportInfo = o2.Dom.getDocumentDimension();
     * </pre>
     *
     * @return the dimension of the document in the form <code>{width: w,
     * height: h}</code>.
     */
    exports.getDocumentDimension = def(me, 'getDocumentDimension', function() {
        var doc = getDocumentElement();

        if(!doc) {
            return {width : 0, height : 0};
        }

        return {
            width : Math.max(
                doc.scrollHeight,
                doc.offsetHeight,
                doc.clientHeight
            ),
            height : Math.max(
                doc.scrollWidth,
                doc.offsetWidth,
                doc.clientWidth
            )
        };
    });

    /*
     *
     */
    var getDocumentDimension = require(kModuleName, 'getDocumentDimension');

    /**
     * @function {static} o2.Dom.getDocumentHeight
     *
     * <p>Gets the total height of the document in pixels.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var viewportHeight = o2.Dom.getDocumentHeight();
     * </pre>
     *
     * @return the document's height.
     */
    exports.getDocumentHeight = def(me, 'getDocumentHeight', function() {
        return getDocumentDimension().height;
    });

    /**
     * @function {static} o2.Dom.getDocumentWidth
     *
     * <p>Gets the total width of the document in pixels.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var viewportWidth = o2.Dom.getDocumentWidth();
     * </pre>
     *
     * @return the document's width.
     */
    exports.getDocumentWidth = def(me, 'getDocumentWidth', function() {
        return getDocumentDimension().width;
    });

    /**
     * @function {static} o2.Dom.getHeight
     *
     * <p>Gets the <strong>height</strong> of the given element, in pixels.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var containerHeight = o2.Dom.getHeight('container');
     * </pre>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     *
     * @return the height of the element, in pixels.
     */
    exports.getHeight = def(me, 'getHeight', function(obj) {
        return getDimension(obj).height;
    });

    /**
     * @function {static} o2.Dom.getViewportInfo
     *
     * <p>Gets the viewport information in the form
     * <code>{scrollTop : #, scrollLeft: #, width: #, height: #}</code>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var details = o2.Dom.getViewportInfo();
     * </pre>
     *
     * @return the viewport information.
     */
    exports.getViewportInfo = def(me, 'getViewportInfo', function() {
        var d  = getDocumentElement();

        if (!d) {
            return {
                scrollTop  : 0,
                scrollLeft : 0,
                width      : 0,
                height     : 0
            };
        }

        return {
            scrollTop  : d.scrollTop,
            scrollLeft : d.scrollLeft,
            width      : self.innerWidth  || d.clientWidth,
            height     : self.innerHeight || d.clientHeight
        };
    });

    /**
     * @function {static} o2.Dom.getWidth
     *
     * <p>Gets the <strong>width</strong> of the given element, in pixels.</p>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var elementWidth = o2.Dom.getWidth('container');
     * </pre>
     *
     * @return the width of the element, in pixels.
     */
    exports.getWidth = def(me, 'getWidth', function(obj) {
        return getDimension(obj).width;
    });

    if (window.innerWidth !== UNDEFINED) {

        /**
         * @function {static} o2.Dom.getWindowInnerDimension
         *
         * <p>Gets the dimension of the visible area of the browser in the form
         * <code>{width: w, height: h}</code>.
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var windowDimensions = o2.Dom.getWindowInnerDimension();
         * </pre>
         *
         * @return the dimension of the visible area of the browser in the form
         * <code>{width: w, height: h}</code>.
         */
        exports.getWindowInnerDimension = def(me, 'getWindowInnerDimension',
                    function() {
            return {
                width  : window.innerWidth  || 0,
                height : window.innerHeight || 0
            };
        });
    } else {
        exports.getWindowInnerDimension = def(me, 'getWindowInnerDimension',
                    function() {
            var doc = getDocumentElement();

            if (!doc) {
                return {width : 0, height : 0};
            }

            return {
                width  : doc.clientWidth  || 0,
                height : doc.clientHeight || 0
            };
        });
    }

    /*
     *
     */
    var getWindowInnerDimension = require(kModuleName, 'getWindowInnerDimension');

    /**
     * @function {static} o2.Dom.getWindowInnerHeight
     *
     * <p>Gets the inner height of the visible area.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var innerHeight = o2.Dom.getWindow.innerHeight();
     * </pre>
     *
     * @return the inner height of the window in pixels.
     */
    exports.getWindowInnerHeight = def(me, 'getWindowInnerHeight', function() {
        return getWindowInnerDimension().height;
    });

    /**
     * @function {static} o2.Dom.getWindowInnerWidth
     *
     * <p>Gets the inner width of the visible area.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var innerWidth = o2.Dom.getWindowInnerWidth();
     * </pre>
     *
     * @return the inner width of the window in pixels.
     */
    exports.getWindowInnerWidth = def(me, 'getWindowInnerWidth', function() {
        return getWindowInnerDimension().width;
    });

    /**
     * @function {static} o2.Dom.setWidth
     *
     * <p>Sets the <strong>width</strong> of the given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.setWidth('container', 500);
     * </pre>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     * @param {Integer} width - the new width in pixels.
     */
    exports.setWidth = def(me, 'setWidth', function(obj, width) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        var difference = 0;
        var cssWidth   = 0;

        // IE (as always) doesn't play nice with the box model.
        // The calculation below takes care of that.
        // Also note that since offsetWidth is a read-only property
        // we can only change the element's width through it's style
        // collection.

        if (obj.offsetWidth !== UNDEFINED) {
            setStyle(obj, kWidth, concat(width, kPixel));
            difference = obj.offsetWidth - width;
        }

        if (isNaN(difference)) {
            difference = 0;
        }

        cssWidth = width - difference;

        if (cssWidth <= 0) {
            return;
        }

        setStyle(obj, kWidth, concat(width, kPixel));
    });

    /*
     *
     */
    var setWidth = require(kModuleName, 'setWidth');

    /**
     * @function {static} o2.Dom.setHeight
     *
     * <p>Sets the <strong>height</strong> of the given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.setHeight('container', 300);
     * </pre>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     * @param {Integer} height - the new height in pixels.
     */
     exports.setHeight = def(me, 'setHeight', function(obj, height) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        var difference = 0;
        var cssHeight  = 0;

        if (obj.offsetWidth !== UNDEFINED) {
            setStyle(obj, kHeight, concat(height, kPixel));
            difference = obj.offsetHeight - height;
        }

        if (isNaN(difference)) {
            difference = 0;
        }

        cssHeight = height - difference;

        if (cssHeight <= 0) {
            return;
        }

        setStyle(obj, kHeight, concat(height, kPixel));
    });


    /*
     *
     */
    var setHeight = require(kModuleName, 'setHeight');

    /**
     * @function {static} o2.Dom.setDimension
     *
     * <p>Sets the dimension of the given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.setDimension('container', {width: 400, height: 200});
     * </pre>
     *
     * @param {Object} obj - the <strong>DOMNode</strong> to get the dimension
     * of, or the <code>String</code> <strong>id</strong> of it.
     * @param {Object} dimension - the new dimension in the form
     * <code>{width: w, height: h}</code>.
     */
    exports.setDimension = def(me, 'setDimension', function(obj, dimension) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        setWidth(obj, dimension.width);
        setHeight(obj, dimension.height);
    });
}(this.o2, this, this.document));
/**
 * @module   dom.form
 * @requires core
 * @requires dom.core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A HTML <code>Form</code> utility class.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (form)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var kString = 'String';
    var compact = require(kString, 'compact');
    var trim    = require(kString, 'trim');

    /*
     * Common Constants
     */
    var kPlaceholder = 'placeholder';
    var kEmpty       = '';

    /**
     * @function {static} o2.Dom.compactField
     *
     * <p>Trims a given field, and returns the compacted value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.compactField('txtInput');
     * </pre>
     *
     * @param {Object} field - the field to be compacted, or its
     * <strong>id</strong>.
     *
     * @return field's compacted value; or <code>null</code> if the field
     * does not exist.
     *
     * @see o2.String.compact
     */
    exports.compactField = def(me, 'compactField', function(field) {
        field = $(field);

        if (!field) {
            return null;
        }

        field.value = compact(field.value);

        return field.value;
    });

    /**
     * @function {static} o2.Dom.trimField
     *
     * <p>Trims a given field, and returns the trimmed value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.trimField('txtInput');
     * </pre>
     *
     * @param {Object} field - the field to be trimmed, or its
     * <strong>id</strong>.
     *
     * @return field's trimmed value; or <code>null</code> if the field
     * does not exist.
     *
     * @see o2.String.trim
     */
    exports.trimField = def(me, 'trimField', function(field) {
        field = $(field);

        if (!field) {
            return null;
        }

        field.value = trim(field.value);

        return field.value;
    });

    /**
     * @function {static} o2.Dom.preventMultipleSubmit
     *
     * <p>Prevents the form to re-submit itself when the submit button
     * is pressed more than once.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.preventMultipleSubmit('actionForm');
     * </pre>
     *
     * @param {Object} form - A <strong>DOM</strong> reference to the form
     * object or its <code>String</code> id.
     */
    exports.preventMultipleSubmit = def(me, 'preventMultipleSubmit',
                function(form) {
        form = $(form);

        if (!form) {
            return;
        }

        form.onsubmit = function() {
            form.onsubmit = function() {
                return false;
            };

            return true;
        };
    });

    //TODO: add documentation.
    exports.removePlaceholder = def(me, 'removePlaceholder', function(elm) {
        var target = $(elm);

        if (!target) {
            return;
        }

        if(target.getAttribute(kPlaceholder) === target.value) {
            target.value = kEmpty;
        }
    });

    //TODO: add documentation.
    exports.resetField = def(me, 'resetField', function(elm) {
        var item = $(elm);

        if (!item) {
            return;
        }

        item.value = kEmpty;
    });

    //TODO: add documentation.
    exports.disable = def(me, 'disable', function() {
        var i    = 0;
        var item = null;
        var len  = 0;

        for(i = 0, len = arguments.length; i < len; i++) {
            item = $(arguments[i]);

            if(item) {
                item.disabled = true;
            }
        }
    });
}(this.o2));
/**
 * @module   dom.load
 * @requires core
 * @requires dom.core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>This package is for asynchronously loading resources such as images and
 * scripts.</p>
 */
(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (load)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var myName = require('name');
    var nill   = require('nill');

    var kString       = 'String';
    var concat        = require(kString, 'concat');
    var format        = require(kString, 'format');
    var generateGuid  = require(kString, 'generateGuid');

    var Image                = attr(window,   'Image');
    var setTimeout           = attr(window,   'setTimeout');
    var createElement        = attr(document, 'createElement');
    var getElementsByTagName = attr(document, 'getElementsByTagName');
    var sheets               = attr(document, 'styleSheets');

    /*
     * Common Strings
     */
    var kCssId      = concat(myName, '-css-{0}');
    var kHead       = 'head';
    var kLink       = 'link';
    var kRel        = 'rel';
    var kScript     = 'script';
    var kScriptType = 'text/javascript';
    var kSheet      = 'stylesheet';
    var kSheetType  = 'text/css';

    /*
     * Common Constants
     */
    var kCssCheckInterval   = 100;
    var kMaxCssCheckAttempt = 500;

    /*
     * Common Regular Expressions
     */
    var kCompleteRegExp = /loaded|complete/;

    var kM$     = 'MSIE';
    var isCrap  = window.navigator.userAgent.indexOf(kM$) > -1 && !window.opera;
    var isOpera = !!window.opera;

    /**
     * @function {static} o2.Dom.loadCss
     *
     * <p>Asynchronously loads a <strong>css</strong> file with a given
     * <strong>src</strong>.</p>
     * <p>Cross-domain loading is also okay: The <strong>css</strong> file does
     * not have to be in the same domain as the web page.</p>
     *
     * <p>The success and failure callbacks is a somewhat hacky way of handling
     * <strong>CSS</strong> load events. In deed, detecting <strong>CSS</strong>
     * load is not an easy task, and it's not necessary most of the time.</p>
     * <p>Though it may get handy to prevent the Flash of Unstyled Content
     * (FOUC) issues.</p>
     * <p>A more robust way of handling load callbacks is polling
     * the property of a test element (such as the background color), that
     * you know that the loaded <strong>CSS</strong> will change for sure.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.loadCss('http://cdn.example/com/theme.css', function() {
     *      handleSuccess();
     * });
     * </pre>
     *
     * @param {String} src - the source <strong>URL</strong> of the
     * <strong>css</strong> file.
     * @param {Function} successCallback - the callback to execute when the load
     * operation completes.
     */
    exports.loadCss = def(me, 'loadCss', function(src, successCallback) {
        var s = createElement(kLink);
        var x = getElementsByTagName(kHead)[0];

        var id      = format(kCssId, generateGuid());
        var counter = 0;

        var onsuccess = successCallback || nill;

        s.setAttribute(kRel, kSheet);

        s.id   = id;
        s.type = kSheetType;
        s.href = src;

        x.appendChild(s);

        // for MSIE
        if (isCrap) {
            s.onreadystatechange = function() {
                if(kCompleteRegExp.test(s.readyState)) {
                    onsuccess();
                    onsuccess = nill;
                }
            };

            return;
        }

        // for Opera
        if (isOpera) {
            s.onload = function() {
                onsuccess();
                onsuccess = nill;
            };

            return;
        }

        // worst-case fallback
        setTimeout(function check() {
            var i     = 0;
            var len   = 0;
            var sheet = null;

            if (onsuccess === nill) {
                return;
            }

            for (i = 0, len = sheets.length; i < len; i++) {
                sheet = sheets[i];
                sheet = sheet.ownerNode || sheet.owningElement;

                if (sheet && sheet.id === id) {
                    onsuccess();
                    onsuccess = nill;

                    break;
                }
            }

            counter++;

            if(counter <= kMaxCssCheckAttempt) {
                setTimeout(check, kCssCheckInterval);
            } else {
                onsuccess();
                onsuccess = nill;
            }
        }, kCssCheckInterval);
    });

    /**
     * @function {static} o2.Dom.loadImage
     *
     * <p>Tries to load the image into a <strong>JavaScript</strong>
     * <code>Image</code> object; then triggers
     * <code>successCallback</code> or <code>failureCallback</code> depending on
     * the
     * result of the load attempt.</p>
     * <p>This function can be used for pre-loading or post-loading images.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.loadImage('http//asset.example.com/spinner.png', function() {
     *      handleSuccess();
     * });
     * </pre>
     *
     * @param {String} url - the <strong>URL</strong> of the
     * <strong>image</strong>.
     * @param {Function} successCallback - gets called when the
     * <strong>image</strong> is loaded successfully.
     */
    exports.loadImage = def(me, 'loadImage', function(url, succesCallback) {
        var succesCallbackCached = succesCallback || nill;

        function done() {
            succesCallbackCached();
            succesCallbackCached = nill;
        }

        var testImg = new Image();

        testImg.onload  = done;
        testImg.onerror = done;
        testImg.onabort = done;
        testImg.src     = url;

        return testImg;
    });

    /**
     * @function {static} o2.Dom.loadScript
     *
     * <p>Asynchronously loads a <strong>script</strong> with a given
     * <strong>src</strong>.</p>
     * <p>Cross-domain loading is also okay: The <strong>script</strong> does not
     * have to be in the same domain as the web page.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.loadImage('http//asset.example.com/script.js', function() {
     *      handleSuccess();
     * });
     * </pre>
     *
     * @param {String} src - the source <strong>URL</strong> of the
     * <strong>script</strong>.
     * @param {Function} callback - the callback to execute when the load
     * operation completes.
     */
    exports.loadScript = def(me, 'loadScript', function(src, callback) {
        var s = createElement(kScript);
        var x = getElementsByTagName(kScript)[0] ||
            getElementsByTagName(kHead)[0];

        s.type = kScriptType;
        s.async = true;
        s.src = src;

        x.parentNode.insertBefore(s, x);

        if (!callback) {
            return;
        }

        s.onreadystatechange = function() {
            if(kCompleteRegExp.test(s.readyState)) {
                callback();
            }
        };

        s.onload = function() {
            callback();
        };
    });
}(this.o2, this, this.document));
/**
 * @module   dom.modify
 * @requires core
 * @requires dom.core
 * @requires stringhelper.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A utility package for additional <strong>DOM</strong> modifications.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     *
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var append       = require(kModuleName, 'append');
    var insertAfter  = require(kModuleName, 'insertAfter');
    var insertBefore = require(kModuleName, 'insertBefore');
    var isElement    = require(kModuleName, 'isElement');
    var remove       = require(kModuleName, 'remove');

    /**
     * @function {static} o2.Dom.replace
     *
     * <p>Replaces one node with another.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.replace('firstContainer', 'secondContainer');
     * </pre>
     *
     * @param elmTarget - the target node or its <code>String</code> id.
     * @param elmToReplace - the replacement node or its <code>String</code> id.
     */
    exports.replace = def(me, 'replace', function(elmTarget, elmToReplace) {
        var target  = $(elmTarget);
        var replace = $(elmToReplace);

        append(target, replace);
        remove(target);
    });

    /**
     * @function {static} o2.Dom.unwrap
     *
     * <p>This is like {@link o2.Dom.wrap} in reverse.</p>
     * <p>Moves all the elements inside the container to the container's
     * position and removes the container from the <strong>DOM</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.unwrap('container');
     * </pre>
     *
     * @param {Object} elmTarget - the target node or its <code>String</code> id
     * to unwrap.
     */
    exports.unwrap = def(me, 'unwrap', function(elmTarget) {
        var target = $(elmTarget);

        if (!target) {
            return;
        }

        var child = null;

        while (target.hasChildNodes()) {
            child = remove(target.firstChild);

            if (isElement(child)) {
                insertAfter(child, target);
            }
        }

        remove(target);
    });

    /**
     * @function {public static} o2.Dom.wrap
     *
     * <p>Puts the target element into the wrapper element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var wrapper = o2.$('wrapper');
     * var target = o2.$('content');
     * o2.Dom.wrap(target, wrapper);
     * </pre>
     *
     * @param {Object} elmTarget - the node to wrap or its <code>String</code>
     * id.
     * @param {Object} elmWrapper - the wrapper node ot its <code>String</code>
     * id.
     *
     * @return the wrapped node.
     */
    exports.wrap = def(me, 'wrap', function(elmTarget, elmWrapper) {
        var target  = $(elmTarget);
        var wrapper = $(elmWrapper);

        if (!target || !wrapper) {
            return;
        }

        insertBefore(wrapper, target);
        append(target, wrapper);

        return elmTarget;
    });
}(this.o2));
/**
 * @module   dom.ready
 * @requires core
 * @requires dom.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A helper to fire events when the <code>DOM</code> content is loaded.</p>
 */

(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (ready)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var nill       = require('nill');

    var setTimeout = attr(window, 'setTimeout');

    /*
     * Common Constants
     */
    var kCheckIntervalMs    = 50;
    var kDomContentLoaded   = 'DOMContentLoaded';
    var kLoad               = 'load';
    var kOnLoad             = 'onload';
    var kOnReadyStateChange = 'onreadystatechange';
    var kPropertyToCheck    = 'left';

    /*
     * Common Regular Expressions
     */
    var kDomLoadedRegExp = /^loade|c/;

    /*
     *
     */
    function isDomContentReady() {
        return (kDomLoadedRegExp).test(document.readyState);
    }

    /*
     * State
     */
    var isApplicationReady = isDomContentReady();
    var readyQueue         = [];

    /*
     *
     */
    function flushReadyQueue() {
        isApplicationReady = true;

        while (readyQueue.length > 0) {

            // An error in the ready queue should
            // not prevent the remaining actions from firing
            try {
                readyQueue.pop()();
            } catch(ignore) {
            }
        }

        // undocumented!
        // A flag to set that the framework is ready and responsive.
        me.isReady = true;
    }

    /*
     * DOM Content ready check for MSIE.
     * http://javascript.nwbox.com/IEContentLoaded/
     */
    var checkScrollLeft = function() {
        try {
            document.documentElement.doScroll(kPropertyToCheck);
        } catch(e) {
            setTimeout(checkScrollLeft, kCheckIntervalMs);

            return;
        }

        flushReadyQueue();

        checkScrollLeft = nill;
    };

    /*
     *
     */
    var onMozDomContentLoaded = function() {
        document.removeEventListener(kDomContentLoaded, onMozDomContentLoaded,
            false);

        flushReadyQueue();

        onMozDomContentLoaded = nill;
    };

    /*
     *
     */
    var onMozWindowLoad = function() {
        document.removeEventListener(kLoad, onMozWindowLoad, false);

        flushReadyQueue();

        onMozWindowLoad = nill;
    };

    /*
     *
     */
    var onIEDomContentLoaded = function() {
        if (!isDomContentReady()) {
            return;
        }

        document.detachEvent(kOnReadyStateChange, onIEDomContentLoaded);

        flushReadyQueue();

        onIEDomContentLoaded = nill;
    };

    /*
     *
     */
    var onIEWindowLoaded = function() {
        window.detachEvent(kOnLoad, onIEWindowLoaded);

        flushReadyQueue();

        onIEDomContentLoaded = nill;
    };

    /*
     *
     */
    var bindReadyListeners = nill;

    if (document.addEventListener) {

        // Mozilla, Opera, webkit
        bindReadyListeners = function() {

            //Listen to native on dom content loaded event.
            document.addEventListener(kDomContentLoaded, onMozDomContentLoaded,
                false);

            //Worst-case fallback
            window.addEventListener(kLoad, onMozWindowLoad, false);

            //Do not process further calls.
            bindReadyListeners = nill;
        };
    } else if (document.attachEvent) {

        // MSIE
        bindReadyListeners = function() {

            // Listen to ready state change.
            document.attachEvent(kOnReadyStateChange, onIEDomContentLoaded);

            // Worst-case fallback
            window.attachEvent(kOnLoad, onIEWindowLoaded);

            // If the document is not an IFRAME then ready state has no use,
            var isIframe = window.self !== window.top;

            // so apply an alternative trick.
            if (!isIframe) {
                checkScrollLeft();
            }

            // Do not process further calls.
            bindReadyListeners = nill;
        };
    } else {

        // Fallback for really archaic browsers.
        bindReadyListeners = function() {
            var cached = window.onload || nill;

            window.onload = function(e) {
                flushReadyQueue();
                cached(e);
            };

            // Do not process further calls.
            bindReadyListeners = nill;
        };
    }

    /**
     * @function {static} o2.Dom.ready
     *
     * <p>Fires when the <code>HTML DOM</code> is ready.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.ready(function() {
     *      doInitializaton();
     * });
     * </pre>
     *
     * @param {Function} delegate - the callback that's called when the DOM is
     * ready.
     */
    exports.ready = def(me, 'ready', function(delegate) {

        // if DOM is ready, execute the delegate immediately.
        if (isApplicationReady) {
            delegate();

            return;
        }

        // Otherwise, check for the DOM's ready state.
        bindReadyListeners();

        // this queue will be processed "only once" after DOM is ready.
        readyQueue.push(delegate);
    });
}(this.o2, this, this.document));
/**
 * @module   dom.scroll
 * @requires core
 * @requires dom.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A window/div scroll helper.</p>
 */
(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (scroll)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $ = require('$');

    var de       = document.documentElement;
    var scrollTo = attr(window, 'scrollTo');

    if(de) {

        /**
         * @function {static} o2.Dom.getWindowScrollOffset
         *
         * <p>Gets the <strong>window</strong>'s scroll offset.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var offsets = o2.Dom.getWindowScrollOffset();
         * </pre>
         *
         * @return the the <strong>window</strong>'s scroll offset in the form
         * <code>{left: l, top: t}</code>.
         */
        exports.getWindowScrollOffset = def(me, 'getWindowScrollOffset',
                    function() {
            var db = document.body;

            var left = 0;
            var top  = 0;

            // document.body may not be immediately available if
            // the script is placed in HEAD. check for it.
            if (db) {
                left = Math.max(db.scrollLeft, de.scrollLeft);
                top  = Math.max(db.scrollTop, de.scrollTop);
            } else {
                left = de.scrollLeft;
                top  = de.scrollTop;
            }

            return {
                left : left,
                top  : top
            };
        });
    } else {
        exports.getWindowScrollOffset = def(me, 'getWindowScrollOffset',
                    function() {
            var db = document.body;

            var left = 0;
            var top  = 0;

            // document.body may not be immediately available if
            // the script is placed in HEAD. check for it.
            if (db) {
                left = db.scrollLeft;
                top  = db.scrollTop;
            }

            return {
                left : left,
                top  : top
            };
        });
    }

    /*
     *
     */
    var getWindowScrollOffset = require(kModuleName, 'getWindowScrollOffset');

    /**
     * @function {static} o2.Dom.getObjectScrollOffset
     *
     * <p>Gets the <strong>DOM</strong> object's scroll offset.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var offsets = o2.Dom.getObjectScrollOfset('container');
     * </pre>
     *
     * @param {Object} obj - the <strong>DOM</strong> node to check, or its
     * <code>String</code> id.
     *
     * @return the the <strong>DOM</strong> object's scroll offset in the form
     * <code>{left: l, top: t}</code>.
     */
    exports.getObjectScrollOffset = def(me, 'getObjectScrollOffset',
                function(obj) {
        var item = $(obj);

        if (obj === window) {
            return getWindowScrollOffset();
        }

        return {
            left : item.scrollLeft,
            top  : item.scrollTop
        };
    });

    /**
     * @function {static} o2.Dom.getScrollOffset
     *
     * <p>An alias to {@link o2.Dom.getObjectStrollOffset}.</p>
     *
     * @see o2.Dom.getObjectScrollOffset
     */
    exports.getScrollOffset = alias(me, 'getScrollOffset',
        'getObjectScrollOfset');

    if (de) {

        /**
         * @function {static} o2.Dom.scrollWindowToBottom
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Dom.scrollWindowToBottom();
         * </pre>
         *
         * <p>Scrolls window to bottom.</p>
         */
        exports.scrollWindowToBottom = def(me, 'scrollWindowToBottom',
                    function() {
            var db = document.body;

            if (!db) {
                return;
            }

            db.scrollTop = db.scrollHeight;
            de.scrollTop = de.scrollHeight;
        });
    } else {
        exports.scrollWindowToBottom = def(me, 'scrollWindowToBottom',
                    function() {
            var db = document.body;

            if (!db) {
                return;
            }

            db.scrollTop = db.scrollHeight;
        });
    }

    /*
     *
     */
    var scrollWindowToBottom = require(kModuleName, 'scrollWindowToBottom');

    if (de) {

        /**
         * @function {static} o2.Dom.scrollWindowToTop
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * o2.Dom.scrollWindowToTop();
         * </pre>
         *
         * <p>Scrolls window to top.</p>
         */
        exports.scrollWindowToTop = def(me, 'scrollWindowToTop', function() {
            var db = document.body;

            if (!db) {
                return;
            }

            db.scrollTop = 0;
            de.scrollTop = 0;
        });
    } else {
        exports.scrollWindowToTop = def(me, 'scrollWindowToTop', function() {
            var db = document.body;

            if (!db) {
                return;
            }

            db.scrollTop = 0;
        });
    }

    /*
     *
     */
    var scrollWindowToTop = require(kModuleName, 'scrollWindowToTop');

    /**
     * @function {static} o2.Dom.scrollObjectToTop
     *
     * <p>Scrolls an element to top.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.scrollObjectToTop('container');
     * </pre>
     *
     * @param {Object} obj - the element, or the <strong>id</strong> of the
     * element, to scroll.
     */
    exports.scrollObjectToTop = def(me, 'scrollObjectToTop', function(obj) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        if(obj === window) {
            scrollWindowToTop();
        }

        obj.scrollTop = 0;
    });

    /**
     * @function {static} o2.Dom.scrollObjectToBottom
     *
     * <p>Scrolls an element to bottom.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Dom.scrollObjectToBottom('container');
     * </pre>
     *
     * @param {Object} obj - the element, or the <strong>id</strong> of it, to
     * scroll.
     */
    exports.scrollObjectToBottom = def(me, 'scrollObjectToBottom',
                function(obj) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        if (obj === window) {
            scrollWindowToBottom();
        }

        obj.scrollTop = obj.scrollHeight;
    });

    /**
     * @function {static} o2.Dom.scrollTo
     *
     * <p>An alias to {@link o2.Dom.scrollWindowToObject}.</p>
     *
     * @see o2.Dom.scrollWindowToObject
     */
    exports.scrollTo = def(me, 'scrollTo', function(obj) {
        obj = $(obj);

        if (!obj) {
            return;
        }

        if (obj === window) {
            return;
        }

        var offset = me.getOffset(obj);

        scrollTo(offset.left, offset.top);
    });

    /**
     * @function {static} o2.Dom.scrollWindowToObject
     *
     * <p>An alias to {@link o2.Dom.scrollWindowToObject}.</p>
     *
     * @see o2.Dom.scrollWindowToObject
     */
    exports.scrollWindowToObject = alias(me, 'scrollWindowToObject', 'scrollTo');

    /**
     * @function {static} o2.Dom.scrollToObject
     *
     * <p>An alias to {@link o2.Dom.scrollWindowToObject}.</p>
     *
     * @see o2.Dom.scrollWindowToObject
     */
    exports.scrollToObject = alias(me, 'scrollToObject', 'scrollTo');
}(this.o2, this, this.document));
/**
 * @module   dom.traverse
 * @requires collection.core
 * @requires core
 * @requires dom.class
 * @requires dom.core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A utility package for traversing the <code>DOM</code>.</p>
 */
(function(framework, document, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Class Name
     */
    var kModuleName = 'Dom';

    /*
     * Dom (traverse)
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var $      = require('$');
    var myName = require('name');

    var kAll   = '*';
    var kEmpty = '';

    var nodeType  = require(kModuleName, 'nodeType');
    var kTextNode = attr(nodeType, 'TEXT');

    var getAttribute = require(kModuleName, 'getAttribute');

    var kString       = 'String';
    var format        = require(kString, 'format');
    var generateGuid  = require(kString, 'generateGuid');

    var contains = require('Collection', 'contains');

    /*
     * Selectors
     */
    var kImmediateClassSelector       = '#{0} > .{1}';
    var kImmediateClassAndTagSelector = '#{0} > {1}.{2}';

    /*
     * Checks document.querySelector support.
     * Using document.documentMode for IE, since the compatMode property is
     * deprecated in IE8+ in favor of the documentMode property, and IE7-
     * does not suppory document.querySelector anyway.
     * ref: http://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx
     */
    var isNativeQuerySupported =
        (document.documentMode && document.documentMode >= 8) ||
        (!!document.querySelector);

    /*
     * Checks whether two nodes are equal to one another.
     */
    function isNodeEquals(node, until) {
        if (!node) {
            return false;
        }

        if (!until) {
            return false;
        }

        return $(node) === $(until);
    }

    /*
     * Does the node hava that class?
     */
    function hasClassName(node, name) {
        return node && node.className.indexOf(name) > -1;
    }

    /*
     * Does the node have a given `attribute = value` pair?
     */
    function isAttributeEquals(node, attribute, value) {
        return getAttribute(node, attribute) === value;
    }

    /*
     * Does the node have a given attribute.
     */
    function hasAttribute(node, attribute) {
        return getAttribute(node, attribute) !== UNDEFINED;
    }

    /*
     * Does the node have a class?
     */
    function hasClassAttribute(node) {
        return node && !!node.className;
    }

    /*
     * Does the node have an id?
     */
    function hasIdAttribute(node) {
        return node && !!node.id;
    }

    /*
     * Filters a set of nodes into a smaller subset.
     */
    function filter(nodes, filterDelegate, filterArgs,
                breakDelegate, breakArgs, itemsCountCap, returnSingleItemAt,
                isReverse) {
        var result = [];
        var i = 0;
        var node = null;
        var fArgs = filterArgs;
        var counter = 0;
        var len = 0;

        if (!nodes) {
            return [];
        }

       var cache = [];

        if (!!isReverse) {
            for (i = nodes.length - 1; i >= 0; i--) {
                cache.push(nodes[i]);
            }
        } else {
            cache = nodes;
        }

        for (i = 0, len = cache.length; i < len; i++) {
            node = cache[i];

            if(breakDelegate) {
                breakArgs.unshift(node);

                if(breakDelegate.apply(node, breakArgs)) {
                    break;
                }
            }

            if (node.nodeType !== kTextNode) {
                if (filterDelegate) {
                    fArgs.unshift(node);

                    if(filterDelegate.apply(node, fArgs)) {
                        counter++;

                        if (!isNaN(returnSingleItemAt) &&
                                    returnSingleItemAt === counter) {
                            return node;
                        }

                        result.push(node);

                        if (!isNaN(itemsCountCap) && itemsCountCap <= counter) {
                            break;
                        }
                    }
                } else {
                    counter++;

                    if (!isNaN(returnSingleItemAt) &&
                                returnSingleItemAt === counter) {
                        return node;
                    }

                    result.push(node);

                    if (!isNaN(itemsCountCap) && itemsCountCap <= counter) {
                        break;
                    }
                }
            }
        }

        if (!isNaN(returnSingleItemAt)) {
            return null;
        }

        return result;
    }

    /*
     * A multipurpose method to get next/previous sibling(s).
     */
    //TODO: this name is misleading, rename
    function getNextSiblings(elm,
                filterDelegate, filterArgs,
                breakDelegate, breakArgs,
                name, itemsCountCap, returnSingleItemAt,
                shouldStartAtFirstSibling, isReverse) {
        if (!elm) {
            return [];
        }

        var next = null;
        var result = [];
        var counter = 0;

        while (true) {
            if (!next && !!shouldStartAtFirstSibling) {
                next = !!isReverse ?
                    elm.parentNode.lastChild :
                    elm.parentNode.firstChild;
            } else {
                next = !!isReverse ?
                    elm.getPreviousSibling :
                    elm.getNextSibling;
            }

            if(breakDelegate) {
                breakArgs.unshift(next);

                if(breakDelegate.apply(next, breakArgs)) {
                    break;
                }
            }

            if (next.nodeType !== kTextNode) {
                if (name) {
                    if (next.nodeName === name) {
                        if (filterDelegate) {
                            filterArgs.unshift(next);

                            if (filterDelegate.apply(next, filterArgs)) {
                                counter++;

                                if (!isNaN(returnSingleItemAt) &&
                                            returnSingleItemAt === counter) {
                                    return next;
                                }

                                result.push(next);


                                if (!isNaN(itemsCountCap) &&
                                            itemsCountCap <= counter) {
                                    break;
                                }
                            }
                        } else {
                            counter++;

                            if (!isNaN(returnSingleItemAt)&&
                                        returnSingleItemAt === counter) {
                                return next;
                            }

                            result.push(next);


                            if (!isNaN(itemsCountCap) &&
                                        itemsCountCap <= counter) {
                                break;
                            }
                        }
                    }
                } else {
                    if (filterDelegate) {
                        filterArgs.unshift(next);

                        if (filterDelegate.apply(next, filterArgs)) {
                            counter++;

                            if (!isNaN(returnSingleItemAt) &&
                                        returnSingleItemAt === counter) {
                                return next;
                            }

                            result.push(next);

                            if (!isNaN(itemsCountCap) &&
                                        itemsCountCap <= counter) {
                                break;
                            }
                        }
                    } else {
                        counter++;

                        if (!isNaN(returnSingleItemAt) &&
                                    returnSingleItemAt === counter) {
                            return next;
                        }

                        result.push(next);

                        if (!isNaN(itemsCountCap) && itemsCountCap <= counter) {
                            break;
                        }
                    }
                }
            }

            if (!next) {
                break;
            }
        }

        if (returnSingleItemAt !== UNDEFINED) {
            return null;
        }

        return result;
    }

    /*
     * A multifunctional method to get next/previous parent(s).
     */
    //TODO: this name is misleading, rename.
    function getParents(elm,
                filterDelegate, filterArgs,
                breakDelegate, breakArgs,
                name, itemsCountCap, returnSingleItemAt
    ) {
        if (!elm) {
            return [];
        }

        var result = [];
        var target = $(elm);
        var counter = 0;

        target = target.parentNode;

        while (target) {
            if(breakDelegate) {
                breakArgs.unshift(target);

                if(breakDelegate.apply(target, breakArgs)) {
                    break;
                }
            }

            if (name) {
                if (target.nodeName.toLowerCase() === name.toLowerCase()) {
                    if (filterDelegate) {
                        filterArgs.unshift(target);

                        if (filterDelegate.apply(target, filterArgs)) {
                            counter++;

                            if (!isNaN(returnSingleItemAt) &&
                                        returnSingleItemAt === counter) {
                                return target;
                            }

                            result.push(target);

                            if (!isNaN(itemsCountCap) &&
                                        itemsCountCap <= counter) {
                                break;
                            }
                        }
                    } else {
                        counter++;

                        if (!isNaN(returnSingleItemAt) &&
                                    returnSingleItemAt === counter) {
                            return target;
                        }

                        result.push(target);

                        if (!isNaN(itemsCountCap) &&
                                    itemsCountCap <= counter) {
                            break;
                        }
                    }
                }
            } else {
                if (filterDelegate) {
                    filterArgs.unshift(target);

                    if (filterDelegate.apply(target, filterArgs)) {
                        counter++;

                        if (!isNaN(returnSingleItemAt) &&
                                    returnSingleItemAt === counter) {
                            return target;
                        }

                        result.push(target);

                        if (!isNaN(itemsCountCap) &&
                                    itemsCountCap <= counter) {
                            break;
                        }
                    }
                } else {
                    counter++;

                    if (!isNaN(returnSingleItemAt) &&
                                returnSingleItemAt === counter) {
                        return target;
                    }

                    result.push(target);

                    if (!isNaN(itemsCountCap) && itemsCountCap <= counter) {
                        break;
                    }
                }
            }

            target = target.parentNode;
        }

        return result;
    }

    /*
     * Gets child nodes of the elm.
     */
    function getChildNodes(elm, name) {
        var items = elm ? elm.childNodes : [];
        var item = null;
        var i = 0;
        var len = 0;
        var result = [];

        if (!elm) {
            return [];
        }

        if (name) {
            for(i = 0, len = items.length; i < len; i++) {
                item = items[i];

                if (item.nodeName.toLowerCase() === name.toLowerCase()) {
                    result.push(item);
                }
            }
        } else {
            result = items;
        }

        return result;
    }

    /*
     * Executes the filter.
     */
    function execFilter(elm, getter, getterParams,
                checker, checkerParams, stopper, stopperParams, itemsCountCap,
                returnSingleItemAt, isReverse) {
        var target = $(elm);

        if (!target) {
            return [];
        }

        getterParams.unshift(target);

        return filter(
            getter.apply(target, getterParams),
            checker, checkerParams, stopper, stopperParams, itemsCountCap,
            returnSingleItemAt, isReverse
        );
    }

    /**
     * function {static} o2.Dom.getChildren
     *
     * <p>Gets the immediate children (that are not text nodes) of the
     * element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildren('container', 'li');
     * </pre>
     * @param {Object} elm - the <strong>DOM</strong> node, or the
     * <strong>id</strong> of that node.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildren = def(me, 'getChildren', function(elm, name) {
        return execFilter(elm, getChildNodes, [name]);
    });

    /*
     *
     */
    var getChildren = require(kModuleName, 'getChildren');

    /**
     * function {static} o2.Dom.getChildrenByAttribute
     *
     * <p>Gets the immediate children (that are not text nodes) of the
     * element, if they have a matching <strong>attribute</strong> with
     * a given <strong>value</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenByAttribute('container',
     *      'data-user-id', '42');
     * </pre>
     *
     * @param {Object} elm - the <strong>DOM</strong> njode, or the
     * <strong>id</strong> of that node.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenByAttribute = def(me, 'getChildrenByAttribute', function(
                elm, attribute, value, name) {
        // TODO: this comment will be irrelevant after fixing
        // https://github.com/v0lkan/o2.js/issues/58
        //
        // IE7 and IE8 support attribute selectors only if a
        // !DOCTYPE is specified. To maintain compatibility we implement
        // attribute selector without using document.querySelector

        return execFilter(elm, getChildNodes, [name],
            isAttributeEquals, [attribute, value]);
    });

    /*
     *
     */
    var getChildrenByAttribute = require(kModuleName, 'getChildrenByAttribute');

    /**
     * @function {static} o2.Dom.getChildrenByAttributeUntil
     *
     * <p>Gets the children of the element until a given node (exclusive).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenByAttributeUntil('container',
     *      'data-user-id', '42', o2.$('stopper'), 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenByAttributeUntil = def(me, 'getChildrenByAttributeUntil',
            function(elm, attribute, value, until, name) {
        return execFilter(elm, getChildNodes, [name],
            isAttributeEquals, [attribute, value], isNodeEquals, [until]);
    });

    /*
     *
     */
    var getChildrenByAttributeUntil = require(kModuleName,
        'getChildrenByAttributeUntil');

    if (isNativeQuerySupported) {

        /**
         * @function {static} o2.Dom.getChildrenByClass
         *
         * <p>Gets the children of the element having a specific class.</p>
         *
         * <p><strong>Usage example:</strong></p>
         *
         * <pre>
         * var items = o2.Dom.getChildrenByClass('container', 'active', 'li');
         * </pre>
         *
         * @param {Object} elm - the element reference, or a <code>String</code>
         * id of it.
         * @param {String} className - the <strong>CSS</strong> class name.
         * @param {String} name - (Optional; defaults to
         * <code>undefined</code>),
         * if true, only the results with that <strong>node name</strong> (i.e.
         * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
         *
         * @return an <code>Array</code> of nodes, if found; and empty
         * <code>Array</code> if nothing is found.
         */
        exports.getChildrenByClass = def(me, 'getChildrenByClass', function(
                    elm, className, name) {
            var el = $(elm);

            // NOTE: IE7+ supports child selector ( > ),
            // IE8+ supports querySelectorAll
            // So it's safe to use the child selector with querySelectorAll:
            // It'll work as expected in IE8+ and it'll degrade gracefully
            // in IE7-

            if (!el.id) {
                el.id = [myName, generateGuid()].join(kEmpty);
            }

            if (name) {
                return el.querySelectorAll(
                    format(kImmediateClassAndTagSelector, el.id, name,
                        className)
                );
            }

            return el.querySelectorAll(
                format(kImmediateClassSelector, el.id, className)
            );
        });
    } else {
        exports.getChildrenByClass = def(me, 'getChildrenByClass', function(elm,
                    className, name) {
            return execFilter(elm, getChildNodes, [name],
                hasClassName, [className]);
        });
    }

    /*
     *
     */
    var getChildrenByClass = require(kModuleName, 'getChildrenByClass');

    /**
     * @function {static} o2.Dom.getChildrenByClassUntil
     *
     * <p>Gets the children of the element having a specific class, and until
     * (but not included to) a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenByClassUntil('container', 'active',
     *      o2.$('stopper'), 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenByClassUntil = def(me, 'getChildrenByClassUntil',
                function(elm, className, until, name) {
        return execFilter(elm, getChildNodes, [name],
            hasClassName, [className], isNodeEquals, [until]);
    });

    /*
     *
     */
    var getChildrenByClassUntil = require(kModuleName, 'getChildrenByClassUntil');

    /**
     * @function {static} o2.Dom.getChildrenUntil
     *
     * <p>Gets the children of the element until
     * (but not included to) a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenUntil('container', o2.$('stopper'), 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenUntil = def(me, 'getChildrenUntil', function(elm, until,
                name) {
        return execFilter(elm, getChildNodes, [name],
            null, [], isNodeEquals, [until]);
    });

    /*
     *
     */
    var getChildrenUntil = require(kModuleName, 'getChildrenUntil');

    /**
     * @function {static} o2.Dom.getChildrenWithAttribute
     *
     * <p>Gets the children of the element having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithAttribute('container', 'data-user-id',
     * 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithAttribute = def(me, 'getChildrenWithAttribute',
                function(elm, attribute, name) {
        return execFilter(elm, getChildNodes, [name],
            hasAttribute, [attribute]);
    });

    /*
     *
     */
    var getChildrenWithAttribute = require(kModuleName, 'getChildrenWithAttribute');

    /**
     * @function {static} o2.Dom.getChildrenWithAttributeUntil
     *
     * <p>Gets the children of the element with a given attribute defined,
     * and until (but not included to) a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithAttributeUntil('content',
     *      'data-user-id', o2.$('stopper'), 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithAttributeUntil = def(me,
                'getChildrenWithAttributeUntil', function(elm, attribute, until,
                name) {
        return execFilter(elm, getChildNodes, [name],
            hasAttribute, [attribute], isNodeEquals, [until]);
    });

    var getChildrenWithAttributeUntil = require(kModuleName,
        'getChildrenWithAttributeUntil');

    /**
     * @function {static} o2.Dom.getChildrenWithClass
     *
     * <p>Gets the children of the element with a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithClass = def(me, 'getChildrenWithClass', function(elm,
                name) {
        return execFilter(elm, getChildNodes, [name], hasClassAttribute, []);
    });

    /*
     *
     */
    var getChildrenWithClass = require(kModuleName, 'getChildrenWithClass');

    /**
     * @function {static} o2.Dom.getChildrenWithClassUntil
     *
     * <p>Gets the children of the element with a "class" attribute defined,
     * and until (but not included to) a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithClassUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithClassUntil = def(me, 'getChildrenWithClassUntil',
                function(elm, until, name) {
        return execFilter(elm, getChildNodes, [name],
            hasClassAttribute, [], isNodeEquals, [until]);
    });

    /*
     *
     */
    var getChildrenWithClassUntil = require(kModuleName, 'getChildrenWithClassUntil');

    /**
     * @function {static} o2.Dom.getChildrenWithId
     *
     * <p>Gets the children of the element with an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithId = def(me, 'getChildrenWithId', function(elm,
                name) {
        return execFilter(elm, getChildNodes, [name], hasIdAttribute, []);
    });

    /*
     *
     */
    var getChildrenWithId = require(kModuleName, 'getChildrenWithId');

    /**
     * @function {static} o2.Dom.getChildrenWithIdUntil
     *
     * <p>Gets the children of the element with an "id" attribute defined,
     * and until (but not included to) a given element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getChildrenWithIdUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getChildrenWithIdUntil = def(me, 'getChildrenWithIdUntil', function(
                elm, until, name) {
        return execFilter(elm, getChildNodes, [name],
            hasIdAttribute, [], isNodeEquals, [until]);
    });

    /*
     *
     */
    var getChildrenWithIdUntil = require(kModuleName, 'getChildrenWithIdUntil');

    /**
     * @function {static} o2.Dom.getElements
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElements('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElements = def(me, 'getElements', function(elm, name) {
        var target = $(elm);

        if (!target) {
            return [];
        }

        return target.getElementsByTagName(name || kAll);
    });

    /*
     *
     */
    var getElements = require(kModuleName, 'getElements');

    /**
     * @function {static} o2.Dom.getElementsByAttribute
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>, filtering
     * the nodes having a given attribute equals to a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElementsByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * HTML <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElementsByAttribute = def(me, 'getElementsByAttribute',
                function(elm, attribute, value, name) {
        return execFilter(elm, getElements, [name],
            isAttributeEquals, [attribute, value]);
    });

    /**
     * @function {static} o2.Dom.getElementsByClass
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>, having
     * a given <strong>CSS</strong> <strong>class</strong> name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElementsByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElementsByClass = def(me, 'getElementsByClass', function(elm,
                className, name) {
        return execFilter(elm, getElements, [name], hasClassName, [className]);
    });

    /**
     * @function {static} o2.Dom.getElementsWithAttribute
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>, having
     * a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElementsWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElementsWithAttribute = def(me, 'getElementsWithAttribute',
                function(elm, attribute, name) {
        return execFilter(elm, getElements, [name],
            hasAttribute, [attribute], null, []);
    });

    /**
     * @function {static} o2.Dom.getElementsWithClass
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>, having
     * a '<strong>class</strong>" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElementsWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElementsWithClass = def(me, 'getElementsWithClass', function(
                elm, name) {
        return execFilter(elm, getElements, [name],
            hasClassAttribute, [], null, []);
    });

    /**
     * @function {static} o2.Dom.getElementsWithId
     *
     * <p>Gets all of the elements of the node <strong>elm</strong>, having
     * an '<strong>id</strong>" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getElementsWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getElementsWithId = def(me, 'getElementsWithId', function(elm,
                name) {
        return execFilter(elm, getElements, [name], hasIdAttribute, []);
    });

    /**
     * @function {static} o2.Dom.getSiblings
     *
     * <p>Gets the siblings of the element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblings('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblings = def(me, 'getSiblings', function(elm, name) {
        return !elm ? [] : getChildren(elm.parentNode, name);
    });

    /*
     *
     */
    var getSiblings = require(kModuleName, 'getSiblings');

    /**
     * @function {static} o2.Dom.getSiblingsByAttribute
     *
     * <p>Gets the siblings of the element, having a given attribute equals
     * a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsByAttribute = def(me, 'getSiblingsByAttribute', function(
                elm, attribute, value, name) {
        return !elm ? [] : getChildrenByAttribute(elm.parentNode,
            attribute, value, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsByAttributeUntil
     *
     * <p>Gets the siblings of the element, having a given attribute equals
     * a given value, until (but not included to) a specific node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsByAttributeUntil('content', 'data-id',
     *      '42', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsByAttributeUntil = def(me, 'getSiblingsByAttributeUntil',
                function(elm, attribute, value, until, name) {
        return !elm ? [] : getChildrenByAttributeUntil(elm.parentNode,
            attribute, value, until, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsByClass
     *
     * <p>Gets the siblings of the element, having a given class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsByClass = def(me, 'getSiblingsByClass', function(elm,
                name) {
        return !elm ? [] : getChildrenByClass(elm.parentNode, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsByClassUntil
     *
     * <p>Gets the siblings of the element, having a given class name,
     * until (but not included to) a specific node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsByClassUntil('content', 'selected',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsByClassUntil = def(me, 'getSiblingsByClassUntil',
                function(elm, until, name) {
        return !elm ? [] : getChildrenByClassUntil(elm.parentNode, until,
            name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsUntil
     *
     * <p>Gets the siblings of the element until (but not included to) a
     * specific node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsUntil = def(me, 'getSiblingsUntil',  function(elm,
                until, name) {
        return !elm ? [] : getChildrenUntil(elm.parentNode, until, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithAttribute
     *
     * <p>Gets the siblings of the element, having a given attribute
     * defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithAttribute('content', 'dada-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithAttribute = def(me, 'getSiblingsWithAttribute',
                function(elm, attribute, name) {
        return !elm ? [] : getChildrenWithAttribute(elm.parentNode,
            attribute, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithAttributeUntil
     *
     * <p>Gets the siblings of the element, having a given attribute
     * defined, until (but not included to) a specific node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithAttributeUntil('content', 'data-id',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithAttributeUntil = def(me,
                'getSiblingsWithAttributeUntil',  function(elm, attribute,
                until, name) {
        return !elm ? [] : getChildrenWithAttributeUntil(elm.parentNode,
            attribute, until, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithClass
     *
     * <p>Gets the siblings of the element, having "class" attribute
     * defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithClass = def(me, 'getSiblingsWithClass',  function(
                elm, name) {
        return !elm ? [] : getChildrenWithClass(elm.parentNode, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithClassUntil
     *
     * <p>Gets the siblings of the element, having a "class" attribute
     * defined, until (but not included to) a specific node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithClassUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithClassUntil = def(me, 'getSiblingsWithClassUntil',
                function(elm, until, name) {
        return !elm ? [] : getChildrenWithClassUntil(elm.parentNode, until,
            name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithId
     *
     * <p>Gets the siblings of the element, having an "id" attribute
     * defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithId = def(me, 'getSiblingsWithId',  function(elm,
                name) {
        return !elm ? [] : getChildrenWithId(elm.parentNode, name);
    });

    /**
     * @function {static} o2.Dom.getSiblingsWithIdUntil
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getSiblingsWithIdUntil('content', 'stopper', 'li');
     * </pre>
     *
     * <p>Gets the siblings of the element, having an "id" attribute
     * defined, until (but not included to) a specific node.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getSiblingsWithIdUntil = def(me, 'getSiblingsWithIdUntil',
                function(elm, until, name) {
        return !elm ? [] : getChildrenWithIdUntil(elm.parentNode, until, name);
    });

    /**
     * @function {static} o2.Dom.getFirst
     *
     * <p>Gets the first sibling of the element that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirst('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirst = def(me, 'getFirst', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirst = require(kModuleName, 'getFirst');

    /**
     * @function {static} o2.Dom.getFirstByAttribute
     *
     * <p>Gets the first sibling of the element that's not a text node, and
     * having an attibute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstByAttribute = def(me, 'getFirstByAttribute', function(elm,
                attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirstByAttribute = require(kModuleName, 'getFirstByAttribute');

    /**
     * @function {static} o2.Dom.getFirstByClass
     *
     * <p>Gets the first sibling of the element that's not a text node, and
     * having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstByClass = def(me, 'getFirstByClass', function(elm,
                className, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirstByClass = require(kModuleName, 'getFirstByClass');

    /**
     * @function {static} o2.Dom.getFirstWithAttribute
     *
     * <p>Gets the first sibling of the element that's not a text node, and
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstWithAttribute = def(me, 'getFirstWithAttribute', function(
                elm, attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirstWithAttribute = require(kModuleName, 'getFirstWithAttribute');

    /**
     * @function {static} o2.Dom.getFirstWithClass
     *
     * <p>Gets the first sibling of the element that's not a text node, and
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstWithClass = def(me, 'getFirstWithClass', function(elm,
                name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirstWithClass = require(kModuleName, 'getFirstWithClass');

    /**
     * @function {static} o2.Dom.getFirstWithId
     *
     * <p>Gets the first sibling of the element that's not a text node, and
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstWithId = def(me, 'getFirstWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, 0, true);
    });

    /*
     *
     */
    var getFirstWithId = require(kModuleName, 'getFirstWithId');

    /**
     * @function {static} o2.Dom.getFirstChild
     *
     * <p>Gets the first child of the element that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChild('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChild = def(me, 'getFirstChild', function(elm, name) {
        if (!elm) {
            return null;
        }

        return getFirst(elm.firstChild, name);
    });

    /**
     * @function {static} o2.Dom.getFirstChildByAttribute
     *
     * <p>Gets the first child of the element that's not a text node, and
     * having an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChildByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChildByAttribute = def(me, 'getFirstChildByAttribute',
                function(elm, attribute, value, name) {
        if (!elm) {
            return null;
        }

        return getFirstByAttribute(elm.firstChild, attribute, value, name);
    });

    /**
     * @function {static} o2.Dom.getFirstChildByClass
     *
     * <p>Gets the first child of the element that's not a text node, and
     * having a given class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChildByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChildByClass = def(me, 'getFirstChildByClass', function(elm,
                className, name) {
        if (!elm) {
            return null;
        }

        return getFirstByClass(elm.firstChild, className, name);
    });

    /**
     * @function {static} o2.Dom.getFirstChildWithAttribute
     *
     * <p>Gets the first child of the element that's not a text node, and
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChildWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChildWithAttribute = def(me, 'getFirstChildWithAttribute',
                function(elm, attribute, name) {
        if (!elm) {
            return null;
        }

        return getFirstWithAttribute(elm.firstChild, attribute, name);
    });

    /**
     * @function {static} o2.Dom.getFirstChildWithClass
     *
     * <p>Gets the first child of the element that's not a text node, and
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChildWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChildWithClass = def(me, 'getFirstChildWithClass', function(
                elm, name) {
        if (!elm) {
            return null;
        }

        return getFirstWithClass(elm.firstChild, name);
    });

    /**
     * @function {static} o2.Dom.getFirstChildWithId
     *
     * <p>Gets the first child of the element that's not a text node, and
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getFirstChildWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getFirstChildWithId = def(me, 'getFirstChildWithId', function(elm,
                name) {
        if (!elm) {
            return null;
        }

        return getFirstWithId(elm.firstChild, name);
    });

    /**
     * @function {static} o2.Dom.getLast
     *
     * <p>Gets the last sibling of the element that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLast('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLast = def(me, 'getLast', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [], name,
            null, 0, true, true);
    });

    /*
     *
     */
    var getLast = require(kModuleName, 'getLast');

    /**
     * @function {static} o2.Dom.getLastByAttribute
     *
     * <p>Gets the last sibling of the element that's not a text node, and
     * has an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastByAttribute = def(me, 'getLastByAttribute', function(elm,
                attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, 0, true, true);
    });

    /*
     *
     */
    var getLastByAttribute = require(kModuleName, 'getLastByAttribute');

    /**
     * @function {static} o2.Dom.getLastByClass
     *
     * <p>Gets the last sibling of the element that's not a text node, and
     * has a given class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastByClass = def(me, 'getLastByClass', function(elm, className,
                name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, 0, true, true);
    });

    /*
     *
     */
    var getLastByClass = require(kModuleName, 'getLastByClass');

    /**
     * @function {static} o2.Dom.getLastWithId
     *
     * <p>Gets the last sibling of the element that's not a text node, and
     * has an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastWithId = def(me, 'getLastWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, 0, true, true);
    });

    /*
     *
     */
    var getLastWithId = require(kModuleName, 'getLastWithId');

    /**
     * @function {static} o2.Dom.getLastWithAttribute
     *
     * <p>Gets the last sibling of the element that's not a text node, and
     * has a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastWithAttribute = def(me, 'getLastWithAttribute', function(
                elm, attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, 0, true, true);
    });

    /*
     *
     */
    var getLastWithAttribute = require(kModuleName, 'getLastWithAttribute');

    /**
     * @function {static} o2.Dom.getLastWithClass
     *
     * <p>Gets the last sibling of the element that's not a text node, and
     * has a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastWithClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastWithClass = def(me, 'getLastWithClass', function(elm,
                className, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, 0, true, true);
    });

    /*
     *
     */
    var getLastWithClass = require(kModuleName, 'getLastWithClass');

    /**
     * @function {static} o2.Dom.getLastChild
     *
     * <p>Gets the last child of the element that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChild('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChild = def(me, 'getLastChild', function(elm, name) {
        if (!elm) {
            return null;
        }

        return getLast(elm.lastChild, name);
    });

    /**
     * @function {static} o2.Dom.getLastChildByAttribute
     *
     * <p>Gets the last child of the element that's not a text node, and
     * having an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChildByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChildByAttribute = def(me, 'getLastChildByAttribute',
                function(elm, attribute, value, name) {
        if (!elm) {
            return null;
        }

        return getLastByAttribute(elm.lastChild, attribute, value, name);
    });

    /**
     * @function {static} o2.Dom.getLastChildByClass
     *
     * <p>Gets the last child of the element that's not a text node, and
     * having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChildByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChildByClass = def(me, 'getLastChildByClass', function(elm,
                className, name) {
        if (!elm) {
            return null;
        }

        return getLastByClass(elm.lastChild, className, name);
    });

    /**
     * @function {static} o2.Dom.getLastChildWithAttribute
     *
     * <p>Gets the last child of the element that's not a text node, and
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChildWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChildWithAttribute = def(me, 'getLastChildWithAttribute',
                function(elm, attribute, name) {
        if (!elm) {
            return null;
        }

        return getLastWithAttribute(elm.lastChild, attribute, name);
    });

    /**
     * @function {static} o2.Dom.getLastChildWithClass
     *
     * <p>Gets the last child of the element that's not a text node, and
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChildWithClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChildWithClass = def(me, 'getLastChildWithClass', function(
                elm, className, name) {
        if (!elm) {
            return null;
        }

        return getLastWithClass(elm.lastChild, className, name);
    });

    /**
     * @function {static} o2.Dom.getLastChildWithId
     *
     * <p>Gets the last child of the element that's not a text node, and
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getLastChildWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the last child available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getLastChildWithId = def(me, 'getLastChildWithId', function(elm,
                name) {
        if (!elm) {
            return null;
        }

        return getLastWithId(elm.lastChild, name);
    });

    /**
     * @function {static} o2.Dom.getNext
     *
     * <p>Gets the next sibling of the element, that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNext('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNext = def(me, 'getNext', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextByAttribute
     *
     * <p>Gets the next sibling of the element, that's not a text node, and
     * having an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextByAttribute('content', 'data-id', '42', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNextByAttribute = def(me, 'getNextByAttribute', function(elm,
                attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextByClass
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextByClass('content', 'selected', 'li');
     * </pre>
     *
     * <p>Gets the next sibling of the element, that's not a text node, and
     * having a given <strong>CSS</strong> class name.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNextByClass = def(me, 'getNextByClass', function(elm, className,
                name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextWithAttribute
     *
     * <p>Gets the next sibling of the element, that's not a text node, and
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNextWithAttribute = def(me, 'getNextWithAttribute', function(
                elm, attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextWithClass
     *
     * <p>Gets the next sibling of the element, that's not a text node, and
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNextWithClass = def(me, 'getNextWithClass', function(elm, name) {
        return getNextSiblings(elm,hasClassAttribute, [],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextWithId
     *
     * <p>Gets the next sibling of the element, that's not a text node, and
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the next sibling available with the given criteria, if found;
     * <code>null</code> otherwise.
     */
    exports.getNextWithId = def(me, 'getNextWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getNextAll
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAll('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAll = def(me, 'getNextAll', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [], name);
    });

    /*
     *
     */
    var getNextAll = require(kModuleName, 'getNextAll');

    /**
     * @function {static} o2.Dom.getNextAllByAttribute
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllByAttribute = def(me, 'getNextAllByAttribute', function(
                elm, attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllByAttributeUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having an attribute with a given value, until (but not included
     * to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllByAttributeUntil('content', 'data-id', '42',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllByAttributeUntil = def(me, 'getNextAllByAttributeUntil',
                function(elm, attribute, value, until, name) {
        return getNextSiblings(elm,
            isAttributeEquals, [attribute, value], isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllByClass
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllByClass = def(me, 'getNextAllByClass', function(elm,
                className, name) {
        return getNextSiblings(elm, hasClassName, [className], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllByClassUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a given <strong>CSS</strong> class name, until (but not
     * included to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllByClassUntil('content', 'selected',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllByClassUntil = def(me, 'getNextAllByClassUntil', function(
                elm, className, until, name) {
        return getNextSiblings(elm, hasClassName, [className],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, until (but not included to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllUntil = def(me, 'getNextAllUntil', function(elm, until,
                name) {
        return getNextSiblings(elm, null, [], isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithAttribute
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithAttribute = def(me, 'getNextAllWithAttribute',
                function(elm, attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithAttributeUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a given attribute defined, until (but not
     * included to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithAttributeUntil('content', 'data-id',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithAttributeUntil = def(me,
                'getNextAllWithAttributeUntil',
                function(elm, attribute, until, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithClass
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithClass = def(me, 'getNextAllWithClass', function(elm,
                name) {
        return getNextSiblings(elm, hasClassAttribute, [], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithClassUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having a "class" attribute defined, until (but not
     * included to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithClassUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithClassUntil = def(me, 'getNextAllWithClassUntil',
                function(elm, until, name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithId
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithId = def(me, 'getNextAllWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getNextAllWithIdUntil
     *
     * <p>Gets all the following siblings of the element that are not text
     * nodes, having an "id" attribute defined, until (but not
     * included to) a given <strong>DOM</strong> node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNextAllWithIdUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getNextAllWithIdUntil = def(me, 'getNextAllWithIdUntil', function(
                elm, until, name) {
        return getNextSiblings(elm, hasIdAttribute, [], isNodeEquals, [until],
            name);
    });

    /**
     * @function {static} o2.Dom.getNth
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNth('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNth = def(me, 'getNth', function(elm, n, name) {
        return getNextSiblings(elm, null, [], null, [], name, null, n, true);
    });

    var getNth = require(kModuleName, 'getNth');

    /**
     * @function {static} o2.Dom.getNthByAttribute
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling, having a given attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthByAttribute('content', 'data-id', '42', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthByAttribute = def(me, 'getNthByAttribute', function(elm,
                attribute, value, n, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, n, true);
    });

    /*
     *
     */
    var getNthByAttribute = require(kModuleName, 'getNthByAttribute');

    /**
     * @function {static} o2.Dom.getNthByClass
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling, having a given <strong>CSS</strong>
     * class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthByAttribute('content', 'selected', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthByClass = def(me, 'getNthByClass', function(elm, className,
                n, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, n, true);
    });

    /*
     *
     */
    var getNthByClass = require(kModuleName, 'getNthByClass');

    /**
     * @function {static} o2.Dom.getNthWithAttribute
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthWithAttribute('content', 'data-id', 42, 'li');
     * </pre>
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling, having a given attribute defined.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthWithAttribute = def(me, 'getNthWithAttribute', function(elm,
                attribute, n, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, n, true);
    });

    /*
     *
     */
    var getNthWithAttribute = require(kModuleName, 'getNthWithAttribute');

    /**
     * @function {static} o2.Dom.getNthWithClass
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling, having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthWithClass('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthWithClass = def(me, 'getNthWithClass', function(elm, n,
                name) {
        return getNextSiblings(elm, hasClassAttribute, [], null, [],
            name, null, n, true);
    });

    /*
     *
     */
    var getNthWithClass = require(kModuleName, 'getNthWithClass');

    /**
     * @function {static} o2.Dom.getNthWithId
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthWithId('content', 42, 'li');
     * </pre>
     *
     * <p>Gets n<sup>th</sup> non-text-node sibling of an element, starting
     * from the first sibling, having an "id" attribute defined.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthWithId = def(me, 'getNthWithId', function(elm, n, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, n, true);
    });

    /*
     *
     */
    var getNthWithId = require(kModuleName, 'getNthWithId');

    /**
     * @function {static} o2.Dom.getNthChild
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChild('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChild = def(me, 'getNthChild', function(elm, n, name) {
        if (!elm) {
            return null;
        }

        return getNth(elm.firstChild, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthChildByAttribute
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element, having
     * a given attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChildByAttribute('content', 'data-id', '42', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChildByAttribute = def(me, 'getNthChildByAttribute', function(
                elm, attribute, value, n, name) {
        if (!elm) {
            return null;
        }

        return getNthByAttribute(elm.firstChild, attribute, value, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthChildByClass
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element, having a
     * given attribute with a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChildByClass('content', 'selected', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChildByClass = def(me, 'getNthChildByClass', function(elm,
                className, n, name) {
        if (!elm) {
            return null;
        }

        return getNthByClass(elm.firstChild, className, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthChildWithAttribute
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element,
     * with a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChildWithAttribute('content', 'data-id', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChildWithAttribute = def(me, 'getNthChildWithAttribute',
                function(elm, attribute, n, name) {
        if (!elm) {
            return null;
        }

        return getNthWithAttribute(elm.firstChild, attribute, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthChildWithClass
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element,
     * with a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChildWithClass('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChildWithClass = def(me, 'getNthChildWithClass', function(
                elm, n, name) {
        if (!elm) {
            return null;
        }

        return getNthWithClass(elm.firstChild, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthChildWithId
     *
     * <p>Gets n<sup>th</sup> non-text-node child of an element,
     * with a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthChildWithId('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> child available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthChildWithId = def(me, 'getNthChildWithId', function(elm, n,
                name) {
        if (!elm) {
            return null;
        }

        return getNthWithId(elm.firstChild, n, name);
    });

    /**
     * @function {static} o2.Dom.getNthNext
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNext('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNext = def(me, 'getNthNext', function(elm, n, name) {
        return getNextSiblings(elm, null, [], null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthNextByAttribute
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
     * having a given attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNextByAttribute('content', 'data-id', '42', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNextByAttribute = def(me, 'getNthNextByAttribute', function(
                elm, attribute, value, n, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthNextByClass
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
     * having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNextByClass('content', 'selected', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNextByClass = def(me, 'getNthNextByClass', function(elm,
                className, n, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthNextWithAttribute
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNextWithAttribute('content', 'data-id', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNextWithAttribute = def(me, 'getNthNextWithAttribute',
                function(elm, attribute, n, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthNextWithClass
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNextWithClass('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNextWithClass = def(me, 'getNthNextWithClass', function(elm,
                n, name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthNextWithId
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthNextWithId('content', 42, 'li');
     * </pre>
     *
     * <p>Gets n<sup>th</sup> non-text-node next sibling of an element,
     * having an "id" attribute defined.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> next sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthNextWithId = def(me, 'getNthNextWithId', function(elm, n,
                name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParent
     *
     * <p>Gets n<sup>th</sup> parent node of an element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParent('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParent = def(me, 'getNthParent', function(elm, n, name) {
        return getParents(elm, null, [], null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParentByAttribute
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParentByAttribute('content', 'data-id', '42',
     *      42, 'li');
     * </pre>
     *
     * <p>Gets n<sup>th</sup> parent node of an element, having a given
     * attribute with a given value.</p>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParentByAttribute = def(me, 'getNthParentByAttribute',
                function(elm, attribute, value, n, name) {
        return getParents(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParentByClass
     *
     * <p>Gets n<sup>th</sup> parent node of an element, having a given
     * class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParentByClass('content', 'selected', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParentByClass = def(me, 'getNthParentByClass', function(elm,
                className, n, name) {
        return getParents(elm, hasClassName, [className],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParentWithAttribute
     *
     * <p>Gets n<sup>th</sup> parent node of an element, having a given
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParentWithAttribute('content', 'data-id', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParentWithAttribute = def(me, 'getNthParentWithAttribute',
                function(elm, attribute, n, name) {
        return getParents(elm, hasAttribute, [attribute],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParentWithClass
     *
     * <p>Gets n<sup>th</sup> parent node of an element, having a "class"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParentWithClass('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParentWithClass = def(me, 'getNthParentWithClass',
                function(elm, n, name) {
        return getParents(elm, hasClassAttribute, [],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthParentWithId
     *
     * <p>Gets n<sup>th</sup> parent node of an element, having an "id"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthParentWithId('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getNthParentWithId = def(me, 'getNthParentWithId', function(elm,
                n, name) {
       return getParents(elm, hasIdAttribute, [],
            null, [], name, null, n);
    });

    /**
     * @function {static} o2.Dom.getNthPrev
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrev('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrev = def(me, 'getNthPrev', function(elm, n, name) {
        return getNextSiblings(elm, null, [], null, [],
            name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getNthPrevByAttribute
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node, having a given attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrevByAttribute('content', 'data-id', '42',
     *      42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrevByAttribute = def(me, 'getNthPrevByAttribute', function(
                elm, attribute, value, n, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getNthPrevByClass
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node, having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrevByClass('content', 'selected', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrevByClass = def(me, 'getNthPrevByClass', function(elm,
                className, n, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getNthPrevWithAttribute
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node, having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrevWithAttribute('content', 'data-id', 42);
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrevWithAttribute = def(me, 'getNthPrevWithAttribute',
                function(elm, attribute, n, name) {
       return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getNthPrevWithClass
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node, having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrevWithClass('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the given
     * criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrevWithClass = def(me, 'getNthPrevWithClass', function(elm,
                n, name) {
       return getNextSiblings(elm, hasClassAttribute, [],
            null, [], name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getNthPrevWithId
     *
     * <p>Gets n<sup>th</sup> previous sibling of an element that's not a
     * text node, having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getNthPrevWithId('content', 42, 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Integer} n - the element index.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the n<sup>th</sup> previous sibling available with the
     * given criteria, if found; <code>null</code> otherwise.
     */
    exports.getNthPrevWithId = def(me, 'getNthPrevWithId', function(elm, n,
                name) {
       return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, n, false, true);
    });

    /**
     * @function {static} o2.Dom.getParent
     *
     * <p>Gets the parent node of an element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParent('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    //TODO: getParent, getParents, getPrev, getPrevAll, getNext, getNextAll,
    //getParentOrSelf, should also be able to get a filter delegate
    //instead of a String `name` argument.
    exports.getParent = def(me, 'getParent', function(elm, name) {
        return getParents(elm, null, [], null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParentByAttribute
     *
     * <p>Gets the parent node of an element, having an attribute with a
     * given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParentByAttribute('content', 'data-id', '42', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getParentByAttribute = def(me, 'getParentByAttribute', function(elm,
                attribute, value, name) {
        return getParents(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParentByClass
     *
     * <p>Gets the parent node of an element, having a given
     * <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParentByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getParentByClass = def(me, 'getParentByClass', function(elm,
                className, name) {
        return getParents(elm, hasClassName, [className],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParentWithAttribute
     *
     * <p>Gets the parent node of an element, having a given
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParentWithAttribute('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getParentWithAttribute = def(me, 'getParentWithAttribute',
                function(elm, attribute, name) {
        return getParents(elm, hasAttribute, [attribute],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParentWithClass
     *
     * <p>Gets the parent node of an element, having a "class"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParentWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getParentWithClass = def(me, 'getParentWithClass', function(elm,
                name) {
        return getParents(elm, hasClassAttribute, [],
            null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParentWithId
     *
     * <p>Gets the parent node of an element, having an "id"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getParentWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first parent available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getParentWithId = def(me, 'getParentWithId', function(elm, name) {
        return getParents(elm, hasIdAttribute, [], null, [], name, null, 0);
    });

    /**
     * @function {static} o2.Dom.getParents
     *
     * <p>Gets all the parent nodes of an element.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParents('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParents = def(me, 'getParents', function(elm, name) {
        return getParents(elm, null, [], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsByAttribute
     *
     * <p>Gets all the parent nodes of an element, having a given attribute
     * with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsByAttribute = def(me, 'getParentsByAttribute', function(
                elm, attribute, value, name) {
        return getParents(elm, isAttributeEquals, [attribute, value],
            null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsByAttributeUntil
     *
     * <p>Gets all the parent nodes of an element, having a given attribute
     * with a given value, until (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsByAttributeUntil('content', 'data-id', '42',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Object} until - the <strong>DOM</strong> node that the traversal
     * will be made until, or its <code>String</code> id,
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsByAttributeUntil = def(me, 'getParentsByAttributeUntil',
                function(elm, attribute, value, until, name) {
        return getParents(elm, isAttributeEquals, [attribute, value],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getParentsByClass
     *
     * <p>Gets all the parent nodes of an element, having a given
     * <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsByClass = def(me, 'getParentsByClass', function(elm,
                className, name) {
        return getParents(elm, hasClassName, [className], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsByClassUntil
     *
     * <p>Gets all the parent nodes of an element, having a given
     * <strong>CSS</strong> class name, until (but not included to) a
     * given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsByClassUntil('content', 'selected',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsByClassUntil = def(me, 'getParentsByClassUntil',
                function(elm, className, until, name) {
        return getParents(elm, hasClassName, [className],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getParentsUntil
     *
     * <p>Gets all the parent nodes of an element, until (but not included to) a
     * given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsUntil = def(me, 'getParentsUntil', function(elm, until,
                name) {
        return getParents(elm, null, [], isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithAttribute
     *
     * <p>Gets all the parent nodes of an element, having a given
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithAttribute = def(me, 'getParentsWithAttribute',
                function(elm, attribute, name) {
        return getParents(elm, hasAttribute, [attribute], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithAttributeUntil
     *
     * <p>Gets all the parent nodes of an element, having a given
     * attribute defined, until (but not included to) a
     * given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithAttributeUntil('content', 'data-id',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithAttributeUntil = def(me,
                'getParentsWithAttributeUntil', function(elm, attribute, until,
                name) {
        return getParents(elm, hasAttribute, [attribute],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithClass
     *
     * <p>Gets all the parent nodes of an element, having a "class"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithClass = def(me, 'getParentsWithClass', function(elm,
                name) {
        return getParents(elm, hasClassAttribute, [], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithClassUntil
     *
     * <p>Gets all the parent nodes of an element, having a "class"
     * attribute defined, until (but not included to) a
     * given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithClass('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithClassUntil = def(me, 'getParentsWithClassUntil',
                function(elm, until, name) {
        return getParents(elm, hasClassAttribute, [],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithId
     *
     * <p>Gets all the parent nodes of an element, having an "id"
     * attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithId = def(me, 'getParentsWithId', function(elm, name) {
        return getParents(elm, hasIdAttribute, [], null, [], name);
    });

    /**
     * @function {static} o2.Dom.getParentsWithIdUntil
     *
     * <p>Gets all the parent nodes of an element, having an "id"
     * attribute defined, until (but not included to) a
     * given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getParentsWithIdUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getParentsWithIdUntil = def(me, 'getParentsWithIdUntil', function(
                elm, until, name) {
        return getParents(elm, hasIdAttribute, [],
            isNodeEquals, [until], name);
    });

    /**
     * @function {static} o2.Dom.getPrev
     *
     * <p>Gets the previous sibling of an element that's not a text node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrev('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrev = def(me, 'getPrev', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [],
            name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevByAttribute
     *
     * <p>Gets the previous sibling of an element that's not a text node,
     * having an attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrevByAttribute('content', 'data-id', '42', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - i the value of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrevByAttribute = def(me, 'getPrevByAttribute', function(elm,
                attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevByClass
     *
     * <p>Gets the previous sibling of an element that's not a text node,
     * having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrevByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrevByClass = def(me, 'getPrevByClass', function(elm, className,
                name) {
       return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevWithAttribute
     *
     * <p>Gets the previous sibling of an element that's not a text node,
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrevWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrevWithAttribute = def(me, 'getPrevWithAttribute', function(elm,
                attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            null, [], name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevWithClass
     *
     * <p>Gets the previous sibling of an element that's not a text node,
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrevWithClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrevWithClass = def(me, 'getPrevWithClass', function(elm, name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            null, [], name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevWithId
     *
     * <p>Gets the previous sibling of an element that's not a text node,
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var item = o2.Dom.getPrevWithId('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return the first previous sibling available with the given criteria,
     * if found; <code>null</code> otherwise.
     */
    exports.getPrevWithId = def(me, 'getPrevWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, 0, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAll
     *
     * <p>Gets all previous sibling of an element, that are not text nodes.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAll('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAll = def(me, 'getPrevAll', function(elm, name) {
        return getNextSiblings(elm, null, [], null, [],
            name, null, null, false, true);
    });

    /*
     *
     */
    var getPrevAll = require(kModuleName, 'getPrevAll');

    /**
     * @function {static} o2.Dom.getPrevAllByAttribute
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given attribute with a given value.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllByAttribute('content', 'data-id', '42');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllByAttribute = def(me, 'getPrevAllByAttribute', function(
                elm, attribute, value, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            null, [], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllByAttributeUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given attribute with a given value, until
     * (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllByAttributeUntil('content', 'data-id',
     *      '42', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} value - the value of the attribute.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllByAttributeUntil = def(me, 'getPrevAllByAttributeUntil',
                function(elm, attribute, value, until, name) {
        return getNextSiblings(elm, isAttributeEquals, [attribute, value],
            isNodeEquals, [until], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllByClass
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given <strong>CSS</strong> class name.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllByClass('content', 'selected', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllByClass = def(me, 'getPrevAllByClass', function(elm,
                className, name) {
        return getNextSiblings(elm, hasClassName, [className],
            null, [], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllByClassUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given <strong>CSS</strong> class name, until
     * (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllByClassUntil('content', 'selected',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} className - the <strong>CSS</strong> class name.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllByClassUntil = def(me, 'getPrevAllByClassUntil',
                function(elm, className, until, name) {
        return getNextSiblings(elm, hasClassName, [className],
            isNodeEquals, [until], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * until (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllUntil = def(me, 'getPrevAllUntil', function(elm, until,
                name) {
        return getNextSiblings(elm, null, [], isNodeEquals, [until],
            name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithAttribute
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithAttribute('content', 'data-id', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithAttribute = def(me, 'getPrevAllWithAttribute',
                function(elm, attribute, name) {
        return getNextSiblings(elm, hasAttribute, [attribute], null, [],
            name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithAttributeUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a given attribute defined, until
     * (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithAttributeUntil('content', 'data-id',
     *      'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} attribute - the name of the attribute to filter.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithAttributeUntil = def(me,
                'getPrevAllWithAttributeUntil', function(elm, attribute, until,
                name) {
        return getNextSiblings(elm, hasAttribute, [attribute],
            isNodeEquals, [until], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithClass
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a "class" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithClass('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithClass = def(me, 'getPrevAllWithClass', function(elm,
                name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            null, [], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithClassUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having a "class" attribute defined, until
     * (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithClassUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithClassUntil = def(me, 'getPrevAllWithClassUntil',
                function(elm, until, name) {
        return getNextSiblings(elm, hasClassAttribute, [],
            isNodeEquals, [until], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithId
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having an "id" attribute defined.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithId('content', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithId = def(me, 'getPrevAllWithId', function(elm, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            null, [], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.getPrevAllWithIdUntil
     *
     * <p>Gets all previous sibling of an element, that are not text nodes,
     * having an "id" attribute defined, until
     * (but not included to) a given node.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var items = o2.Dom.getPrevAllWithIdUntil('content', 'stopper', 'li');
     * </pre>
     *
     * @param {Object} elm - the element reference, or a <code>String</code>
     * id of it.
     * @param {Object} until - the <strong>DOM</strong> to search until (but
     * not included to), or its <code>String</code> id.
     * @param {String} name - (Optional; defaults to <code>undefined</code>),
     * if true, only the results with that <strong>node name</strong> (i.e.
     * <strong>HTML</strong> <strong>Tag Name</strong>) are selected.
     *
     * @return an <code>Array</code> of nodes, if found; and empty
     * <code>Array</code> if nothing is found.
     */
    exports.getPrevAllWithIdUntil = def(me, 'getPrevAllWithIdUntil', function(
                elm, until, name) {
        return getNextSiblings(elm, hasIdAttribute, [],
            isNodeEquals, [until], name, null, null, false, true);
    });

    /**
     * @function {static} o2.Dom.isChild
     *
     * <p>Checks whether <strong>elm</strong> is the child of
     * <strong>ref</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isChild = o2.Dom.isChild('child', 'parent');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a child of
     * <strong>ref</strong>; <code>false</code> otherwise.
     */
    exports.isChild = def(me, 'isChild', function(elm, ref) {
        if (!ref) {
            return false;
        }

        return contains(getChildren(ref), elm);
    });

    /**
     * @function {static} o2.Dom.isNext
     *
     * <p>Checks whether <strong>elm</strong> is a sibling after
     * <strong>ref</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isNext = o2.Dom.isNext('itemId', 'refId');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a sibling after
     * <strong>ref</strong>; <code>false</code> otherwise.
     */
    exports.isNext = def(me, 'isNext', function(elm, ref) {
        if (!ref) {
            return false;
        }

        return contains(getNextAll(ref), elm);
    });

    /**
     * @function {static} o2.Dom.isParent
     *
     * <p>Checks whether <strong>elm</strong> is a parent of
     * <strong>ref</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isParent = o2.Dom.isParent('itemId', 'refId');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a parent of
     * <strong>ref</strong>; <code>false</code> otherwise.
     */
    exports.isParent = def(me, 'isParent', function(elm, ref) {
        if (!ref) {
            return false;
        }

        return contains(getParents(ref), elm);
    });

    /*
     *
     */
    var isParent = require(kModuleName, 'isParent');

    /**
     * @function {static} o2.Dom.isParentOrSelf
     *
     * <p>Checks whether <strong>elm</strong> is parent of
     * <strong>ref</strong>, or it's the <strong>ref</strong> itself.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isParent = o2.Dom.isParentOrSelf('itemId', 'refId');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a parent of
     * <strong>ref</strong>, or the node itself; <code>false</code> otherwise.
     */
    exports.isParentOrSelf = def(me, 'isParentOrSelf', function(elm, ref) {
        if (!ref) {
            return false;
        }

        if (ref === elm) {
            return true;
        }

        return isParent(elm, ref);
    });

    /**
     * @function {static} o2.Dom.isPrev
     *
     * <p>Checks whether <strong>elm</strong> is a sibling before
     * <strong>ref</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isParent = o2.Dom.isPrev('itemId', 'refId');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a sibling before
     * <strong>ref</strong>; <code>false</code> otherwise.
     */
    exports.isPrev = def(me, 'isPrev', function(elm, ref) {
        if (!ref) {
            return false;
        }

        return contains(getPrevAll(ref), elm);
    });

    /**
     * @function {static} o2.Dom.isSibling
     *
     * <p>Checks whether <strong>elm</strong> is a sibling of
     * <strong>ref</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isSibling = o2.Dom.isSibling('itemId', 'refId');
     * </pre>
     *
     * @param {Object} elm - the source element, or a <code>String</code>
     * id of it.
     * @param {Object} ref - the reference element, or a <code>String</code>
     * id of it.
     *
     * @return <code>true</code> if <strong>elm</strong> is a sibling of
     * <strong>ref</strong>; <code>false</code> otherwise.
     */
    exports.isSibling = def(me, 'isSibling', function(elm, ref) {
        if (!ref) {
            return false;
        }

        return contains(getSiblings(ref), elm);
    });
}(this.o2, this.document));
/**
 * @module effect
 *
 * <p>NOT IMPLEMENTED.</p>
 */
(function() {
    'use strict';

    //throw 'o2.Effect module has not been built yet.';
}());
/**
 * @module   object.core
 * @requires collection.core
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>An object/clone/copy/inheritance helper.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Object';

    /**
     * @class {static} o2.Object
     *
     * <p>A helper class for <strong>JavaScript</strong> <code>Object</code>
     * inheritance.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var myName = require('name');

    var kString = 'String';
    var format  = require(kString, 'format');
    var concat  = require(kString, 'concat');

    var toArray = require('Collection', 'toArray');

    var JSON = window.JSON;

    /*
     * Common Constants
     */
    var kNoJsonSupport = concat(myName, ': {0}: No JSON support. quitting');
    var kFunction      = 'function';
    var kObject        = 'object';

    /**
     * @function {static} o2.Object.copy
     *
     * <p>Copies members from <strong>base</strong> to
     * <strong>child</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var base = {lorem : 1};
     * var child = {ipsum : 2};
     * o2.Object.copy(child, base);
     * // child is now {lorem : 1, ipsum : 2}
     * </pre>
     *
     * @param {Object} child
     * @param {Object} base
     *
     * @see o2.Collection.union
     */
    exports.copy = def(me, 'copy', function(child, base) {
        var key = null;

        for (key in base) {
            if (base.hasOwnProperty(key)) {
                child[key] = base[key];
            }
        }
    });

    /**
     * @function {static} o2.Object.copyMethods
     * <p>Copies <strong>base</strong>'s methods, to
     * <strong>child</strong>.  </p>
     * <p>Note that the methods are copied by ref. Therefore any change in
     * <strong>base</strong> object's methods will be directly reflected to
     * the <strong>child</strong> object.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var child = {lorem : 1};
     * var base = {ipsum : function() {}};
     * o2.Object.copyMethods(child, base);
     * // child is now {lorem : 1, ipsum : function() {}}
     * </pre>
     *
     * @param {Object} child - the child <strong>object</strong> to copy
     * methods to.
     * @param {Object} base - the base <strong>object</strong> to copy
     * methods from.
     */
    exports.copyMethods = def(me, 'copyMethods', function(child, base) {
        var key   = null;
        var value = null;

        for (key in base) {
            if (base.hasOwnProperty(key)) {
                value = base[key];
                if (typeof value === kFunction) {
                    child[key] = value;
                }
            }
        }
    });

    /**
     * @function {static} o2.Object.copyPrototype
     *
     * <p>Copies every propery in <strong>base.prototype</strong>, to
     * <strong>child.prototype</strong>.</p>
     * <p>This is similar to extending <strong>child</strong>
     * to <strong>base</strong>.</p>
     * <p>Note that the methods are copied by ref. Therefore any change in
     * <strong>base</strong> object's prototype methods will be directly
     * reflected to the <strong>child</strong> object's protoype.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var Child = function() {};
     * Child.prototype.method1 = function() {};
     * var Base = function() {};
     * Base.prototype.method2 = function() {};
     * o2.Object.copyPrototype(Child, Base);
     * // Child.prototype has both method1 and method2 now.
     * </pre>
     *
     * @param {Object} child - the child <strong>object</strong> to copy
     * methods to.
     * @param {Object} base - the base <strong>object</strong> to copy
     * methods from.
     */
    exports.copyPrototype = def(me, 'copyPrototype', function(child, base) {
        var baseProto  = base.prototype;
        var childProto = child.prototype;
        var key        = null;

        if (!childProto) {
            return;
        }

        if (!baseProto) {
            return;
        }

        for (key in baseProto) {
            if (baseProto.hasOwnProperty(key)) {
                childProto[key] = baseProto[key];
            }
        }
    });

    /**
     * @function {static} o2.Object.extend
     *
     * <p>A simple way of extending objects.<p>
     * <p>Although the so called "object-oriented <strong>JavaScript</strong>"
     * is rarely useful and is against the <strong>functional</strong> nature of
     * the language, this helper method may be handy at times.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * function Fruit() {}
     * Fruit.prototype.grow = function() {};
     * Fruit.prototype.name = 'fruit';
     *
     * function Apple() {}
     * Apple.prototype.name = 'Steve';
     *
     * o2.Object.inherit(Apple, Fruit, new Fruit());
     *
     * var fruit = new Fruit();
     * var apple = new Apple();
     *
     * log(typeof apple.grow); // function
     * log(apple.constructor); // Apple
     * log(apple.parent);      // {grow: function(){}, name : 'fruit'}
     * log(apple.name);        // 'Steve'
     * log(apple.parent.name); // 'fruit'
     * </pre>
     *
     * @param {Function} childConstructor - the child object.
     * @param {Function} baseConstructor - the <code>Object</code> to extend.
     * @param {Object} baseConstructed - base object initialized to a default
     * state.
     */
    exports.extend = def(me, 'extend', function(childConstructor,
                baseConstructor, baseConstructed) {
        var Junction = function(){};
        childConstructor.prototype = new Junction();
        Junction.prototype = baseConstructed;
        childConstructor.prototype.constructor = childConstructor;
        childConstructor.prototype.parent = baseConstructor.prototype;
    });

    /**
     * @function {static} o2.Object.toArray
     *
     * <p>Converts a given <code>Object</code> to an <code>Array</code>.</p>
     *
     * @param {Object} obj - the <code>Object</code> to convert to an
     * <code>Array</code>.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : 1, ipsum : 2};
     * var ar = o2.Object.toArray(obj);
     * // ar will be [1, 2]
     * </pre>
     *
     * @return the converted <code>Array</code>.
     *
     * @see o2.Collection.toArray
     */
    exports.toArray = def(me, 'toArray', function(obj) {
        return toArray(obj);
    });

    /**
     * o2.Object.toJsonString
     *
     * <p>Converts the <code>Object</code> to a <strong>JSON</strong>
     * <code>String</code>, if <strong>JSON</strong> is supported.
     * you can use 3rdparty/json2/json2.js to add cross-browser
     * <strong>JSON</strong> support.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : 1};
     * var str = o2.Object.toJsonString(obj);
     * // str will be '{"lorem":1}' (a serialized String literal)
     * </pre>
     *
     * @param {Object} obj - the <code>Object</code> to convert to a
     * <strong>JSON</strong> <code>String</code>.
     *
     * @return the converted <strong>JSON</strong> <code>String</code>.
     */
    exports.toJsonString = def(me, 'toJsonString', function(obj) {
        var kMethodName = 'Object.toJsonString';

        if (JSON) {
            return JSON.stringify(obj);
        }

        throw format(kNoJsonSupport, kMethodName);
    });

    /**
     * @function {static} o2.Object.stringify
     *
     * <p>An <strong>alias</strong> to {@link o2.Object.toJsonString}.</p>
     *
     * @see o2.Object.toJsonString
     */
    exports.stringify = alias(me, 'stringify', 'toJsonString');

    /**
     * @function {static} o2.Object.touch
     *
     * <p>Executes the delegate by passing the <strong>obj</strong> to it as a
     * parameter, then returns the <strong>obj</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var obj = {lorem : '1'};
     * o2.Object.touch(obj, function(o) {
     *   o.lorem = '3';
     * });
     * // now obj is {lorem : '3'}
     * </pre>
     *
     * @param {Object} obj - the <code>Object</code> to touch.
     * @param {Function} delegate - the delegate to execute
     * on <strong>obj</strong>.
     *
     * @return <code>null</code> if <strong>obj</strong> is falsy or it's a
     * primitive type; returns the <strong>obj</strong> itself (after applying
     * delagate to it) otherwise.
     */
    exports.touch = def(me,'touch', function(obj, delegate) {
        if (!obj) {
            return null;
        }

        if (typeof obj !== kObject) {
            return null;
        }

        delegate(obj);

        return obj;
    });
}(this.o2, this));
/**
 * @module   jsonpstate.core
 * @requires ajaxstate.core
 * @requires core
 * @requires object.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <strong>Model</strong> for controlling <strong>JSONP</strong> timeouts
 * etc. A {@link JsonpController} should be registered to this
 * <strong>model</strong>.
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    /*
     * Module Name
     */
    var kModuleName = 'JsonpState';

    /**
     * @class {static} o2.JsonpState
     * @extends o2.AjaxState
     *
     * <p>Implements all public methods of {@link AjaxState} for
     * <strong>JSONP</strong> requests.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var kObjectHelper = 'Object';
    var copyFn        = require(kObjectHelper, 'copyMethods');
    var copyAttr      = require(kObjectHelper, 'copy');

    /*
     * Inheritance
     */

    var kBaseName   = 'AjaxState';
    var kMyName     = kModuleName;
    var kProtecteds = 'protecteds';

    def(me, kProtecteds, {});

    var base   = require(kBaseName);
    var myself = require(kMyName);

    var baseProtecteds = require(kBaseName, kProtecteds);
    var myProtecteds   = require(kMyName,   kProtecteds);

    copyFn(myself, base);
    copyAttr(myProtecteds, baseProtecteds);
}(this.o2));
/**
 * @module   jsonpcontroller
 * @requires core
 * @requires ajaxcontroller
 * @requires jsonpstate
 * @requires object
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A <code>JSONP</code> controller that implements the
 * <strong>Observer</strong> pattern.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var construct = attr(_, 'construct');
    var override  = attr(_, 'override');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'JsonpController';

    /*
     * Aliases
     */

    var nill        = require('nill');
    var state       = require('JsonpState');
    var copyMethods = require('Object', 'copyMethods');

    /**
     * @class o2.JsonpController
     * @extends o2.AjaxController
     *
     * <p>A JSONP <code>Controller</code>. Registers itself to {@link
     * JsonpState} <code>Observable</code> upon construction.</p>
     *
     * <p>Implements the <code>Observer</code> interface.</p>
     */

    /**
     * @constructor o2.JsonpController.JsonpController
     *
     * See
     * http://download.oracle.com/javase/1.4.2/docs/api/java/util/Observer.html
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var jsonp = o2.Jsonp.get('http://example.com/api.php', handleResponse);
     * var controller = new o2.JsonpController(jsonp, {timeout: 5000});
     * </pre>
     *
     * @param {String} jsonp - the current jsonp unique identifier.
     * @param {Object} args - an associative array in the form
     * {timeout:[timeoutInMilliSeconds], ontimeout: [function]}
     * both attributes are optional.
     */
    exports.JsonpController = construct(kModuleName, function(jsonp,
                args) {
        this.jsonp     = jsonp;
        this.ontimeout = (args && args.ontimeout) || nill;
        this.timeout   = (args && args.timeout) || null;

        // Register self.
        state.addObserver(this);
    });

    /*
     *
     */
    var me = exports.JsonpController;

    /*
     * State
     */
    var purgeQueue = [];

    var base = require('AjaxController');
    var self = require(kModuleName);

    // A quick way of inheriting methods without constructing base
    // (i.e. without the `self.prototype = new base();` assignment).
    copyMethods(self.prototype, base.prototype);

    /**
     * @function {override} o2.JsonpController.update
     *
     * <p>Overrides {@link o2.AjaxController.update}.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * controller.update({isTimedOut : true});
     * </pre>
     *
     * @param {JsonpState} observable - the <code>Observable</code> state
     * object.
     * @param {Object} data - parameters passed from the
     * <code>Observable</code> to this <code>Observer</code>.
     *
     * @see o2.AjaxController.update
     */
    exports.update = override(me, 'update', function(data) {
        if (!data.isTimedOut) {
            return;
        }

        // Unregister self from the observable.
        this.unregister(state);

        // Abort the request.
        window[this.jsonp] = nill;

        // Purge former requests to prevent memory leak.
        purgeQueue.push(this.jsonp);

        while (purgeQueue.length > 1) {
            delete window[purgeQueue.shift()];
        }

        // Execute callback.
        this.ontimeout();
    });

    /**
     * @function {override} o2.JsonpController.unregister
     *
     * <p>Overrides {@link o2.AjaxController.unregister}.</p>
     *
     * <p>Unregisters this object from its associated observable.
     * (<em>i.e. <strong>JsonpState</strong></em>)</p>
     *
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * controller.unregister();
     * </pre>
     *
     */
    exports.unregister = override(me, 'unregister', function() {
        if (this.isDeleted) {
            return;
        }

        state.deleteObserver(this);
    });
}(this.o2, this));
/**
 * @module   jsonp.core
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>An object to make <strong>JSONP</strong> calls.</p>
 */
(function(framework, window, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Jsonp';

    /**
     * @class {static} o2.Jsonp
     *
     * <p>An object to make <strong>JSONP</strong> calls.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var myName = require('name');
    var nill   = require('nill');

    var concat = require('String', 'concat');

    var createElement        = attr(document, 'createElement');
    var getElementsByTagName = attr(document, 'getElementsByTagName');

    /*
     * State
     */
    var counter = 0;

    /*
     * Common Constants
     */
    var kAnd      = '&';
    var kCallback = 'callback';
    var kEmpty    = '';
    var kEquals   = '=';
    var kHead     = 'head';
    var kJson     = concat(myName, '_json_');
    var kLoaded   = 'loaded';
    var kQuery    = '?';
    var kScript   = 'script';

    /*
     *
     */
    function load(url) {
        var done   = false;
        var head   = getElementsByTagName(kHead)[0];
        var script = createElement(kScript);

        script.async = true;
        script.src   = url;

        script.onload = script.onreadystatechange = function() {
            if (!done && (!this.readyState || this.readyState === kLoaded)) {
                done = true;

                script.onload = script.onreadystatechange = nill;

                if (script && script.parentNode) {
                    script.parentNode.removeChild(script);
                }
            }
        };

        head.appendChild(script);
    }

    /*
     *
     */
    function createQuery(params) {
        var key   = null;
        var query = kEmpty;

        for (key in params) {
            if (params.hasOwnProperty(key)) {
                query = concat(query,
                    key, kEquals, encodeURIComponent(params[key]),
                    kAnd);
            }
        }

        return query;
    }

    /**
     * @function {static} o2.Jsonp.get
     *
     * <p>Creates a <strong>JSONP</strong> request.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Jsonp.get('http://example.com/api.php', {param: 'value'},
     *      function(data) {
     *
     *      }
     * );
     * </pre>
     *
     * @param {String} url - the <strong>URL</strong> of the
     * <strong>JSONP</strong> service.
     * @param {Object} params - parameters in the form of {name1:value1,...}
     * @param {Function} callback - callback to execute after
     * <strong>JSONP</strong> arrives.
     */
    exports.get = def(me, 'get', function(url, params, callback) {
        var query = createQuery(params);
        var jsonp = concat(kJson, (++counter));

        params = params || {};

        window[jsonp] = function(data) {
            callback(data, params);
            window[jsonp] = null;

            delete window[jsonp];
        };

        load(concat(url, kQuery, query, kCallback, kEquals, jsonp));

        return jsonp;
    });
}(this.o2, this, this.document));
/**
 * @module   querystring.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A <strong>query string</strong> parser.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'QueryString';

    /**
     * @class {static} o2.QueryString
     *
     * <p>Used for parsing the browser's <strong>query string</strong>.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var location = attr(window, 'location');

    /*
     * Common Strings
     */
    var kAnd    = '&';
    var kEquals = '=';
    var kQuery  = '?';

    /*
     * Common Indexes
     */
    var kNameIndex  = 0;
    var kValueIndex = 1;

    /**
     * @function {static} o2.QueryString.encode
     *
     * <p>Converts the <strong>JSON</strong> object in parameters into a
     * query string.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var query = {lorem : 'ipsum', dolor : sit};
     * var qs = o2.QueryString.encode(query);
     * </pre>
     *
     */
    exports.encode = def(me, 'encode', function(collection) {
        var key    = null;
        var buffer = [];

        for (key in collection) {
            if (collection.hasOwnProperty(key)) {
                buffer.push(encodeURIComponent(key));
                buffer.push(kEquals);
                buffer.push(encodeURIComponent(collection[key]));
            }
        }

        buffer.sort();

        return buffer.join(kAnd);
    });

    /**
     * @function {static} o2.QueryString.parse
     *
     * <p>Parses the <strong>query string</strong>.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var params = o2.QueryString.parse(window.location.href);
     * </pre>
     *
     * @param {String} url - (Optional) if given, parses the
     * <strong>URL</strong>.
     * given, parses <code>window.location.href</code> otherwise.
     *
     * @return the parsed <strong>query string</strong> as a {name1:value1,
     * name2:value2} <code>Object</code>.
     */
    exports.parse = def(me, 'parse', function(url) {
        var args  = {};
        var href  = url || location.href;
        var index = href.indexOf(kQuery);

        if (index === -1) {
            return args;
        }

        var i              = 0;
        var nameValuePair  = null;

        var query          = href.substring(index + 1);
        var nameValuePairs = query.split(kAnd);

        for (i = 0; i < nameValuePairs.length; i++) {
            nameValuePair = nameValuePairs[i].split(kEquals);
            args[nameValuePair[kNameIndex]] = decodeURIComponent(
                nameValuePair[kValueIndex]);
        }

        return args;
    });
}(this.o2, this));
/**
 * @module   sortdelegate.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * Custom delegates for <code>Array.sort</code> method.
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var alias     = attr(_, 'alias');
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'SortDelegate';


    /**
     * @class {static} o2.SortDelegate
     *
     * <p>Custom delegates for <code>Array.sort</code> method.</p>
     */
    var me = create(kModuleName);

    var inf = Infinity;

    /*
     *
     */
    function getSortOrder(a, b) {
        return (a === b) ? 0 : ((a < b) ? -1 : 1);
    }

    /*
     *
     */
    function getNanSortOrder(a, b, isDescending) {
        if (isDescending) {
            return (isNaN(b) ? -inf : b) - (isNaN(a) ? -inf : a);
        }

        return (isNaN(a) ? inf : a) - (isNaN(b) ? inf : b);
    }

    /**
     * @function {static} o2.SortDelegate.sort
     *
     * <p>A generic sort function.</p>
     * <p>If the collecion consists of <code>String</code>s and
     * <code>Number</code>s, <code>String</code>s will be stored
     * alphabeticaly at the bottom, and
     * <code>Number</code>s will be sorted numerically before them.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 7, '12', 8, 'lorem', 'c', 42, 7];
     * a.sort(o2.SortDelegatae.sort);
     * </pre>
     */
    exports.sort = def(me, 'sort', function(a, b) {
        if (isNaN(a) && isNaN(b)) {
            return getSortOrder(a, b);
        }

        return getNanSortOrder(a, b);
    });

    /**
     * @function {static} o2.SortDelegate.sortAsc
     *
     * <p>An <strong>alias</strong> to {@link o2.SortDelegate.sort}.</p>
     *
     * @see o2.SortDelegate.sort
     */
    exports.sortAsc = alias(me, 'sortAsc', 'sort');

    var sort = require(kModuleName, 'sort');

    /**
     * @function {static} o2.SortDelegate.sortDesc
     *
     * <p>Works similar to {link o2.SortDelegate.sort}. The only difference
     * is that the items are sorted in a <strong>descending</strong>
     * order.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var ar = [1, 7, '12', 8, 'lorem', 'c', 42, 7];
     * a.sort(o2.SortDelegatae.sortDesc);
     * </pre>
     *
     */
    exports.sortDesc = def(me, 'sortDesc', function(a, b) {
        return sort(b, a);
    });
}(this.o2, this));
/**
 * @module   supports.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>An object support checker.</p>
 */
(function(framework, document) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Supports';

    /**
     * @class {static} o2.Supports
     *
     * <p>Checks support for various objects and properties like
     * <strong>DOM</strong> and <strong>cookie</strong>s.</p>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */

    var myName = require('name');

    /*
     *
     */
    var isDomSupported = document.getElementById &&
        document.createElement && document.getElementsByTagName;

    /*
     * Common Constants
     */
    var kEmpty            = '';
    var kTestCookiePrefix = 'tst';

    /**
     * @function {static} o2.Supports.ajax
     *
     * <p>Checks whether <strong>AJAX</strong> (At least XmlHttpRequest Level 1)
     * is supported.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isAjaxSupported = o2.Supports.ajax();
     * </pre>
     *
     * @return <code>true</code> if <strong>AJAX</strong> is supported,
     * <code>false</code> otherwise.
     *
     * @throws Exception - if <code>o2.Ajax</code> does not exist.
     */
    exports.ajax = def(me, 'ajax', function() {
        return !!require('Ajax', 'createXhr')();
    });

    /**
     * @function {static} o2.Supports.cookie
     *
     * <p>Checks for <strong>cookie</strong> support.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isCookieSupported = o2.Supports.cookie();
     * </pre>
     *
     * @return <code>true</code> if <strong>cookie</strong>s are supported,
     * <code>false</code> otherwise.
     *
     * @throws Exception - if <code>o2.Cookie</code> does not exist.
     */
    exports.cookie = def(me, 'cookie', function() {
        var testCookieName = [myName, kTestCookiePrefix].join(kEmpty);
        var value = null;

        var kCookie = 'Cookie';
        var save    = require(kCookie, 'save');
        var read    = require(kCookie, 'read');
        var remove  = require(kCookie, 'remove');

        save(testCookieName, testCookieName, 1);

        try {
            value = read(testCookieName);
        } catch(ignore) {
        }

        if (value) {
            remove(testCookieName);

            return true;
        }

        return false;
    });

    /**
     * @function {static} o2.Supports.dom
     *
     * <p>Checks whether <strong>DOM</strong> is adequately supported.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isDomSupported = o2.Supports.dom();
     * </pre>
     *
     * @return <code>true</code> if <strong>DOM</strong> is supported,
     * <code>false</code> otherwise.
     */
    exports.dom = def(me, 'dom', function() {
        return isDomSupported;
    });
}(this.o2, this.document));
/**
 * @module   template.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-03 00:12:56.288837
 * -->
 *
 * <p>A "very" fast templating engine.</p>
 */
(function(framework, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Template';

    /**
     * @class {static} o2.Template
     *
     * <p>A really <strong>fast</strong> template engine.</p>
     */
    var me = create(kModuleName);

    /*
     * Common Constants
     */
    var kObject = 'object';
    var kString = 'string';
    var kEmpty  = '';

    /*
     * Common Regular Expressions
     */
    var kSeparatorRegExp = /\s+/;
    var kTemplateRegExp  = /\{\{(.*?)\}\}/g;

    /*
     * Common Commands
     */
    var kEach = 'each';

    /*
     *
     */
    var doParse = null;

    /*
     *
     */
    function parseDirective(line, data) {
        var len = line.length;

        switch (len) {
            case 0:
                return kEmpty;
            case 1:
                return line[0];
        }

        var collectionKey = kEmpty;
        var directive     = line[0].split(kSeparatorRegExp);
        var directiveKey  = kEmpty;
        var subTpl        = line[1];

        var buffer = [];
        var clen   = 0;
        var i      = 0;

        if (directive.length > 1) {
            collectionKey = directive[1];
        }

        directiveKey = directive[0];

        if (directiveKey !== kEach) {
            return subTpl.join(kEmpty);
        }

        var collection = collectionKey ? data[collectionKey] : data;

        if (typeof collection !== kObject) {
            return subTpl.join(kEmpty);
        }

        for (i = 0, clen = collection.length; i < clen; i++) {
            buffer.push(doParse(collection[i], subTpl));
        }

        return buffer.join(kEmpty);
    }

    /*
     *
     */
    function parse(line, data) {
        if (typeof line !== kString) {
            return parseDirective(line, data);
        }

        return line.replace(kTemplateRegExp, function(str, p1
                    /*, offset, total*/) {
            return data[p1] !== UNDEFINED ? data[p1] : str;
        });
    }

    /**
     * @function {static} o2.Template.parse
     *
     * <p>Parses the given template.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var data = {
     *      users : [
     *          {name : 'Joe' },
     *          {name : 'Jill'},
     *          {name : 'Jack'}
     *      ]
     * };
     *
     * var tpl = [
     *      'ul id="Products"',
     *          ['each users',
     *              'li {{name}} /li'],
     *      '/ul'
     * ];
     *
     * var html = o2.Template.parse(data, tpl);
     * </pre>
     *
     * @param {Object} data - the source data as a <strong>JSON</strong> object.
     * @param {String} tpl - the template to parse against.
     *
     * @return {String} the parsed template.
     */
     exports.parse = def(me, 'parse', function(data, tpl){
        var buffer  = [];
        var tplData = data || {};
        var i       = 0;
        var len     = 0;

        for (i = 0, len = tpl.length; i < len; i++) {
            buffer.push(parse(tpl[i], tplData));
        }

        return buffer.join(kEmpty);
     });

     /*
      *
      */
     doParse = require(kModuleName, 'parse');
}(this.o2));
/**
 * @module   timer.core
 * @requires core
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>A static class for timeout related operations.</p>
 */
(function(framework, window, UNDEFINED) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Timer';

    /**
     * @class {static} o2.Timer
     *
     * <p>A class for executing repeated timed actions.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * // A unique id for the timer.
     * var kCheckId = 'my_timer';
     *
     * // Auto start timer with id kCheckId to repeat doStuff approximately
     * // every 500 milliseconds, please note that this is an approximation.
     * // for further details see John Resig's excellent article on this:
     * // http://ejohn.org/blog/how-javascript-timers-work/
     * o2.Timer.set(kCheckId, doStuff, 500, {start: true, repeat: true});
     *
     * // Stops the timer (i.e. doStuff will not be executed further).
     * o2.Timer.stop(kCheckId);
     *
     * // Restarts the timer (i.e. doStuff will be periodically executed again).
     * o2.Timer.start(kCheckId);
     * </pre>
     */
    var me = create(kModuleName);

    /*
     * Aliases
     */
    var concat = require('String', 'concat');

    var clearInterval = attr(window, 'clearInterval');
    var clearTimeout  = attr(window, 'clearTimeout');
    var setInterval   = attr(window, 'setInterval');
    var setTimeout    = attr(window, 'setTimeout');

    /*
     * Common Constants
     */
    var kPrefix = 't';

    /*
     * A collection of timers.
     */
    var timers = {};

    /**
     * @function {static} o2.Timer.start
     *
     * <p>Starts/restarts the timer with the given id.
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Timer.start('myTimer');
     * </pre>
     *
     * @param {String} id - the id of the timer to start.
     */
    exports.start = def(me, 'start', function(id) {
        var timerId = concat(kPrefix, id);
        var meta    = timers[timerId];

        if (!meta) {
            return;
        }

        if (meta.shouldRepeat) {
            clearInterval(meta.id);

            meta.id = setInterval(function() {
                meta.delegate();
            }, meta.timeout);

            return;
        }

        clearTimeout(meta.id);

        meta.id = setTimeout(function() {
            meta.delegate();
        }, meta.timeout);
    });

    /*
     *
     */
    var start = require(kModuleName, 'start');

    /**
     * @function {static} o2.Timer.stop
     *
     * <p>Stops the timer with the given id.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Timer.stop('myTimer');
     * </pre>
     *
     * @param {String} id - the id of the timer to stop.
     */
    exports.stop = def(me, 'stop', function(id) {
        var timerId = concat(kPrefix, id);
        var meta    = timers[timerId];

        if (!meta) {
            return;
        }

        if (meta.shouldRepeat) {
            clearInterval(meta.id);

            return;
        }

        clearTimeout(meta.id);
    });

    /*
     *
     */
    var stop = require(kModuleName, 'stop');

    /**
     * @function {static} o2.Timer.set
     *
     * <p>Sets and optionally starts a new timer.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Timer.set('myTimer', function() {
     *      console.log('hello');
     * }, 1000, {repeat : true});
     * </pre>
     *
     * @param {String} id - a unique identifier for the timer.
     * @param {Function} delegate - action to be done when the timer ticks.
     * @param {Integer} timeout - interval of the timer in milliseconds.
     * @param {Object} option - optional configuration in the form
     * <code>{start: true, repeat: true}</code>, if <strong>start</strong>
     * is <code>true</code> timer will start after being set; otherwise
     * it should be explicitly started using the
     * {@link o2.Timer.start} method. If <strong>repeat</strong> is
     * <code>false</code> the delegate will be executed only once, othwerwise
     * it will be executed at each interval until {@link o2.Timer.stop}
     * is called.
     */
    exports.set = def(me, 'set', function(id, delegate, timeout, options) {
        var timerId = concat(kPrefix, id);

        if (timers[timerId]) {
            stop(timerId);

            delete timers[timerId];
        }

        options = options || {};

        if (options.start === UNDEFINED) {
            options.start = true;
        }

        options.repeat = !!options.repeat;
        options.start = !!options.start;

        timers[timerId] = {
            delegate : delegate,
            timeout : timeout,
            id : null,
            shouldRepeat : options.repeat
        };

        if (options.start) {
            start(id);
        }
    });
}(this.o2, this));
/**
 * @module   try.core
 * @requires core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>Used for consequentially executing a set of <code>Function</code>s.</p>
 * <p>The functions are guaranteed to be called.</p>
 * <p>Even if an error occurs when calling a <code>Function</code>, the next
 * function will be tried, disregarding the error.</p>
 */
(function(framework) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Try';

    /**
     * @class {static} o2.Try
     *
     * <p>Used for consequentially executing a set of
     * <code>Function</code>s.</p>
     * <p>The <strong>function</strong>s are guaranteed to be called.</p>
     * <p>Even if an error occurs when calling a <code>Function</code>, the next
     * <code>Function</code> will be tried, disregarding the error.</p>
     */
    var me = create(kModuleName);

    /**
     * @function {static} o2.Try.all
     *
     * <p>Executes all the given delegates one by one.</p>
     * <p>If an exception occurs while executing the argument, the next one
     * will be tried.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Try.all(fn1, fn2, fn3);
     * </pre>
     *
     * @param {Arguments} ... - each argument as a function.
     */
    exports.all = def(me, 'all', function() {
        var i   = 0;
        var len = 0;

        for (i = 0, len = arguments.length; i < len; i++) {
            try {
                arguments[i]();
            } catch(ignore) {
            }
        }
    });

    /**
     * @function {static} o2.Try.these
     *
     * <p>Tries all the given delegates, will stop at the first successful
     * execution.</p>
     * <p>If an exception occurs while executing the argument, the next one
     * will be tried.</p>
     * <p>But after the first successful execution, with no error,
     * no further functions will be executed.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Try.these(fn1, fn2, fn3);
     * </pre>
     *
     * @param {Arguments} ... - each argument as a function.
     */
    exports.these = def(me, 'these', function() {
        var i   = 0;
        var len = 0;

        for (i = 0, len = arguments.length; i < len; i++) {
            try {
                arguments[i]();

                return;
            } catch(ignore) {
            }
        }
    });
}(this.o2));
/**
 * @module   unit.core
 * @requires core
 * @requires debugger.core
 * @requires dom.scroll
 * @requires string.core
 *
 * <!--
 *  This program is distributed under
 *  the terms of the MIT license.
 *  Please see the LICENSE file for details.
 *
 *  lastModified: 2012-06-02 22:47:21.699341
 * -->
 *
 * <p>This package is a unit test runner, that is used to test
 * <strong>js</strong> units.</p>
 */
(function(framework, window) {
    'use strict';

    var _         = framework.protecteds;
    var attr      = _.getAttr;
    var create    = attr(_, 'create');
    var def       = attr(_, 'define');
    var obj       = attr(_, 'getObject');
    var require   = attr(_, 'require');

    var exports = {};

    /*
     * Module Name
     */
    var kModuleName = 'Unit';

    /**
     * @class {static} o2.Unit
     *
     * <p>A "unit test" <strong>runner</strong>.</p>
     * <p>Runs <code>UnitTest</code>s.</p>
     */
    var me     = create(kModuleName);
    var myself = obj(me);

    /*
     * Aliases
     */

    var nill = require('nill');

    var kDebugger    = 'Debugger';
    var assert       = require(kDebugger, 'assert');
    var initDebugger = require(kDebugger, 'init');
    var log          = require(kDebugger, 'log');

    var kStringHelper = 'String';
    var concat = require(kStringHelper, 'concat');
    var format = require(kStringHelper, 'format');

    var scrollToBottom = require('Dom', 'scrollWindowToBottom');

    var setTimeout = attr(window, 'setTimeout');

    /*
     * Common Constants
     */

    /*
     * The DOM element to print the output.
     */
    var kOutputContainer = 'Output';

    /*
     * If true, the output will be sent to the console (if available), as well.
     */
    var kShouldUseConsole = true;

    /*
     * Chunk check interval (in milliseconds).
     * Chunking allows us to run large number of unit tests (of a test suite),
     * without causing a "script timed out" error.
     */
    var kCheckInterval = 100;

    /*
     * Commonly Used Templates
     */

    /*
     * Unit test suite completed.
     */
    var kUpdateTestCompletion = concat(
        '<p><b>Completed</b>: "{0}":</p>',
        '<p style="text-align:right">(<b>success: {1}</b> , ',
        '<b>failure: {2}</b>)</p>'
    );

    /*
     * Unit test has been completed.
     */
    var kFinishedUnitTest = concat(
        'Completed unit test <strong>#{0}</strong>:',
        ' "<em>{1}</em>"'
    );

    /*
     * All of the unit test suites have been completed.
     */
    var kReportGlobalCompletion = concat(
        '<p>All unit tests have been completed:</p>',
        '<p style="text-align:right">(<b>total success: {0}</b>, ',
        '<b>total failure: {1}</b>, <b>total # of test: {2}</b>)</p>'
    );

    /*
     * Debugger problem.
     */
    var kFailedToInitializeDebugger = concat(
        'Failed to initialize Debugger. ',
        'No "UnitTest"s will be run!'
    );

    /*
     *
     */
    var kFatalErrorInUnitTest = 'FATAL ERROR in UnitTest setup: "{0}"';

    /*
     *
     */
    var kArgumentCountMismatch = '"{0}" expects {1} arguments';

    /*
     *
     */
    var kArgumentException = 'Argument count mismatch!';

    /*
     *
     */
    var kExecutionException = 'Execution exception!';

    /*
     * Static State
     */

    /*
     * The test queue. This will be empty when there are no more tests to run.
     */
    var tests = [];

    /*
     * The total number of successful assertions.
     */
    var globalSuccessCount = 0;

    /*
     * The total number of failed assertions.
     */
    var globalFailureCount = 0;

    /*
     * Total number of completed unit tests.
     */
    var globalCompletedUnitTestCount = 0;

    /*
     * Is the current <strong>Test Suite</strong> still running.
     */
    var isRunning = false;

    /*
     * Current unit test's test suite finished running all of its assertions.
     */
    function reportTestCompletion(unitTest) {
        if (unitTest.remainingCount < 0) {
            return;
        }

        var description  = unitTest.description;
        var failureCount = unitTest.failureCount;
        var isAllSuccess = unitTest.failureCount <= 0;
        var successCount = unitTest.successCount;
        var message      = format(kUpdateTestCompletion, description,
            successCount, failureCount);

        assert(isAllSuccess, message);

        log(format(kFinishedUnitTest, ++globalCompletedUnitTestCount,
            description));
    }

    /*
     * All of the assertion in all unit tests have been completed.
     * There is nothing more to run.
     */
    function reportGlobalCompletion() {
        assert(globalFailureCount <= 0,
            format(kReportGlobalCompletion, globalSuccessCount,
                globalFailureCount, globalCompletedUnitTestCount)
        );

        scrollToBottom();
    }

    /*
     * Update success and failure counts of the <code>UnitTest</code>
     * <strong>unitTest</strong> and the global state.
     */
    function updateTestStatus(unitTest, isSuccess) {
        if(isSuccess) {
            globalSuccessCount++;
            unitTest.successCount++;

            return;
        }

        globalFailureCount++;
        unitTest.failureCount++;
    }

    /*
     * Has just done an assertion. Decrement the <strong>remainingCount</strong>
     * of the <code>UnitTest</code> <strong>unitTest</strong>
     */
    function didAssertion(unitTest, isSuccess, message) {
        if (unitTest.remainingCount <= 0) {
            return;
        }

        assert(isSuccess, message);
        updateTestStatus(unitTest, isSuccess);

        unitTest.remainingCount--;

        if(unitTest.remainingCount === 0) {
            reportTestCompletion(unitTest);
        }

        scrollToBottom();
    }

    /*
     * A fatal error has occured.
     */
    function reportFatalError(unitTest) {
        didAssertion(unitTest, false,
            format(kFatalErrorInUnitTest, unitTest.description));
    }

    /*
     * @return <code>true</code> if the <code>UnitTest</code>
     * <strong>unitTest</strong>s test suite has remaining assertions to run;
     * <code>false</code> otherwise.
     */
    function hasMoreItems(unitTest) {
        return unitTest.remainingCount > 0;
    }

    /*
     * Is the <code>UnitTest</code> <strong>activeUnitTest</strong> locked?
     */
    function isLocked(activeUnitTest) {
        return activeUnitTest && hasMoreItems(activeUnitTest);
    }

    /*
     * Initializes the <code>Debugger</code> if it has not been initialized
     * already.
     */
    function initializeDebugger() {
        try {
            initDebugger(kOutputContainer, kShouldUseConsole);
        } catch (failedToInitializeException) {
            log(failedToInitializeException);
            throw kFailedToInitializeDebugger;
        }
    }

    /**
     * @class {isolated} UnitTest
     *
     * <p>Defines a test unit.</p>
     * <p>This <strong>class</strong> is <strong>isolated</strong>, and it is
     * only available in the unit meta's callback given to the
     * {@link o2.Unit.add} method.
     */

    /**
     * @constructor UnitTest.UnitTest
     *
     * <p>Creates a new <code>UnitTest</code>.</p>
     *
     * @param {String} description - the description of the unit test.
     * @param {String} totalAssertionCount - the overall number of assertions
     * that the <code>UnitTest</code>'s <strong>testCase</strong> will run.
     * @param {Function} testCase - the test case to run when executing the
     * <code>UnitTest</code>.
     *
     * @param {String} description - the description of the test case.
     * @param {Integer} totalAssertionCount - a non zero integer for the total
     * assertion count in the test case.
     * @param {Function} testCase - the actual test case reference.
     *
     * @see o2.Unit.add
     */
    function UnitTest(description, totalAssertionCount, testCase) {
        this.description    = description;
        this.failureCount   = 0;
        this.remainingCount = totalAssertionCount;
        this.successCount   = 0;
        this.testCase       = testCase;
    }

    var p = UnitTest.prototype;

    /**
     * @function o2.UnitTest.terminate
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * test.terminate();
     * </pre>
     *
     * <p>Terminates the unit test by setting remaining assertion count to
     * zero.</p>
     */
    p.terminate = function() {
        this.remainingCount = 0;
    };

    /*
     * Executes an <code>o2.UnitTest</code> unit test.
     */
    function execute(unitTest) {
        try {
            unitTest.testCase.apply(unitTest, []);
        } catch (executionException) {
            log(executionException);
            didAssertion(unitTest, false, kExecutionException);
            unitTest.terminate();
            reportFatalError(unitTest);
        }
    }

    /*
     * Checks whether <strong>localParameterCount</strong> equals
     * <strong>argumentsLength</strong> and throws an exception if they do not
     * match.
     */
    function expectProperArgumentLength(unitTest, localParameterCount,
                argumentsLength, methodName) {
        if (argumentsLength === localParameterCount) {

            return;
        }

        didAssertion(unitTest, false, kArgumentException);

        throw format(kArgumentCountMismatch, methodName, localParameterCount);
    }

    /**
     * @function {static} o2.Unit.add
     *
     * <p>Creates a test suite parsing the <strong>testMeta</strong>, and
     * adds it to the test queue.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.add('some method SHOULD meet a requirement', {
     *      count: 1,
     *      test : function() {
     *          var me = this;
     *          o2.Unit.assert(me, false, 'I pass.');
     *      }
     * });
     * </pre>
     *
     * @param {String} description - the description of the test.
     * @param {Object} testMeta - test meta data in the form {count:
     * [number], test: [callback]}, where <strong>count</strong> is the
     * total number of assertions in the test suite, and
     * <strong>test</strong> is the actual test suite <code>Function</code>.
     */
    exports.add = def(me, 'add', function(description, testMeta) {
        var kRequiredLocalParameterCount = 2;
        var kMethodName = 'add';
        var kArgumentsLength = arguments.length;

        var totalAssertionCount = testMeta.count;
        var testCase = testMeta.test;

        expectProperArgumentLength({}, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        tests.push(new UnitTest(description, totalAssertionCount,
            testCase));
    });

    /**
     * @function {static} o2.Unit.assert
     * <p>Asserts whether the given <strong>expression</strong> evaluates to
     * <code>true</code> or not.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.assert(me, condition, 'condition is true');
     * </pre>
     *
     * @param {o2.UnitTest} unitTest - the current active unit test.
     * @param {Expression} expression - the expression to evaluate.
     * @param {String} message - the associated message.
     */
    exports.assert = def(me, 'assert', function(unitTest, expression, message) {
        var kArgumentsLength             = arguments.length;
        var kMethodName                  = 'assert';
        var kRequiredLocalParameterCount = 3;
        var result                       = !!expression;

        expectProperArgumentLength(unitTest, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        didAssertion(unitTest, result, message);
    });

    /**
     * @function {static} o2.Unit.assertEqual
     * <p>Asserts whether two values are equal.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.assertEqual(me, 10, '10', '10 is 10');
     * </pre>
     *
     * @param {o2.UnitTest} unitTest - the current active unit test.
     * @param {Object} currentValue - the current value to assert.
     * @param {Object} expectedValue - the expected value to check against.
     * @param {String} message - the associated message.
     */
    exports.assertEqual = def(me, 'assertEqual', function(unitTest,
                currentValue, expectedValue, message) {
        var kArgumentsLength             = arguments.length;
        var kMethodName                  = 'assertEqual';
        var kRequiredLocalParameterCount = 4;

        // JSLint valitation error on purpose.
        var result = (currentValue == expectedValue);

        expectProperArgumentLength(unitTest, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        didAssertion(unitTest, result, message);
    });

    /**
     * @function {static} o2.Unit.assertNotEqual
     * <p>Asserts whether two values are <strong>NOT</strong> equal.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.assertNotEqual(me, 10, '11', '10 is not 11');
     * </pre>
     *
     * @param {o2.UnitTest} unitTest - the current active unit test.
     * @param {Object} currentValue - the current value to assert.
     * @param {Object} expectedValue - the expected value to check against.
     * @param {String} message - the associated message.
     */
    exports.assertNotEqual = def(me, 'assertNotEqual', function(unitTest,
                currentValue, expectedValue, message) {
        var kArgumentsLength             = arguments.length;
        var kMethodName                  = 'assertNotEqual';
        var kRequiredLocalParameterCount = 4;

        // JSLint validation error on purpose:
        var result = (currentValue != expectedValue);

        expectProperArgumentLength(unitTest, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        didAssertion(unitTest, result, message);
    });

    /**
     * @function {static} o2.Unit.assertStrictEqual
     *
     * <p>Asserts whether two values are strictly equal (by value and
     * type).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.assertStrictEqual(me, 10, 10, '10 is 10');
     * </pre>
     *
     * @param {o2.UnitTest} unitTest - the current active unit test.
     * @param {Object} currentValue - the current value to assert.
     * @param {Object} expectedValue - the expected value to check against.
     * @param {String} message - the associated message.
     */
    exports.assertStrictEqual = def(me, 'assertStrictEqual', function(unitTest,
                currentValue, expectedValue, message) {
        var kArgumentsLength             = arguments.length;
        var kMethodName                  = 'assertStrictEqual';
        var kRequiredLocalParameterCount = 4;

        var result = (currentValue === expectedValue);

        expectProperArgumentLength(unitTest, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        didAssertion(unitTest, result, message);
    });

    /**
     * @function {static} o2.Unit.assertStrictNotEqual
     *
     * <p>Asserts whether two values are strictly <strong>NOT</strong> equal
     * (by value and type).</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.assertStrictNotEqual(me, 10, '10', '10 is not 10');
     * </pre>
     *
     * @param {o2.UnitTest} unitTest - the current active unit test.
     * @param {Object} currentValue - the current value to assert.
     * @param {Object} expectedValue - the expected value to check against.
     * @param {String} message - the associated message.
     */
    exports.assertStrictNotEqual = def(me, 'assertStrictNotEqual', function(
                unitTest, currentValue, expectedValue, message) {
        var kArgumentsLength             = arguments.length;
        var kMethodName                  = 'assertStrictNotEqual';
        var kRequiredLocalParameterCount = 4;

        var result = (currentValue !== expectedValue);

        expectProperArgumentLength(unitTest, kRequiredLocalParameterCount,
            kArgumentsLength, kMethodName);

        didAssertion(unitTest, result, message);
    });

    /**
     * @function {static} o2.Unit.getGlobalFailureCount
     *
     * <p>Gets the total number of failed assertions so far.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var totalFail = o2.Unit.getGlobalFailureCount();
     * </pre>
     *
     * @return the total number of failed assertions.
     */
    exports.getGlobalFailureCount = def(me, 'getGlobalFailureCount',
                function() {
        return globalFailureCount;
    });

    /**
     * @function {static} o2.Unit.getGlobalSuccessCount
     *
     * <p>Gets the total number of successful assertions so far.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var totalSuccess = o2.Unit.getGlobalSuccessCount();
     * </pre>
     *
     * @return the total number of successful assertions.
     */
    exports.getGlobalSuccessCount = def(me, 'getGlobalSuccessCount',
                function() {
        return globalSuccessCount;
    });

    /**
     * @function {static} o2.Unit.isRunning
     *
     * <p>Checks whether the current <strong>test suite</strong> is still
     * running.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * var isActive = o2.Unit.isRunning();
     * </pre>
     *
     * @return <code>true</code> if the current <strong>test suite</strong>
     * is still runing; <code>false</code> otherwise.
     */
    exports.isRunning = def(me, 'isRunning', function() {
        return isRunning;
    });

    /**
     * @function {static} o2.Unit.log
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.log('hello world');
     * </pre>
     *
     * <p>Logs the <strong>message</strong>.</p>
     * <p>An alias to {@link Debugger.log}.</p>
     *
     * @see o2.Debugger.log
     */
    exports.log = def(me, 'log', function(message) {
        log(message);
    });

    /**
     * @function {static} o2.Unit.run
     *
     * <p>Asynchronously runs all of the registered
     * <code>UnitTest</code>s, one after another.</p>
     *
     * <p><strong>Usage example:</strong></p>
     *
     * <pre>
     * o2.Unit.run(function() {
     *      // Completed.
     * });
     * </pre>
     *
     * @param {Function} globalCompletionCallback - (Optional) this callback
     * will be run with <code>o2.Unit</code> as a parameter passed to it.
     */
    exports.run = def(me, 'run', function(globalCompletionCallback) {
        if (isRunning) {
            return;
        }

        isRunning = true;

        var oncomplete = globalCompletionCallback || nill;

        initializeDebugger();

        var activeUnitTest = null;

        setTimeout(function waitForUnitTest() {
            if (isLocked(activeUnitTest)) {
                setTimeout(waitForUnitTest, kCheckInterval);

                return;
            }

            // Grab the currently active UnitTest.
            activeUnitTest = tests.shift();

            var isSuiteComplete = !activeUnitTest ||
                !activeUnitTest instanceof UnitTest;

            if (isSuiteComplete) {
                reportGlobalCompletion();

                isRunning = false;

                // We are done with this unit test, so release the lock.
                activeUnitTest = null;

                oncomplete(myself);

                return;
            }

            if (hasMoreItems(activeUnitTest)) {
                execute(activeUnitTest);

                setTimeout(waitForUnitTest, kCheckInterval);

                return;
            }

            // We are done with this unit test, so release the lock.
            activeUnitTest = null;

        }, kCheckInterval);
    });
}(this.o2, this));
exports.o2 = this.o2;
